diff --git a/node_modules/@uniswap/sdk-core/dist/sdk-core.cjs.development.js b/node_modules/@uniswap/sdk-core/dist/sdk-core.cjs.development.js
index 6954510..fb70983 100644
--- a/node_modules/@uniswap/sdk-core/dist/sdk-core.cjs.development.js
+++ b/node_modules/@uniswap/sdk-core/dist/sdk-core.cjs.development.js
@@ -204,13 +204,13 @@ var ARBITRUM_SEPOLIA_ADDRESSES = {
 }; // sepolia v3 addresses
 
 var SEPOLIA_ADDRESSES = {
-  v3CoreFactoryAddress: '0x0227628f3F023bb0B980b67D528571c95c6DaC1c',
-  multicallAddress: '0xD7F33bCdb21b359c8ee6F0251d30E94832baAd07',
-  quoterAddress: '0xEd1f6473345F45b75F8179591dd5bA1888cf2FB3',
-  v3MigratorAddress: '0x729004182cF005CEC8Bd85df140094b6aCbe8b15',
-  nonfungiblePositionManagerAddress: '0x1238536071E1c677A632429e3655c799b22cDA52',
-  tickLensAddress: '0xd7f33bcdb21b359c8ee6f0251d30e94832baad07',
-  swapRouter02Address: '0x3bFA4769FB09eefC5a80d6E87c3B9C650f7Ae48E'
+  v3CoreFactoryAddress: '0x11BAa8360DD2f9de11EA93501C2022E1260DC02f',
+  multicallAddress: '0x65Dec5354c0Ae5bf432135097c2bC68FA09ee210',
+  quoterAddress: '0xdA7377bE8BA41acA5f24B8C92C99290614d2ABf8',
+  v3MigratorAddress: '0xDf3e6435Cce912384476F1926ED4caca16785d83',
+  nonfungiblePositionManagerAddress: '0x3A525D8737bb0b483AbCCF6b387F1E6764C46DF6',
+  tickLensAddress: '0x45533a7407f33191E9278bc577E53B107A53Da36',
+  swapRouter02Address: '0x1b8DB7D581376e87d76936432411BdF47f9E524D'
 }; // Avalanche v3 addresses
 
 var AVALANCHE_ADDRESSES = {
@@ -940,7 +940,7 @@ var _WETH;
  * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped
  */
 
-var WETH9 = (_WETH = {}, _WETH[1] = /*#__PURE__*/new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'), _WETH[3] = /*#__PURE__*/new Token(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'), _WETH[4] = /*#__PURE__*/new Token(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'), _WETH[5] = /*#__PURE__*/new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'), _WETH[42] = /*#__PURE__*/new Token(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'), _WETH[10] = /*#__PURE__*/new Token(10, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'), _WETH[69] = /*#__PURE__*/new Token(69, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'), _WETH[11155420] = /*#__PURE__*/new Token(11155420, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'), _WETH[42161] = /*#__PURE__*/new Token(42161, '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', 18, 'WETH', 'Wrapped Ether'), _WETH[421611] = /*#__PURE__*/new Token(421611, '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681', 18, 'WETH', 'Wrapped Ether'), _WETH[421614] = /*#__PURE__*/new Token(421614, '0x980B62Da83eFf3D4576C647993b0c1D7faf17c73', 18, 'WETH', 'Wrapped Ether'), _WETH[8453] = /*#__PURE__*/new Token(8453, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'), _WETH[56] = /*#__PURE__*/new Token(56, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB'), _WETH[137] = /*#__PURE__*/new Token(137, '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270', 18, 'WMATIC', 'Wrapped MATIC'), _WETH[43114] = /*#__PURE__*/new Token(43114, '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7', 18, 'WAVAX', 'Wrapped AVAX'), _WETH);
+var WETH9 = (_WETH = {}, _WETH[1] = /*#__PURE__*/new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'), _WETH[3] = /*#__PURE__*/new Token(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'), _WETH[4] = /*#__PURE__*/new Token(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'), _WETH[5] = /*#__PURE__*/new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'), _WETH[42] = /*#__PURE__*/new Token(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'), _WETH[10] = /*#__PURE__*/new Token(10, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'), _WETH[69] = /*#__PURE__*/new Token(69, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'), _WETH[11155420] = /*#__PURE__*/new Token(11155420, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'), _WETH[42161] = /*#__PURE__*/new Token(42161, '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', 18, 'WETH', 'Wrapped Ether'), _WETH[421611] = /*#__PURE__*/new Token(421611, '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681', 18, 'WETH', 'Wrapped Ether'), _WETH[421614] = /*#__PURE__*/new Token(421614, '0x980B62Da83eFf3D4576C647993b0c1D7faf17c73', 18, 'WETH', 'Wrapped Ether'), _WETH[8453] = /*#__PURE__*/new Token(8453, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'), _WETH[56] = /*#__PURE__*/new Token(56, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB'), _WETH[137] = /*#__PURE__*/new Token(137, '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270', 18, 'WMATIC', 'Wrapped MATIC'), _WETH[43114] = /*#__PURE__*/new Token(43114, '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7', 18, 'WAVAX', 'Wrapped AVAX'), _WETH[11155111] = /*#__PURE__*/new Token(11155111, '0xb16F35c0Ae2912430DAc15764477E179D9B9EbEa', 18, 'WETH', 'Wrapped Ether'), _WETH);
 
 /**
  * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets
diff --git a/node_modules/@uniswap/sdk-core/dist/sdk-core.cjs.development.js.map b/node_modules/@uniswap/sdk-core/dist/sdk-core.cjs.development.js.map
index 7765803..23770b0 100644
--- a/node_modules/@uniswap/sdk-core/dist/sdk-core.cjs.development.js.map
+++ b/node_modules/@uniswap/sdk-core/dist/sdk-core.cjs.development.js.map
@@ -1 +1 @@
-{"version":3,"file":"sdk-core.cjs.development.js","sources":["../src/chains.ts","../src/addresses.ts","../src/constants.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/price.ts","../src/entities/baseCurrency.ts","../src/entities/nativeCurrency.ts","../src/utils/validateAndParseAddress.ts","../src/entities/token.ts","../src/entities/weth9.ts","../src/entities/ether.ts","../src/utils/computePriceImpact.ts","../src/utils/sortedInsert.ts","../src/utils/sqrt.ts"],"sourcesContent":["export enum ChainId {\n  MAINNET = 1,\n  GOERLI = 5,\n  SEPOLIA = 11155111,\n  OPTIMISM = 10,\n  OPTIMISM_GOERLI = 420,\n  OPTIMISM_SEPOLIA = 11155420,\n  ARBITRUM_ONE = 42161,\n  ARBITRUM_GOERLI = 421613,\n  ARBITRUM_SEPOLIA = 421614,\n  POLYGON = 137,\n  POLYGON_MUMBAI = 80001,\n  CELO = 42220,\n  CELO_ALFAJORES = 44787,\n  GNOSIS = 100,\n  MOONBEAM = 1284,\n  BNB = 56,\n  AVALANCHE = 43114,\n  BASE_GOERLI = 84531,\n  BASE = 8453,\n  ZORA = 7777777,\n  ZORA_SEPOLIA = 999999999,\n  ROOTSTOCK = 30,\n  BLAST = 81457\n}\n\nexport const SUPPORTED_CHAINS = [\n  ChainId.MAINNET,\n  ChainId.OPTIMISM,\n  ChainId.OPTIMISM_GOERLI,\n  ChainId.OPTIMISM_SEPOLIA,\n  ChainId.ARBITRUM_ONE,\n  ChainId.ARBITRUM_GOERLI,\n  ChainId.ARBITRUM_SEPOLIA,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.GOERLI,\n  ChainId.SEPOLIA,\n  ChainId.CELO_ALFAJORES,\n  ChainId.CELO,\n  ChainId.BNB,\n  ChainId.AVALANCHE,\n  ChainId.BASE,\n  ChainId.BASE_GOERLI,\n  ChainId.ZORA,\n  ChainId.ZORA_SEPOLIA,\n  ChainId.ROOTSTOCK,\n  ChainId.BLAST\n] as const\nexport type SupportedChainsType = typeof SUPPORTED_CHAINS[number]\n\nexport enum NativeCurrencyName {\n  // Strings match input for CLI\n  ETHER = 'ETH',\n  MATIC = 'MATIC',\n  CELO = 'CELO',\n  GNOSIS = 'XDAI',\n  MOONBEAM = 'GLMR',\n  BNB = 'BNB',\n  AVAX = 'AVAX',\n  ROOTSTOCK = 'RBTC'\n}\n","import { ChainId, SUPPORTED_CHAINS, SupportedChainsType } from './chains'\n\ntype AddressMap = { [chainId: number]: string }\n\ntype ChainAddresses = {\n  v3CoreFactoryAddress: string\n  multicallAddress: string\n  quoterAddress: string\n  v3MigratorAddress?: string\n  nonfungiblePositionManagerAddress?: string\n  tickLensAddress?: string\n  swapRouter02Address?: string\n  v1MixedRouteQuoterAddress?: string\n}\n\nconst DEFAULT_NETWORKS = [ChainId.MAINNET, ChainId.GOERLI, ChainId.SEPOLIA]\n\nfunction constructSameAddressMap(address: string, additionalNetworks: ChainId[] = []): AddressMap {\n  return DEFAULT_NETWORKS.concat(additionalNetworks).reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = address\n    return memo\n  }, {})\n}\n\nexport const UNI_ADDRESSES: AddressMap = constructSameAddressMap('0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984', [\n  ChainId.OPTIMISM,\n  ChainId.ARBITRUM_ONE,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.SEPOLIA\n])\n\nexport const UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS = '0x8B799381ac40b838BBA4131ffB26197C432AFe78'\n\n/**\n * @deprecated use V2_FACTORY_ADDRESSES instead\n */\nexport const V2_FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\nexport const V2_FACTORY_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n  [ChainId.GOERLI]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n  [ChainId.SEPOLIA]: '0xB7f907f7A9eBC822a80BD25E224be42Ce0A698A0',\n  [ChainId.OPTIMISM]: '0x0c3c1c532F1e39EdF36BE9Fe0bE1410313E074Bf',\n  [ChainId.ARBITRUM_ONE]: '0xf1D7CC64Fb4452F05c498126312eBE29f30Fbcf9',\n  [ChainId.AVALANCHE]: '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C',\n  [ChainId.BASE]: '0x8909dc15e40173ff4699343b6eb8132c65e18ec6',\n  [ChainId.BNB]: '0x8909Dc15e40173Ff4699343b6eB8132c65e18eC6',\n  [ChainId.POLYGON]: '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C',\n  [ChainId.CELO]: '0x79a530c8e2fA8748B7B40dd3629C0520c2cCf03f',\n  [ChainId.BLAST]: '0x5C346464d33F90bABaf70dB6388507CC889C1070'\n}\n/**\n * @deprecated use V2_ROUTER_ADDRESSES instead\n */\nexport const V2_ROUTER_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D'\nexport const V2_ROUTER_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\n  [ChainId.GOERLI]: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\n  [ChainId.ARBITRUM_ONE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.OPTIMISM]: '0x4a7b5da61326a6379179b40d00f57e5bbdc962c2',\n  [ChainId.BASE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.AVALANCHE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.BNB]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.POLYGON]: '0xedf6066a2b290c185783862c7f4776a2c8077ad1',\n  [ChainId.BLAST]: '0xBB66Eb1c5e875933D44DAe661dbD80e5D9B03035'\n}\n\n// Networks that share most of the same addresses i.e. Mainnet, Goerli, Optimism, Arbitrum, Polygon\nconst DEFAULT_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x1F98431c8aD98523631AE4a59f267346ea31F984',\n  multicallAddress: '0x1F98415757620B543A52E61c46B32eB19261F984',\n  quoterAddress: '0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6',\n  v3MigratorAddress: '0xA5644E29708357803b5A882D272c41cC0dF92B34',\n  nonfungiblePositionManagerAddress: '0xC36442b4a4522E871399CD717aBDD847Ab11FE88'\n}\nconst MAINNET_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  v1MixedRouteQuoterAddress: '0x84E44095eeBfEC7793Cd7d5b57B7e401D7f1cA2E'\n}\nconst GOERLI_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  v1MixedRouteQuoterAddress: '0xBa60b6e6fF25488308789E6e0A65D838be34194e'\n}\n\nconst OPTIMISM_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\nconst ARBITRUM_ONE_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  multicallAddress: '0xadF885960B47eA2CD9B55E6DAc6B42b7Cb2806dB',\n  tickLensAddress: '0xbfd8137f7d1516D3ea5cA83523914859ec47F573'\n}\nconst POLYGON_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\n\n// celo v3 addresses\nconst CELO_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xAfE208a311B21f13EF87E33A90049fC17A7acDEc',\n  multicallAddress: '0x633987602DE5C4F337e3DbF265303A1080324204',\n  quoterAddress: '0x82825d0554fA07f7FC52Ab63c961F330fdEFa8E8',\n  v3MigratorAddress: '0x3cFd4d48EDfDCC53D3f173F596f621064614C582',\n  nonfungiblePositionManagerAddress: '0x3d79EdAaBC0EaB6F08ED885C05Fc0B014290D95A',\n  tickLensAddress: '0x5f115D9113F88e0a0Db1b5033D90D4a9690AcD3D'\n}\n\n// BNB v3 addresses\nconst BNB_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7',\n  multicallAddress: '0x963Df249eD09c358A4819E39d9Cd5736c3087184',\n  quoterAddress: '0x78D78E420Da98ad378D7799bE8f4AF69033EB077',\n  v3MigratorAddress: '0x32681814957e0C13117ddc0c2aba232b5c9e760f',\n  nonfungiblePositionManagerAddress: '0x7b8A01B39D58278b5DE7e48c8449c9f4F5170613',\n  tickLensAddress: '0xD9270014D396281579760619CCf4c3af0501A47C',\n  swapRouter02Address: '0xB971eF87ede563556b2ED4b1C0b0019111Dd85d2'\n}\n\n// optimism goerli addresses\nconst OPTIMISM_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xB656dA17129e7EB733A557f4EBc57B76CFbB5d10',\n  multicallAddress: '0x07F2D8a2a02251B62af965f22fC4744A5f96BCCd',\n  quoterAddress: '0x9569CbA925c8ca2248772A9A4976A516743A246F',\n  v3MigratorAddress: '0xf6c55fBe84B1C8c3283533c53F51bC32F5C7Aba8',\n  nonfungiblePositionManagerAddress: '0x39Ca85Af2F383190cBf7d7c41ED9202D27426EF6',\n  tickLensAddress: '0xe6140Bd164b63E8BfCfc40D5dF952f83e171758e'\n}\n\n// optimism sepolia addresses\nconst OPTIMISM_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x8CE191193D15ea94e11d327b4c7ad8bbE520f6aF',\n  multicallAddress: '0x80e4e06841bb76AA9735E0448cB8d003C0EF009a',\n  quoterAddress: '0x0FBEa6cf957d95ee9313490050F6A0DA68039404',\n  v3MigratorAddress: '0xE7EcbAAaA54D007A00dbb6c1d2f150066D69dA07',\n  nonfungiblePositionManagerAddress: '0xdA75cEf1C93078e8b736FCA5D5a30adb97C8957d',\n  tickLensAddress: '0xCb7f54747F58F8944973cea5b8f4ac2209BadDC5',\n  swapRouter02Address: '0x94cC0AaC535CCDB3C01d6787D6413C739ae12bc4'\n}\n\n// arbitrum goerli v3 addresses\nconst ARBITRUM_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x4893376342d5D7b3e31d4184c08b265e5aB2A3f6',\n  multicallAddress: '0x8260CB40247290317a4c062F3542622367F206Ee',\n  quoterAddress: '0x1dd92b83591781D0C6d98d07391eea4b9a6008FA',\n  v3MigratorAddress: '0xA815919D2584Ac3F76ea9CB62E6Fd40a43BCe0C3',\n  nonfungiblePositionManagerAddress: '0x622e4726a167799826d1E1D150b076A7725f5D81',\n  tickLensAddress: '0xb52429333da969a0C79a60930a4Bf0020E5D1DE8'\n}\n\n// arbitrum sepolia v3 addresses\nconst ARBITRUM_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x248AB79Bbb9bC29bB72f7Cd42F17e054Fc40188e',\n  multicallAddress: '0x2B718b475e385eD29F56775a66aAB1F5cC6B2A0A',\n  quoterAddress: '0x2779a0CC1c3e0E44D2542EC3e79e3864Ae93Ef0B',\n  v3MigratorAddress: '0x398f43ef2c67B941147157DA1c5a868E906E043D',\n  nonfungiblePositionManagerAddress: '0x6b2937Bde17889EDCf8fbD8dE31C3C2a70Bc4d65',\n  tickLensAddress: '0x0fd18587734e5C2dcE2dccDcC7DD1EC89ba557d9',\n  swapRouter02Address: '0x101F443B4d1b059569D643917553c771E1b9663E'\n}\n\n// sepolia v3 addresses\nconst SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x0227628f3F023bb0B980b67D528571c95c6DaC1c',\n  multicallAddress: '0xD7F33bCdb21b359c8ee6F0251d30E94832baAd07',\n  quoterAddress: '0xEd1f6473345F45b75F8179591dd5bA1888cf2FB3',\n  v3MigratorAddress: '0x729004182cF005CEC8Bd85df140094b6aCbe8b15',\n  nonfungiblePositionManagerAddress: '0x1238536071E1c677A632429e3655c799b22cDA52',\n  tickLensAddress: '0xd7f33bcdb21b359c8ee6f0251d30e94832baad07',\n  swapRouter02Address: '0x3bFA4769FB09eefC5a80d6E87c3B9C650f7Ae48E'\n}\n\n// Avalanche v3 addresses\nconst AVALANCHE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x740b1c1de25031C31FF4fC9A62f554A55cdC1baD',\n  multicallAddress: '0x0139141Cd4Ee88dF3Cdb65881D411bAE271Ef0C2',\n  quoterAddress: '0xbe0F5544EC67e9B3b2D979aaA43f18Fd87E6257F',\n  v3MigratorAddress: '0x44f5f1f5E452ea8d29C890E8F6e893fC0f1f0f97',\n  nonfungiblePositionManagerAddress: '0x655C406EBFa14EE2006250925e54ec43AD184f8B',\n  tickLensAddress: '0xEB9fFC8bf81b4fFd11fb6A63a6B0f098c6e21950',\n  swapRouter02Address: '0xbb00FF08d01D300023C629E8fFfFcb65A5a578cE'\n}\n\nconst BASE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x33128a8fC17869897dcE68Ed026d694621f6FDfD',\n  multicallAddress: '0x091e99cb1C49331a94dD62755D168E941AbD0693',\n  quoterAddress: '0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a',\n  v3MigratorAddress: '0x23cF10b1ee3AdfCA73B0eF17C07F7577e7ACd2d7',\n  nonfungiblePositionManagerAddress: '0x03a520b32C04BF3bEEf7BEb72E919cf822Ed34f1',\n  tickLensAddress: '0x0CdeE061c75D43c82520eD998C23ac2991c9ac6d',\n  swapRouter02Address: '0x2626664c2603336E57B271c5C0b26F421741e481'\n}\n\n// Base Goerli v3 addresses\nconst BASE_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x9323c1d6D800ed51Bd7C6B216cfBec678B7d0BC2',\n  multicallAddress: '0xB206027a9E0E13F05eBEFa5D2402Bab3eA716439',\n  quoterAddress: '0xedf539058e28E5937dAef3f69cEd0b25fbE66Ae9',\n  v3MigratorAddress: '0x3efe5d02a04b7351D671Db7008ec6eBA9AD9e3aE',\n  nonfungiblePositionManagerAddress: '0x3c61369ef0D1D2AFa70d8feC2F31C5D6Ce134F30',\n  tickLensAddress: '0x1acB873Ee909D0c98adB18e4474943249F931b92',\n  swapRouter02Address: '0x8357227D4eDc78991Db6FDB9bD6ADE250536dE1d'\n}\n\nconst ZORA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x7145F8aeef1f6510E92164038E1B6F8cB2c42Cbb',\n  multicallAddress: '0xA51c76bEE6746cB487a7e9312E43e2b8f4A37C15',\n  quoterAddress: '0x11867e1b3348F3ce4FcC170BC5af3d23E07E64Df',\n  v3MigratorAddress: '0x048352d8dCF13686982C799da63fA6426a9D0b60',\n  nonfungiblePositionManagerAddress: '0xbC91e8DfA3fF18De43853372A3d7dfe585137D78',\n  tickLensAddress: '0x209AAda09D74Ad3B8D0E92910Eaf85D2357e3044',\n  swapRouter02Address: '0x7De04c96BE5159c3b5CeffC82aa176dc81281557'\n}\n\nconst ZORA_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x4324A677D74764f46f33ED447964252441aA8Db6',\n  multicallAddress: '0xA1E7e3A69671C4494EC59Dbd442de930a93F911A',\n  quoterAddress: '0xC195976fEF0985886E37036E2DF62bF371E12Df0',\n  v3MigratorAddress: '0x65ef259b31bf1d977c37e9434658694267674897',\n  nonfungiblePositionManagerAddress: '0xB8458EaAe43292e3c1F7994EFd016bd653d23c20',\n  tickLensAddress: '0x23C0F71877a1Fc4e20A78018f9831365c85f3064'\n}\n\nconst ROOTSTOCK_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xaF37EC98A00FD63689CF3060BF3B6784E00caD82',\n  multicallAddress: '0x996a9858cDfa45Ad68E47c9A30a7201E29c6a386',\n  quoterAddress: '0xb51727c996C68E60F598A923a5006853cd2fEB31',\n  v3MigratorAddress: '0x16678977CA4ec3DAD5efc7b15780295FE5f56162',\n  nonfungiblePositionManagerAddress: '0x9d9386c042F194B460Ec424a1e57ACDE25f5C4b1',\n  tickLensAddress: '0x55B9dF5bF68ADe972191a91980459f48ecA16afC',\n  swapRouter02Address: '0x0B14ff67f0014046b4b99057Aec4509640b3947A'\n}\n\nconst BLAST_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x792edAdE80af5fC680d96a2eD80A44247D2Cf6Fd',\n  multicallAddress: '0xdC7f370de7631cE9e2c2e1DCDA6B3B5744Cf4705',\n  quoterAddress: '0x6Cdcd65e03c1CEc3730AeeCd45bc140D57A25C77',\n  v3MigratorAddress: '0x15CA7043CD84C5D21Ae76Ba0A1A967d42c40ecE0',\n  nonfungiblePositionManagerAddress: '0xB218e4f7cF0533d4696fDfC419A0023D33345F28',\n  tickLensAddress: '0x2E95185bCdD928a3e984B7e2D6560Ab1b17d7274',\n  swapRouter02Address: '0x549FEB8c9bd4c12Ad2AB27022dA12492aC452B66'\n}\n\nexport const CHAIN_TO_ADDRESSES_MAP: Record<SupportedChainsType, ChainAddresses> = {\n  [ChainId.MAINNET]: MAINNET_ADDRESSES,\n  [ChainId.OPTIMISM]: OPTIMISM_ADDRESSES,\n  [ChainId.ARBITRUM_ONE]: ARBITRUM_ONE_ADDRESSES,\n  [ChainId.POLYGON]: POLYGON_ADDRESSES,\n  [ChainId.POLYGON_MUMBAI]: POLYGON_ADDRESSES,\n  [ChainId.GOERLI]: GOERLI_ADDRESSES,\n  [ChainId.CELO]: CELO_ADDRESSES,\n  [ChainId.CELO_ALFAJORES]: CELO_ADDRESSES,\n  [ChainId.BNB]: BNB_ADDRESSES,\n  [ChainId.OPTIMISM_GOERLI]: OPTIMISM_GOERLI_ADDRESSES,\n  [ChainId.OPTIMISM_SEPOLIA]: OPTIMISM_SEPOLIA_ADDRESSES,\n  [ChainId.ARBITRUM_GOERLI]: ARBITRUM_GOERLI_ADDRESSES,\n  [ChainId.ARBITRUM_SEPOLIA]: ARBITRUM_SEPOLIA_ADDRESSES,\n  [ChainId.SEPOLIA]: SEPOLIA_ADDRESSES,\n  [ChainId.AVALANCHE]: AVALANCHE_ADDRESSES,\n  [ChainId.BASE]: BASE_ADDRESSES,\n  [ChainId.BASE_GOERLI]: BASE_GOERLI_ADDRESSES,\n  [ChainId.ZORA]: ZORA_ADDRESSES,\n  [ChainId.ZORA_SEPOLIA]: ZORA_SEPOLIA_ADDRESSES,\n  [ChainId.ROOTSTOCK]: ROOTSTOCK_ADDRESSES,\n  [ChainId.BLAST]: BLAST_ADDRESSES\n}\n\n/* V3 Contract Addresses */\nexport const V3_CORE_FACTORY_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].v3CoreFactoryAddress\n    return memo\n  }, {})\n}\n\nexport const V3_MIGRATOR_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const v3MigratorAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v3MigratorAddress\n    if (v3MigratorAddress) {\n      memo[chainId] = v3MigratorAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const MULTICALL_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].multicallAddress\n    return memo\n  }, {})\n}\n\n/**\n * The oldest V0 governance address\n */\nexport const GOVERNANCE_ALPHA_V0_ADDRESSES: AddressMap = constructSameAddressMap(\n  '0x5e4be8Bc9637f0EAA1A755019e06A68ce081D58F'\n)\n/**\n * The older V1 governance address\n */\nexport const GOVERNANCE_ALPHA_V1_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0xC4e172459f1E7939D522503B81AFAaC1014CE6F6'\n}\n/**\n * The latest governor bravo that is currently admin of timelock\n */\nexport const GOVERNANCE_BRAVO_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x408ED6354d4973f66138C91495F2f2FCbd8724C3'\n}\n\nexport const TIMELOCK_ADDRESSES: AddressMap = constructSameAddressMap('0x1a9C8182C09F50C8318d769245beA52c32BE35BC')\n\nexport const MERKLE_DISTRIBUTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x090D4613473dEE047c3f2706764f49E0821D256e'\n}\n\nexport const ARGENT_WALLET_DETECTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xeca4B0bDBf7c55E9b7925919d03CbF8Dc82537E8'\n}\n\nexport const QUOTER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].quoterAddress\n    return memo\n  }, {})\n}\n\nexport const NONFUNGIBLE_POSITION_MANAGER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const nonfungiblePositionManagerAddress = CHAIN_TO_ADDRESSES_MAP[chainId].nonfungiblePositionManagerAddress\n    if (nonfungiblePositionManagerAddress) {\n      memo[chainId] = nonfungiblePositionManagerAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const ENS_REGISTRAR_ADDRESSES: AddressMap = {\n  ...constructSameAddressMap('0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e')\n}\n\nexport const SOCKS_CONTROLLER_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x65770b5283117639760beA3F867b69b3697a91dd'\n}\n\nexport const TICK_LENS_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const tickLensAddress = CHAIN_TO_ADDRESSES_MAP[chainId].tickLensAddress\n    if (tickLensAddress) {\n      memo[chainId] = tickLensAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const MIXED_ROUTE_QUOTER_V1_ADDRESSES: AddressMap = SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n  const v1MixedRouteQuoterAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v1MixedRouteQuoterAddress\n  if (v1MixedRouteQuoterAddress) {\n    memo[chainId] = v1MixedRouteQuoterAddress\n  }\n  return memo\n}, {})\n\nexport const SWAP_ROUTER_02_ADDRESSES = (chainId: number) => {\n  if (SUPPORTED_CHAINS.includes(chainId)) {\n    const id = chainId as SupportedChainsType\n    return CHAIN_TO_ADDRESSES_MAP[id].swapRouter02Address ?? '0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45'\n  }\n  return ''\n}\n","import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | string | number\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { Currency } from '../currency'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\nimport _Big from 'big.js'\n\nimport toFormat from 'toformat'\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n}\n","import JSBI from 'jsbi'\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Currency } from '../currency'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [{ baseAmount: CurrencyAmount<TBase>; quoteAmount: CurrencyAmount<TQuote> }]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { Token } from './token'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class BaseCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import { BaseCurrency } from './baseCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends BaseCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","import { getAddress } from '@ethersproject/address'\n\n/**\n * Validates an address and returns the parsed (checksummed) version of that address\n * @param address the unchecksummed hex address\n */\nexport function validateAndParseAddress(address: string): string {\n  try {\n    return getAddress(address)\n  } catch (error) {\n    throw new Error(`${address} is not a valid address.`)\n  }\n}\n\n// Checks a string starts with 0x, is 42 characters long and contains only hex characters after 0x\nconst startsWith0xLen42HexRegex = /^0x[0-9a-fA-F]{40}$/\n\n/**\n * Checks if an address is valid by checking 0x prefix, length === 42 and hex encoding.\n * @param address the unchecksummed hex address\n */\nexport function checkValidAddress(address: string): string {\n  if (startsWith0xLen42HexRegex.test(address)) {\n    return address\n  }\n\n  throw new Error(`${address} is not a valid address.`)\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport invariant from 'tiny-invariant'\nimport { checkValidAddress, validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { BaseCurrency } from './baseCurrency'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string\n\n  /**\n   * Relevant for fee-on-transfer (FOT) token taxes,\n   * Not every ERC20 token is FOT token, so this field is optional\n   */\n  public readonly buyFeeBps?: BigNumber\n  public readonly sellFeeBps?: BigNumber\n\n  /**\n   *\n   * @param chainId {@link BaseCurrency#chainId}\n   * @param address The contract address on the chain on which this token lives\n   * @param decimals {@link BaseCurrency#decimals}\n   * @param symbol {@link BaseCurrency#symbol}\n   * @param name {@link BaseCurrency#name}\n   * @param bypassChecksum If true it only checks for length === 42, startsWith 0x and contains only hex characters\n   * @param buyFeeBps Buy fee tax for FOT tokens, in basis points\n   * @param sellFeeBps Sell fee tax for FOT tokens, in basis points\n   */\n  public constructor(\n    chainId: number,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string,\n    bypassChecksum?: boolean,\n    buyFeeBps?: BigNumber,\n    sellFeeBps?: BigNumber\n  ) {\n    super(chainId, decimals, symbol, name)\n    if (bypassChecksum) {\n      this.address = checkValidAddress(address)\n    } else {\n      this.address = validateAndParseAddress(address)\n    }\n    if (buyFeeBps) {\n      invariant(buyFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    if (sellFeeBps) {\n      invariant(sellFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    this.buyFeeBps = buyFeeBps\n    this.sellFeeBps = sellFeeBps\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address.toLowerCase() === other.address.toLowerCase()\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address.toLowerCase() !== other.address.toLowerCase(), 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n","import { Token } from './token'\n\n/**\n * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped\n */\nexport const WETH9: { [chainId: number]: Token } = {\n  [1]: new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'),\n  [3]: new Token(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  [4]: new Token(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  [5]: new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [42]: new Token(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\n\n  [10]: new Token(10, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  [69]: new Token(69, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  [11155420]: new Token(11155420, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n\n  [42161]: new Token(42161, '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', 18, 'WETH', 'Wrapped Ether'),\n  [421611]: new Token(421611, '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681', 18, 'WETH', 'Wrapped Ether'),\n  [421614]: new Token(421614, '0x980B62Da83eFf3D4576C647993b0c1D7faf17c73', 18, 'WETH', 'Wrapped Ether'),\n\n  [8453]: new Token(8453, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n\n  [56]: new Token(56, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB'),\n  [137]: new Token(137, '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270', 18, 'WMATIC', 'Wrapped MATIC'),\n  [43114]: new Token(43114, '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7', 18, 'WAVAX', 'Wrapped AVAX')\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { NativeCurrency } from './nativeCurrency'\nimport { Token } from './token'\nimport { WETH9 } from './weth9'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency, CurrencyAmount, Percent, Price } from '../entities'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n"],"names":["ChainId","SUPPORTED_CHAINS","MAINNET","OPTIMISM","OPTIMISM_GOERLI","OPTIMISM_SEPOLIA","ARBITRUM_ONE","ARBITRUM_GOERLI","ARBITRUM_SEPOLIA","POLYGON","POLYGON_MUMBAI","GOERLI","SEPOLIA","CELO_ALFAJORES","CELO","BNB","AVALANCHE","BASE","BASE_GOERLI","ZORA","ZORA_SEPOLIA","ROOTSTOCK","BLAST","NativeCurrencyName","DEFAULT_NETWORKS","constructSameAddressMap","address","additionalNetworks","concat","reduce","memo","chainId","UNI_ADDRESSES","UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS","V2_FACTORY_ADDRESS","V2_FACTORY_ADDRESSES","V2_ROUTER_ADDRESS","V2_ROUTER_ADDRESSES","DEFAULT_ADDRESSES","v3CoreFactoryAddress","multicallAddress","quoterAddress","v3MigratorAddress","nonfungiblePositionManagerAddress","MAINNET_ADDRESSES","v1MixedRouteQuoterAddress","GOERLI_ADDRESSES","OPTIMISM_ADDRESSES","ARBITRUM_ONE_ADDRESSES","tickLensAddress","POLYGON_ADDRESSES","CELO_ADDRESSES","BNB_ADDRESSES","swapRouter02Address","OPTIMISM_GOERLI_ADDRESSES","OPTIMISM_SEPOLIA_ADDRESSES","ARBITRUM_GOERLI_ADDRESSES","ARBITRUM_SEPOLIA_ADDRESSES","SEPOLIA_ADDRESSES","AVALANCHE_ADDRESSES","BASE_ADDRESSES","BASE_GOERLI_ADDRESSES","ZORA_ADDRESSES","ZORA_SEPOLIA_ADDRESSES","ROOTSTOCK_ADDRESSES","BLAST_ADDRESSES","CHAIN_TO_ADDRESSES_MAP","V3_CORE_FACTORY_ADDRESSES","V3_MIGRATOR_ADDRESSES","MULTICALL_ADDRESSES","GOVERNANCE_ALPHA_V0_ADDRESSES","GOVERNANCE_ALPHA_V1_ADDRESSES","GOVERNANCE_BRAVO_ADDRESSES","TIMELOCK_ADDRESSES","MERKLE_DISTRIBUTOR_ADDRESS","ARGENT_WALLET_DETECTOR_ADDRESS","QUOTER_ADDRESSES","NONFUNGIBLE_POSITION_MANAGER_ADDRESSES","ENS_REGISTRAR_ADDRESSES","SOCKS_CONTROLLER_ADDRESSES","TICK_LENS_ADDRESSES","MIXED_ROUTE_QUOTER_V1_ADDRESSES","SWAP_ROUTER_02_ADDRESSES","includes","id","TradeType","Rounding","MaxUint256","JSBI","BigInt","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","Error","invert","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","invariant","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","lessThanOrEqual","decimalScale","exponentiate","decimals","fromRawAmount","rawAmount","fromFractionalAmount","equals","added","subtracted","multiplied","divided","toExact","isToken","wrapped","ONE_HUNDRED","toPercent","fraction","Percent","Price","baseCurrency","quoteCurrency","args","length","result","quoteAmount","baseAmount","scalar","quote","currencyAmount","adjustedForDecimals","BaseCurrency","symbol","name","isSafeInteger","NativeCurrency","validateAndParseAddress","getAddress","error","startsWith0xLen42HexRegex","checkValidAddress","test","Token","bypassChecksum","buyFeeBps","sellFeeBps","gte","BigNumber","from","toLowerCase","sortsBefore","WETH9","Ether","onChain","_etherCache","isNative","weth9","computePriceImpact","midPrice","inputAmount","outputAmount","quotedOutputAmount","priceImpact","sortedInsert","items","maxSize","comparator","push","isFull","lo","hi","mid","splice","pop","MAX_SAFE_INTEGER","ZERO","ONE","TWO","sqrt","value","greaterThanOrEqual","Math","floor","toNumber","z","x"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"sdk-core.cjs.development.js","sources":["../src/chains.ts","../src/addresses.ts","../src/constants.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/price.ts","../src/entities/baseCurrency.ts","../src/entities/nativeCurrency.ts","../src/utils/validateAndParseAddress.ts","../src/entities/token.ts","../src/entities/weth9.ts","../src/entities/ether.ts","../src/utils/computePriceImpact.ts","../src/utils/sortedInsert.ts","../src/utils/sqrt.ts"],"sourcesContent":["export enum ChainId {\n  MAINNET = 1,\n  GOERLI = 5,\n  SEPOLIA = 11155111,\n  OPTIMISM = 10,\n  OPTIMISM_GOERLI = 420,\n  OPTIMISM_SEPOLIA = 11155420,\n  ARBITRUM_ONE = 42161,\n  ARBITRUM_GOERLI = 421613,\n  ARBITRUM_SEPOLIA = 421614,\n  POLYGON = 137,\n  POLYGON_MUMBAI = 80001,\n  CELO = 42220,\n  CELO_ALFAJORES = 44787,\n  GNOSIS = 100,\n  MOONBEAM = 1284,\n  BNB = 56,\n  AVALANCHE = 43114,\n  BASE_GOERLI = 84531,\n  BASE = 8453,\n  ZORA = 7777777,\n  ZORA_SEPOLIA = 999999999,\n  ROOTSTOCK = 30,\n  BLAST = 81457\n}\n\nexport const SUPPORTED_CHAINS = [\n  ChainId.MAINNET,\n  ChainId.OPTIMISM,\n  ChainId.OPTIMISM_GOERLI,\n  ChainId.OPTIMISM_SEPOLIA,\n  ChainId.ARBITRUM_ONE,\n  ChainId.ARBITRUM_GOERLI,\n  ChainId.ARBITRUM_SEPOLIA,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.GOERLI,\n  ChainId.SEPOLIA,\n  ChainId.CELO_ALFAJORES,\n  ChainId.CELO,\n  ChainId.BNB,\n  ChainId.AVALANCHE,\n  ChainId.BASE,\n  ChainId.BASE_GOERLI,\n  ChainId.ZORA,\n  ChainId.ZORA_SEPOLIA,\n  ChainId.ROOTSTOCK,\n  ChainId.BLAST\n] as const\nexport type SupportedChainsType = typeof SUPPORTED_CHAINS[number]\n\nexport enum NativeCurrencyName {\n  // Strings match input for CLI\n  ETHER = 'ETH',\n  MATIC = 'MATIC',\n  CELO = 'CELO',\n  GNOSIS = 'XDAI',\n  MOONBEAM = 'GLMR',\n  BNB = 'BNB',\n  AVAX = 'AVAX',\n  ROOTSTOCK = 'RBTC'\n}\n","import { ChainId, SUPPORTED_CHAINS, SupportedChainsType } from './chains'\n\ntype AddressMap = { [chainId: number]: string }\n\ntype ChainAddresses = {\n  v3CoreFactoryAddress: string\n  multicallAddress: string\n  quoterAddress: string\n  v3MigratorAddress?: string\n  nonfungiblePositionManagerAddress?: string\n  tickLensAddress?: string\n  swapRouter02Address?: string\n  v1MixedRouteQuoterAddress?: string\n}\n\nconst DEFAULT_NETWORKS = [ChainId.MAINNET, ChainId.GOERLI, ChainId.SEPOLIA]\n\nfunction constructSameAddressMap(address: string, additionalNetworks: ChainId[] = []): AddressMap {\n  return DEFAULT_NETWORKS.concat(additionalNetworks).reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = address\n    return memo\n  }, {})\n}\n\nexport const UNI_ADDRESSES: AddressMap = constructSameAddressMap('0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984', [\n  ChainId.OPTIMISM,\n  ChainId.ARBITRUM_ONE,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.SEPOLIA\n])\n\nexport const UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS = '0x8B799381ac40b838BBA4131ffB26197C432AFe78'\n\n/**\n * @deprecated use V2_FACTORY_ADDRESSES instead\n */\nexport const V2_FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\nexport const V2_FACTORY_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n  [ChainId.GOERLI]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n  [ChainId.SEPOLIA]: '0xB7f907f7A9eBC822a80BD25E224be42Ce0A698A0',\n  [ChainId.OPTIMISM]: '0x0c3c1c532F1e39EdF36BE9Fe0bE1410313E074Bf',\n  [ChainId.ARBITRUM_ONE]: '0xf1D7CC64Fb4452F05c498126312eBE29f30Fbcf9',\n  [ChainId.AVALANCHE]: '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C',\n  [ChainId.BASE]: '0x8909dc15e40173ff4699343b6eb8132c65e18ec6',\n  [ChainId.BNB]: '0x8909Dc15e40173Ff4699343b6eB8132c65e18eC6',\n  [ChainId.POLYGON]: '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C',\n  [ChainId.CELO]: '0x79a530c8e2fA8748B7B40dd3629C0520c2cCf03f',\n  [ChainId.BLAST]: '0x5C346464d33F90bABaf70dB6388507CC889C1070'\n}\n/**\n * @deprecated use V2_ROUTER_ADDRESSES instead\n */\nexport const V2_ROUTER_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D'\nexport const V2_ROUTER_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\n  [ChainId.GOERLI]: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\n  [ChainId.ARBITRUM_ONE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.OPTIMISM]: '0x4a7b5da61326a6379179b40d00f57e5bbdc962c2',\n  [ChainId.BASE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.AVALANCHE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.BNB]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.POLYGON]: '0xedf6066a2b290c185783862c7f4776a2c8077ad1',\n  [ChainId.BLAST]: '0xBB66Eb1c5e875933D44DAe661dbD80e5D9B03035'\n}\n\n// Networks that share most of the same addresses i.e. Mainnet, Goerli, Optimism, Arbitrum, Polygon\nconst DEFAULT_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x1F98431c8aD98523631AE4a59f267346ea31F984',\n  multicallAddress: '0x1F98415757620B543A52E61c46B32eB19261F984',\n  quoterAddress: '0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6',\n  v3MigratorAddress: '0xA5644E29708357803b5A882D272c41cC0dF92B34',\n  nonfungiblePositionManagerAddress: '0xC36442b4a4522E871399CD717aBDD847Ab11FE88'\n}\nconst MAINNET_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  v1MixedRouteQuoterAddress: '0x84E44095eeBfEC7793Cd7d5b57B7e401D7f1cA2E'\n}\nconst GOERLI_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  v1MixedRouteQuoterAddress: '0xBa60b6e6fF25488308789E6e0A65D838be34194e'\n}\n\nconst OPTIMISM_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\nconst ARBITRUM_ONE_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  multicallAddress: '0xadF885960B47eA2CD9B55E6DAc6B42b7Cb2806dB',\n  tickLensAddress: '0xbfd8137f7d1516D3ea5cA83523914859ec47F573'\n}\nconst POLYGON_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\n\n// celo v3 addresses\nconst CELO_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xAfE208a311B21f13EF87E33A90049fC17A7acDEc',\n  multicallAddress: '0x633987602DE5C4F337e3DbF265303A1080324204',\n  quoterAddress: '0x82825d0554fA07f7FC52Ab63c961F330fdEFa8E8',\n  v3MigratorAddress: '0x3cFd4d48EDfDCC53D3f173F596f621064614C582',\n  nonfungiblePositionManagerAddress: '0x3d79EdAaBC0EaB6F08ED885C05Fc0B014290D95A',\n  tickLensAddress: '0x5f115D9113F88e0a0Db1b5033D90D4a9690AcD3D'\n}\n\n// BNB v3 addresses\nconst BNB_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7',\n  multicallAddress: '0x963Df249eD09c358A4819E39d9Cd5736c3087184',\n  quoterAddress: '0x78D78E420Da98ad378D7799bE8f4AF69033EB077',\n  v3MigratorAddress: '0x32681814957e0C13117ddc0c2aba232b5c9e760f',\n  nonfungiblePositionManagerAddress: '0x7b8A01B39D58278b5DE7e48c8449c9f4F5170613',\n  tickLensAddress: '0xD9270014D396281579760619CCf4c3af0501A47C',\n  swapRouter02Address: '0xB971eF87ede563556b2ED4b1C0b0019111Dd85d2'\n}\n\n// optimism goerli addresses\nconst OPTIMISM_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xB656dA17129e7EB733A557f4EBc57B76CFbB5d10',\n  multicallAddress: '0x07F2D8a2a02251B62af965f22fC4744A5f96BCCd',\n  quoterAddress: '0x9569CbA925c8ca2248772A9A4976A516743A246F',\n  v3MigratorAddress: '0xf6c55fBe84B1C8c3283533c53F51bC32F5C7Aba8',\n  nonfungiblePositionManagerAddress: '0x39Ca85Af2F383190cBf7d7c41ED9202D27426EF6',\n  tickLensAddress: '0xe6140Bd164b63E8BfCfc40D5dF952f83e171758e'\n}\n\n// optimism sepolia addresses\nconst OPTIMISM_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x8CE191193D15ea94e11d327b4c7ad8bbE520f6aF',\n  multicallAddress: '0x80e4e06841bb76AA9735E0448cB8d003C0EF009a',\n  quoterAddress: '0x0FBEa6cf957d95ee9313490050F6A0DA68039404',\n  v3MigratorAddress: '0xE7EcbAAaA54D007A00dbb6c1d2f150066D69dA07',\n  nonfungiblePositionManagerAddress: '0xdA75cEf1C93078e8b736FCA5D5a30adb97C8957d',\n  tickLensAddress: '0xCb7f54747F58F8944973cea5b8f4ac2209BadDC5',\n  swapRouter02Address: '0x94cC0AaC535CCDB3C01d6787D6413C739ae12bc4'\n}\n\n// arbitrum goerli v3 addresses\nconst ARBITRUM_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x4893376342d5D7b3e31d4184c08b265e5aB2A3f6',\n  multicallAddress: '0x8260CB40247290317a4c062F3542622367F206Ee',\n  quoterAddress: '0x1dd92b83591781D0C6d98d07391eea4b9a6008FA',\n  v3MigratorAddress: '0xA815919D2584Ac3F76ea9CB62E6Fd40a43BCe0C3',\n  nonfungiblePositionManagerAddress: '0x622e4726a167799826d1E1D150b076A7725f5D81',\n  tickLensAddress: '0xb52429333da969a0C79a60930a4Bf0020E5D1DE8'\n}\n\n// arbitrum sepolia v3 addresses\nconst ARBITRUM_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x248AB79Bbb9bC29bB72f7Cd42F17e054Fc40188e',\n  multicallAddress: '0x2B718b475e385eD29F56775a66aAB1F5cC6B2A0A',\n  quoterAddress: '0x2779a0CC1c3e0E44D2542EC3e79e3864Ae93Ef0B',\n  v3MigratorAddress: '0x398f43ef2c67B941147157DA1c5a868E906E043D',\n  nonfungiblePositionManagerAddress: '0x6b2937Bde17889EDCf8fbD8dE31C3C2a70Bc4d65',\n  tickLensAddress: '0x0fd18587734e5C2dcE2dccDcC7DD1EC89ba557d9',\n  swapRouter02Address: '0x101F443B4d1b059569D643917553c771E1b9663E'\n}\n\n// sepolia v3 addresses\nconst SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x11BAa8360DD2f9de11EA93501C2022E1260DC02f',\n  multicallAddress: '0x65Dec5354c0Ae5bf432135097c2bC68FA09ee210',\n  quoterAddress: '0xdA7377bE8BA41acA5f24B8C92C99290614d2ABf8',\n  v3MigratorAddress: '0xDf3e6435Cce912384476F1926ED4caca16785d83',\n  nonfungiblePositionManagerAddress: '0x3A525D8737bb0b483AbCCF6b387F1E6764C46DF6',\n  tickLensAddress: '0x45533a7407f33191E9278bc577E53B107A53Da36',\n  swapRouter02Address: '0x1b8DB7D581376e87d76936432411BdF47f9E524D'\n}\n\n// Avalanche v3 addresses\nconst AVALANCHE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x740b1c1de25031C31FF4fC9A62f554A55cdC1baD',\n  multicallAddress: '0x0139141Cd4Ee88dF3Cdb65881D411bAE271Ef0C2',\n  quoterAddress: '0xbe0F5544EC67e9B3b2D979aaA43f18Fd87E6257F',\n  v3MigratorAddress: '0x44f5f1f5E452ea8d29C890E8F6e893fC0f1f0f97',\n  nonfungiblePositionManagerAddress: '0x655C406EBFa14EE2006250925e54ec43AD184f8B',\n  tickLensAddress: '0xEB9fFC8bf81b4fFd11fb6A63a6B0f098c6e21950',\n  swapRouter02Address: '0xbb00FF08d01D300023C629E8fFfFcb65A5a578cE'\n}\n\nconst BASE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x33128a8fC17869897dcE68Ed026d694621f6FDfD',\n  multicallAddress: '0x091e99cb1C49331a94dD62755D168E941AbD0693',\n  quoterAddress: '0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a',\n  v3MigratorAddress: '0x23cF10b1ee3AdfCA73B0eF17C07F7577e7ACd2d7',\n  nonfungiblePositionManagerAddress: '0x03a520b32C04BF3bEEf7BEb72E919cf822Ed34f1',\n  tickLensAddress: '0x0CdeE061c75D43c82520eD998C23ac2991c9ac6d',\n  swapRouter02Address: '0x2626664c2603336E57B271c5C0b26F421741e481'\n}\n\n// Base Goerli v3 addresses\nconst BASE_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x9323c1d6D800ed51Bd7C6B216cfBec678B7d0BC2',\n  multicallAddress: '0xB206027a9E0E13F05eBEFa5D2402Bab3eA716439',\n  quoterAddress: '0xedf539058e28E5937dAef3f69cEd0b25fbE66Ae9',\n  v3MigratorAddress: '0x3efe5d02a04b7351D671Db7008ec6eBA9AD9e3aE',\n  nonfungiblePositionManagerAddress: '0x3c61369ef0D1D2AFa70d8feC2F31C5D6Ce134F30',\n  tickLensAddress: '0x1acB873Ee909D0c98adB18e4474943249F931b92',\n  swapRouter02Address: '0x8357227D4eDc78991Db6FDB9bD6ADE250536dE1d'\n}\n\nconst ZORA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x7145F8aeef1f6510E92164038E1B6F8cB2c42Cbb',\n  multicallAddress: '0xA51c76bEE6746cB487a7e9312E43e2b8f4A37C15',\n  quoterAddress: '0x11867e1b3348F3ce4FcC170BC5af3d23E07E64Df',\n  v3MigratorAddress: '0x048352d8dCF13686982C799da63fA6426a9D0b60',\n  nonfungiblePositionManagerAddress: '0xbC91e8DfA3fF18De43853372A3d7dfe585137D78',\n  tickLensAddress: '0x209AAda09D74Ad3B8D0E92910Eaf85D2357e3044',\n  swapRouter02Address: '0x7De04c96BE5159c3b5CeffC82aa176dc81281557'\n}\n\nconst ZORA_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x4324A677D74764f46f33ED447964252441aA8Db6',\n  multicallAddress: '0xA1E7e3A69671C4494EC59Dbd442de930a93F911A',\n  quoterAddress: '0xC195976fEF0985886E37036E2DF62bF371E12Df0',\n  v3MigratorAddress: '0x65ef259b31bf1d977c37e9434658694267674897',\n  nonfungiblePositionManagerAddress: '0xB8458EaAe43292e3c1F7994EFd016bd653d23c20',\n  tickLensAddress: '0x23C0F71877a1Fc4e20A78018f9831365c85f3064'\n}\n\nconst ROOTSTOCK_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xaF37EC98A00FD63689CF3060BF3B6784E00caD82',\n  multicallAddress: '0x996a9858cDfa45Ad68E47c9A30a7201E29c6a386',\n  quoterAddress: '0xb51727c996C68E60F598A923a5006853cd2fEB31',\n  v3MigratorAddress: '0x16678977CA4ec3DAD5efc7b15780295FE5f56162',\n  nonfungiblePositionManagerAddress: '0x9d9386c042F194B460Ec424a1e57ACDE25f5C4b1',\n  tickLensAddress: '0x55B9dF5bF68ADe972191a91980459f48ecA16afC',\n  swapRouter02Address: '0x0B14ff67f0014046b4b99057Aec4509640b3947A'\n}\n\nconst BLAST_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x792edAdE80af5fC680d96a2eD80A44247D2Cf6Fd',\n  multicallAddress: '0xdC7f370de7631cE9e2c2e1DCDA6B3B5744Cf4705',\n  quoterAddress: '0x6Cdcd65e03c1CEc3730AeeCd45bc140D57A25C77',\n  v3MigratorAddress: '0x15CA7043CD84C5D21Ae76Ba0A1A967d42c40ecE0',\n  nonfungiblePositionManagerAddress: '0xB218e4f7cF0533d4696fDfC419A0023D33345F28',\n  tickLensAddress: '0x2E95185bCdD928a3e984B7e2D6560Ab1b17d7274',\n  swapRouter02Address: '0x549FEB8c9bd4c12Ad2AB27022dA12492aC452B66'\n}\n\nexport const CHAIN_TO_ADDRESSES_MAP: Record<SupportedChainsType, ChainAddresses> = {\n  [ChainId.MAINNET]: MAINNET_ADDRESSES,\n  [ChainId.OPTIMISM]: OPTIMISM_ADDRESSES,\n  [ChainId.ARBITRUM_ONE]: ARBITRUM_ONE_ADDRESSES,\n  [ChainId.POLYGON]: POLYGON_ADDRESSES,\n  [ChainId.POLYGON_MUMBAI]: POLYGON_ADDRESSES,\n  [ChainId.GOERLI]: GOERLI_ADDRESSES,\n  [ChainId.CELO]: CELO_ADDRESSES,\n  [ChainId.CELO_ALFAJORES]: CELO_ADDRESSES,\n  [ChainId.BNB]: BNB_ADDRESSES,\n  [ChainId.OPTIMISM_GOERLI]: OPTIMISM_GOERLI_ADDRESSES,\n  [ChainId.OPTIMISM_SEPOLIA]: OPTIMISM_SEPOLIA_ADDRESSES,\n  [ChainId.ARBITRUM_GOERLI]: ARBITRUM_GOERLI_ADDRESSES,\n  [ChainId.ARBITRUM_SEPOLIA]: ARBITRUM_SEPOLIA_ADDRESSES,\n  [ChainId.SEPOLIA]: SEPOLIA_ADDRESSES,\n  [ChainId.AVALANCHE]: AVALANCHE_ADDRESSES,\n  [ChainId.BASE]: BASE_ADDRESSES,\n  [ChainId.BASE_GOERLI]: BASE_GOERLI_ADDRESSES,\n  [ChainId.ZORA]: ZORA_ADDRESSES,\n  [ChainId.ZORA_SEPOLIA]: ZORA_SEPOLIA_ADDRESSES,\n  [ChainId.ROOTSTOCK]: ROOTSTOCK_ADDRESSES,\n  [ChainId.BLAST]: BLAST_ADDRESSES\n}\n\n/* V3 Contract Addresses */\nexport const V3_CORE_FACTORY_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].v3CoreFactoryAddress\n    return memo\n  }, {})\n}\n\nexport const V3_MIGRATOR_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const v3MigratorAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v3MigratorAddress\n    if (v3MigratorAddress) {\n      memo[chainId] = v3MigratorAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const MULTICALL_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].multicallAddress\n    return memo\n  }, {})\n}\n\n/**\n * The oldest V0 governance address\n */\nexport const GOVERNANCE_ALPHA_V0_ADDRESSES: AddressMap = constructSameAddressMap(\n  '0x5e4be8Bc9637f0EAA1A755019e06A68ce081D58F'\n)\n/**\n * The older V1 governance address\n */\nexport const GOVERNANCE_ALPHA_V1_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0xC4e172459f1E7939D522503B81AFAaC1014CE6F6'\n}\n/**\n * The latest governor bravo that is currently admin of timelock\n */\nexport const GOVERNANCE_BRAVO_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x408ED6354d4973f66138C91495F2f2FCbd8724C3'\n}\n\nexport const TIMELOCK_ADDRESSES: AddressMap = constructSameAddressMap('0x1a9C8182C09F50C8318d769245beA52c32BE35BC')\n\nexport const MERKLE_DISTRIBUTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x090D4613473dEE047c3f2706764f49E0821D256e'\n}\n\nexport const ARGENT_WALLET_DETECTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xeca4B0bDBf7c55E9b7925919d03CbF8Dc82537E8'\n}\n\nexport const QUOTER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].quoterAddress\n    return memo\n  }, {})\n}\n\nexport const NONFUNGIBLE_POSITION_MANAGER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const nonfungiblePositionManagerAddress = CHAIN_TO_ADDRESSES_MAP[chainId].nonfungiblePositionManagerAddress\n    if (nonfungiblePositionManagerAddress) {\n      memo[chainId] = nonfungiblePositionManagerAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const ENS_REGISTRAR_ADDRESSES: AddressMap = {\n  ...constructSameAddressMap('0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e')\n}\n\nexport const SOCKS_CONTROLLER_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x65770b5283117639760beA3F867b69b3697a91dd'\n}\n\nexport const TICK_LENS_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const tickLensAddress = CHAIN_TO_ADDRESSES_MAP[chainId].tickLensAddress\n    if (tickLensAddress) {\n      memo[chainId] = tickLensAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const MIXED_ROUTE_QUOTER_V1_ADDRESSES: AddressMap = SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n  const v1MixedRouteQuoterAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v1MixedRouteQuoterAddress\n  if (v1MixedRouteQuoterAddress) {\n    memo[chainId] = v1MixedRouteQuoterAddress\n  }\n  return memo\n}, {})\n\nexport const SWAP_ROUTER_02_ADDRESSES = (chainId: number) => {\n  if (SUPPORTED_CHAINS.includes(chainId)) {\n    const id = chainId as SupportedChainsType\n    return CHAIN_TO_ADDRESSES_MAP[id].swapRouter02Address ?? '0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45'\n  }\n  return ''\n}\n","import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | string | number\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { Currency } from '../currency'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\nimport _Big from 'big.js'\n\nimport toFormat from 'toformat'\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n}\n","import JSBI from 'jsbi'\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Currency } from '../currency'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [{ baseAmount: CurrencyAmount<TBase>; quoteAmount: CurrencyAmount<TQuote> }]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { Token } from './token'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class BaseCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import { BaseCurrency } from './baseCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends BaseCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","import { getAddress } from '@ethersproject/address'\n\n/**\n * Validates an address and returns the parsed (checksummed) version of that address\n * @param address the unchecksummed hex address\n */\nexport function validateAndParseAddress(address: string): string {\n  try {\n    return getAddress(address)\n  } catch (error) {\n    throw new Error(`${address} is not a valid address.`)\n  }\n}\n\n// Checks a string starts with 0x, is 42 characters long and contains only hex characters after 0x\nconst startsWith0xLen42HexRegex = /^0x[0-9a-fA-F]{40}$/\n\n/**\n * Checks if an address is valid by checking 0x prefix, length === 42 and hex encoding.\n * @param address the unchecksummed hex address\n */\nexport function checkValidAddress(address: string): string {\n  if (startsWith0xLen42HexRegex.test(address)) {\n    return address\n  }\n\n  throw new Error(`${address} is not a valid address.`)\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport invariant from 'tiny-invariant'\nimport { checkValidAddress, validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { BaseCurrency } from './baseCurrency'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string\n\n  /**\n   * Relevant for fee-on-transfer (FOT) token taxes,\n   * Not every ERC20 token is FOT token, so this field is optional\n   */\n  public readonly buyFeeBps?: BigNumber\n  public readonly sellFeeBps?: BigNumber\n\n  /**\n   *\n   * @param chainId {@link BaseCurrency#chainId}\n   * @param address The contract address on the chain on which this token lives\n   * @param decimals {@link BaseCurrency#decimals}\n   * @param symbol {@link BaseCurrency#symbol}\n   * @param name {@link BaseCurrency#name}\n   * @param bypassChecksum If true it only checks for length === 42, startsWith 0x and contains only hex characters\n   * @param buyFeeBps Buy fee tax for FOT tokens, in basis points\n   * @param sellFeeBps Sell fee tax for FOT tokens, in basis points\n   */\n  public constructor(\n    chainId: number,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string,\n    bypassChecksum?: boolean,\n    buyFeeBps?: BigNumber,\n    sellFeeBps?: BigNumber\n  ) {\n    super(chainId, decimals, symbol, name)\n    if (bypassChecksum) {\n      this.address = checkValidAddress(address)\n    } else {\n      this.address = validateAndParseAddress(address)\n    }\n    if (buyFeeBps) {\n      invariant(buyFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    if (sellFeeBps) {\n      invariant(sellFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    this.buyFeeBps = buyFeeBps\n    this.sellFeeBps = sellFeeBps\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address.toLowerCase() === other.address.toLowerCase()\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address.toLowerCase() !== other.address.toLowerCase(), 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n","import { Token } from './token'\n\n/**\n * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped\n */\nexport const WETH9: { [chainId: number]: Token } = {\n  [1]: new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'),\n  [3]: new Token(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  [4]: new Token(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  [5]: new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [42]: new Token(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\n\n  [10]: new Token(10, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  [69]: new Token(69, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  [11155420]: new Token(11155420, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n\n  [42161]: new Token(42161, '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', 18, 'WETH', 'Wrapped Ether'),\n  [421611]: new Token(421611, '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681', 18, 'WETH', 'Wrapped Ether'),\n  [421614]: new Token(421614, '0x980B62Da83eFf3D4576C647993b0c1D7faf17c73', 18, 'WETH', 'Wrapped Ether'),\n\n  [8453]: new Token(8453, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n\n  [56]: new Token(56, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB'),\n  [137]: new Token(137, '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270', 18, 'WMATIC', 'Wrapped MATIC'),\n  [43114]: new Token(43114, '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7', 18, 'WAVAX', 'Wrapped AVAX'),\n  [11155111]: new Token(11155111, '0xb16F35c0Ae2912430DAc15764477E179D9B9EbEa', 18, 'WETH', 'Wrapped Ether')\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { NativeCurrency } from './nativeCurrency'\nimport { Token } from './token'\nimport { WETH9 } from './weth9'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency, CurrencyAmount, Percent, Price } from '../entities'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n"],"names":["ChainId","SUPPORTED_CHAINS","MAINNET","OPTIMISM","OPTIMISM_GOERLI","OPTIMISM_SEPOLIA","ARBITRUM_ONE","ARBITRUM_GOERLI","ARBITRUM_SEPOLIA","POLYGON","POLYGON_MUMBAI","GOERLI","SEPOLIA","CELO_ALFAJORES","CELO","BNB","AVALANCHE","BASE","BASE_GOERLI","ZORA","ZORA_SEPOLIA","ROOTSTOCK","BLAST","NativeCurrencyName","DEFAULT_NETWORKS","constructSameAddressMap","address","additionalNetworks","concat","reduce","memo","chainId","UNI_ADDRESSES","UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS","V2_FACTORY_ADDRESS","V2_FACTORY_ADDRESSES","V2_ROUTER_ADDRESS","V2_ROUTER_ADDRESSES","DEFAULT_ADDRESSES","v3CoreFactoryAddress","multicallAddress","quoterAddress","v3MigratorAddress","nonfungiblePositionManagerAddress","MAINNET_ADDRESSES","v1MixedRouteQuoterAddress","GOERLI_ADDRESSES","OPTIMISM_ADDRESSES","ARBITRUM_ONE_ADDRESSES","tickLensAddress","POLYGON_ADDRESSES","CELO_ADDRESSES","BNB_ADDRESSES","swapRouter02Address","OPTIMISM_GOERLI_ADDRESSES","OPTIMISM_SEPOLIA_ADDRESSES","ARBITRUM_GOERLI_ADDRESSES","ARBITRUM_SEPOLIA_ADDRESSES","SEPOLIA_ADDRESSES","AVALANCHE_ADDRESSES","BASE_ADDRESSES","BASE_GOERLI_ADDRESSES","ZORA_ADDRESSES","ZORA_SEPOLIA_ADDRESSES","ROOTSTOCK_ADDRESSES","BLAST_ADDRESSES","CHAIN_TO_ADDRESSES_MAP","V3_CORE_FACTORY_ADDRESSES","V3_MIGRATOR_ADDRESSES","MULTICALL_ADDRESSES","GOVERNANCE_ALPHA_V0_ADDRESSES","GOVERNANCE_ALPHA_V1_ADDRESSES","GOVERNANCE_BRAVO_ADDRESSES","TIMELOCK_ADDRESSES","MERKLE_DISTRIBUTOR_ADDRESS","ARGENT_WALLET_DETECTOR_ADDRESS","QUOTER_ADDRESSES","NONFUNGIBLE_POSITION_MANAGER_ADDRESSES","ENS_REGISTRAR_ADDRESSES","SOCKS_CONTROLLER_ADDRESSES","TICK_LENS_ADDRESSES","MIXED_ROUTE_QUOTER_V1_ADDRESSES","SWAP_ROUTER_02_ADDRESSES","includes","id","TradeType","Rounding","MaxUint256","JSBI","BigInt","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","Error","invert","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","invariant","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","lessThanOrEqual","decimalScale","exponentiate","decimals","fromRawAmount","rawAmount","fromFractionalAmount","equals","added","subtracted","multiplied","divided","toExact","isToken","wrapped","ONE_HUNDRED","toPercent","fraction","Percent","Price","baseCurrency","quoteCurrency","args","length","result","quoteAmount","baseAmount","scalar","quote","currencyAmount","adjustedForDecimals","BaseCurrency","symbol","name","isSafeInteger","NativeCurrency","validateAndParseAddress","getAddress","error","startsWith0xLen42HexRegex","checkValidAddress","test","Token","bypassChecksum","buyFeeBps","sellFeeBps","gte","BigNumber","from","toLowerCase","sortsBefore","WETH9","Ether","onChain","_etherCache","isNative","weth9","computePriceImpact","midPrice","inputAmount","outputAmount","quotedOutputAmount","priceImpact","sortedInsert","items","maxSize","comparator","push","isFull","lo","hi","mid","splice","pop","MAX_SAFE_INTEGER","ZERO","ONE","TWO","sqrt","value","greaterThanOrEqual","Math","floor","toNumber","z","x"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@uniswap/sdk-core/dist/sdk-core.cjs.production.min.js b/node_modules/@uniswap/sdk-core/dist/sdk-core.cjs.production.min.js
index da740f3..b96e88c 100644
--- a/node_modules/@uniswap/sdk-core/dist/sdk-core.cjs.production.min.js
+++ b/node_modules/@uniswap/sdk-core/dist/sdk-core.cjs.production.min.js
@@ -1,2 +1,2 @@
-"use strict";function e(e){return e&&"object"==typeof e&&"default"in e?e.default:e}Object.defineProperty(exports,"__esModule",{value:!0});var r,t=e(require("jsbi")),n=e(require("tiny-invariant")),d=e(require("decimal.js-light")),a=e(require("big.js")),o=e(require("toformat")),i=require("@ethersproject/bignumber"),s=require("@ethersproject/address");function c(e,r){for(var t=0;t<r.length;t++){var n=r[t];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function A(e,r,t){return r&&c(e.prototype,r),t&&c(e,t),e}function u(){return(u=Object.assign||function(e){for(var r=1;r<arguments.length;r++){var t=arguments[r];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e}).apply(this,arguments)}function f(e,r){e.prototype=Object.create(r.prototype),e.prototype.constructor=e,e.__proto__=r}(r=exports.ChainId||(exports.ChainId={}))[r.MAINNET=1]="MAINNET",r[r.GOERLI=5]="GOERLI",r[r.SEPOLIA=11155111]="SEPOLIA",r[r.OPTIMISM=10]="OPTIMISM",r[r.OPTIMISM_GOERLI=420]="OPTIMISM_GOERLI",r[r.OPTIMISM_SEPOLIA=11155420]="OPTIMISM_SEPOLIA",r[r.ARBITRUM_ONE=42161]="ARBITRUM_ONE",r[r.ARBITRUM_GOERLI=421613]="ARBITRUM_GOERLI",r[r.ARBITRUM_SEPOLIA=421614]="ARBITRUM_SEPOLIA",r[r.POLYGON=137]="POLYGON",r[r.POLYGON_MUMBAI=80001]="POLYGON_MUMBAI",r[r.CELO=42220]="CELO",r[r.CELO_ALFAJORES=44787]="CELO_ALFAJORES",r[r.GNOSIS=100]="GNOSIS",r[r.MOONBEAM=1284]="MOONBEAM",r[r.BNB=56]="BNB",r[r.AVALANCHE=43114]="AVALANCHE",r[r.BASE_GOERLI=84531]="BASE_GOERLI",r[r.BASE=8453]="BASE",r[r.ZORA=7777777]="ZORA",r[r.ZORA_SEPOLIA=999999999]="ZORA_SEPOLIA",r[r.ROOTSTOCK=30]="ROOTSTOCK",r[r.BLAST=81457]="BLAST";var E,C,x,p,b,D,l,B,h,I=[exports.ChainId.MAINNET,exports.ChainId.OPTIMISM,exports.ChainId.OPTIMISM_GOERLI,exports.ChainId.OPTIMISM_SEPOLIA,exports.ChainId.ARBITRUM_ONE,exports.ChainId.ARBITRUM_GOERLI,exports.ChainId.ARBITRUM_SEPOLIA,exports.ChainId.POLYGON,exports.ChainId.POLYGON_MUMBAI,exports.ChainId.GOERLI,exports.ChainId.SEPOLIA,exports.ChainId.CELO_ALFAJORES,exports.ChainId.CELO,exports.ChainId.BNB,exports.ChainId.AVALANCHE,exports.ChainId.BASE,exports.ChainId.BASE_GOERLI,exports.ChainId.ZORA,exports.ChainId.ZORA_SEPOLIA,exports.ChainId.ROOTSTOCK,exports.ChainId.BLAST];(E=exports.NativeCurrencyName||(exports.NativeCurrencyName={})).ETHER="ETH",E.MATIC="MATIC",E.CELO="CELO",E.GNOSIS="XDAI",E.MOONBEAM="GLMR",E.BNB="BNB",E.AVAX="AVAX",E.ROOTSTOCK="RBTC";var F=[exports.ChainId.MAINNET,exports.ChainId.GOERLI,exports.ChainId.SEPOLIA];function O(e,r){return void 0===r&&(r=[]),F.concat(r).reduce((function(r,t){return r[t]=e,r}),{})}var m,R,S=O("0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984",[exports.ChainId.OPTIMISM,exports.ChainId.ARBITRUM_ONE,exports.ChainId.POLYGON,exports.ChainId.POLYGON_MUMBAI,exports.ChainId.SEPOLIA]),_=((C={})[exports.ChainId.MAINNET]="0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f",C[exports.ChainId.GOERLI]="0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f",C[exports.ChainId.SEPOLIA]="0xB7f907f7A9eBC822a80BD25E224be42Ce0A698A0",C[exports.ChainId.OPTIMISM]="0x0c3c1c532F1e39EdF36BE9Fe0bE1410313E074Bf",C[exports.ChainId.ARBITRUM_ONE]="0xf1D7CC64Fb4452F05c498126312eBE29f30Fbcf9",C[exports.ChainId.AVALANCHE]="0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C",C[exports.ChainId.BASE]="0x8909dc15e40173ff4699343b6eb8132c65e18ec6",C[exports.ChainId.BNB]="0x8909Dc15e40173Ff4699343b6eB8132c65e18eC6",C[exports.ChainId.POLYGON]="0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C",C[exports.ChainId.CELO]="0x79a530c8e2fA8748B7B40dd3629C0520c2cCf03f",C[exports.ChainId.BLAST]="0x5C346464d33F90bABaf70dB6388507CC889C1070",C),T=((x={})[exports.ChainId.MAINNET]="0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",x[exports.ChainId.GOERLI]="0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",x[exports.ChainId.ARBITRUM_ONE]="0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24",x[exports.ChainId.OPTIMISM]="0x4a7b5da61326a6379179b40d00f57e5bbdc962c2",x[exports.ChainId.BASE]="0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24",x[exports.ChainId.AVALANCHE]="0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24",x[exports.ChainId.BNB]="0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24",x[exports.ChainId.POLYGON]="0xedf6066a2b290c185783862c7f4776a2c8077ad1",x[exports.ChainId.BLAST]="0xBB66Eb1c5e875933D44DAe661dbD80e5D9B03035",x),y={v3CoreFactoryAddress:"0x1F98431c8aD98523631AE4a59f267346ea31F984",multicallAddress:"0x1F98415757620B543A52E61c46B32eB19261F984",quoterAddress:"0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6",v3MigratorAddress:"0xA5644E29708357803b5A882D272c41cC0dF92B34",nonfungiblePositionManagerAddress:"0xC36442b4a4522E871399CD717aBDD847Ab11FE88"},v=u({},y,{v1MixedRouteQuoterAddress:"0x84E44095eeBfEC7793Cd7d5b57B7e401D7f1cA2E"}),N=u({},y,{v1MixedRouteQuoterAddress:"0xBa60b6e6fF25488308789E6e0A65D838be34194e"}),g=y,M=u({},y,{multicallAddress:"0xadF885960B47eA2CD9B55E6DAc6B42b7Cb2806dB",tickLensAddress:"0xbfd8137f7d1516D3ea5cA83523914859ec47F573"}),L=y,P={v3CoreFactoryAddress:"0xAfE208a311B21f13EF87E33A90049fC17A7acDEc",multicallAddress:"0x633987602DE5C4F337e3DbF265303A1080324204",quoterAddress:"0x82825d0554fA07f7FC52Ab63c961F330fdEFa8E8",v3MigratorAddress:"0x3cFd4d48EDfDCC53D3f173F596f621064614C582",nonfungiblePositionManagerAddress:"0x3d79EdAaBC0EaB6F08ED885C05Fc0B014290D95A",tickLensAddress:"0x5f115D9113F88e0a0Db1b5033D90D4a9690AcD3D"},U=((p={})[exports.ChainId.MAINNET]=v,p[exports.ChainId.OPTIMISM]=g,p[exports.ChainId.ARBITRUM_ONE]=M,p[exports.ChainId.POLYGON]=L,p[exports.ChainId.POLYGON_MUMBAI]=L,p[exports.ChainId.GOERLI]=N,p[exports.ChainId.CELO]=P,p[exports.ChainId.CELO_ALFAJORES]=P,p[exports.ChainId.BNB]={v3CoreFactoryAddress:"0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7",multicallAddress:"0x963Df249eD09c358A4819E39d9Cd5736c3087184",quoterAddress:"0x78D78E420Da98ad378D7799bE8f4AF69033EB077",v3MigratorAddress:"0x32681814957e0C13117ddc0c2aba232b5c9e760f",nonfungiblePositionManagerAddress:"0x7b8A01B39D58278b5DE7e48c8449c9f4F5170613",tickLensAddress:"0xD9270014D396281579760619CCf4c3af0501A47C",swapRouter02Address:"0xB971eF87ede563556b2ED4b1C0b0019111Dd85d2"},p[exports.ChainId.OPTIMISM_GOERLI]={v3CoreFactoryAddress:"0xB656dA17129e7EB733A557f4EBc57B76CFbB5d10",multicallAddress:"0x07F2D8a2a02251B62af965f22fC4744A5f96BCCd",quoterAddress:"0x9569CbA925c8ca2248772A9A4976A516743A246F",v3MigratorAddress:"0xf6c55fBe84B1C8c3283533c53F51bC32F5C7Aba8",nonfungiblePositionManagerAddress:"0x39Ca85Af2F383190cBf7d7c41ED9202D27426EF6",tickLensAddress:"0xe6140Bd164b63E8BfCfc40D5dF952f83e171758e"},p[exports.ChainId.OPTIMISM_SEPOLIA]={v3CoreFactoryAddress:"0x8CE191193D15ea94e11d327b4c7ad8bbE520f6aF",multicallAddress:"0x80e4e06841bb76AA9735E0448cB8d003C0EF009a",quoterAddress:"0x0FBEa6cf957d95ee9313490050F6A0DA68039404",v3MigratorAddress:"0xE7EcbAAaA54D007A00dbb6c1d2f150066D69dA07",nonfungiblePositionManagerAddress:"0xdA75cEf1C93078e8b736FCA5D5a30adb97C8957d",tickLensAddress:"0xCb7f54747F58F8944973cea5b8f4ac2209BadDC5",swapRouter02Address:"0x94cC0AaC535CCDB3C01d6787D6413C739ae12bc4"},p[exports.ChainId.ARBITRUM_GOERLI]={v3CoreFactoryAddress:"0x4893376342d5D7b3e31d4184c08b265e5aB2A3f6",multicallAddress:"0x8260CB40247290317a4c062F3542622367F206Ee",quoterAddress:"0x1dd92b83591781D0C6d98d07391eea4b9a6008FA",v3MigratorAddress:"0xA815919D2584Ac3F76ea9CB62E6Fd40a43BCe0C3",nonfungiblePositionManagerAddress:"0x622e4726a167799826d1E1D150b076A7725f5D81",tickLensAddress:"0xb52429333da969a0C79a60930a4Bf0020E5D1DE8"},p[exports.ChainId.ARBITRUM_SEPOLIA]={v3CoreFactoryAddress:"0x248AB79Bbb9bC29bB72f7Cd42F17e054Fc40188e",multicallAddress:"0x2B718b475e385eD29F56775a66aAB1F5cC6B2A0A",quoterAddress:"0x2779a0CC1c3e0E44D2542EC3e79e3864Ae93Ef0B",v3MigratorAddress:"0x398f43ef2c67B941147157DA1c5a868E906E043D",nonfungiblePositionManagerAddress:"0x6b2937Bde17889EDCf8fbD8dE31C3C2a70Bc4d65",tickLensAddress:"0x0fd18587734e5C2dcE2dccDcC7DD1EC89ba557d9",swapRouter02Address:"0x101F443B4d1b059569D643917553c771E1b9663E"},p[exports.ChainId.SEPOLIA]={v3CoreFactoryAddress:"0x0227628f3F023bb0B980b67D528571c95c6DaC1c",multicallAddress:"0xD7F33bCdb21b359c8ee6F0251d30E94832baAd07",quoterAddress:"0xEd1f6473345F45b75F8179591dd5bA1888cf2FB3",v3MigratorAddress:"0x729004182cF005CEC8Bd85df140094b6aCbe8b15",nonfungiblePositionManagerAddress:"0x1238536071E1c677A632429e3655c799b22cDA52",tickLensAddress:"0xd7f33bcdb21b359c8ee6f0251d30e94832baad07",swapRouter02Address:"0x3bFA4769FB09eefC5a80d6E87c3B9C650f7Ae48E"},p[exports.ChainId.AVALANCHE]={v3CoreFactoryAddress:"0x740b1c1de25031C31FF4fC9A62f554A55cdC1baD",multicallAddress:"0x0139141Cd4Ee88dF3Cdb65881D411bAE271Ef0C2",quoterAddress:"0xbe0F5544EC67e9B3b2D979aaA43f18Fd87E6257F",v3MigratorAddress:"0x44f5f1f5E452ea8d29C890E8F6e893fC0f1f0f97",nonfungiblePositionManagerAddress:"0x655C406EBFa14EE2006250925e54ec43AD184f8B",tickLensAddress:"0xEB9fFC8bf81b4fFd11fb6A63a6B0f098c6e21950",swapRouter02Address:"0xbb00FF08d01D300023C629E8fFfFcb65A5a578cE"},p[exports.ChainId.BASE]={v3CoreFactoryAddress:"0x33128a8fC17869897dcE68Ed026d694621f6FDfD",multicallAddress:"0x091e99cb1C49331a94dD62755D168E941AbD0693",quoterAddress:"0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a",v3MigratorAddress:"0x23cF10b1ee3AdfCA73B0eF17C07F7577e7ACd2d7",nonfungiblePositionManagerAddress:"0x03a520b32C04BF3bEEf7BEb72E919cf822Ed34f1",tickLensAddress:"0x0CdeE061c75D43c82520eD998C23ac2991c9ac6d",swapRouter02Address:"0x2626664c2603336E57B271c5C0b26F421741e481"},p[exports.ChainId.BASE_GOERLI]={v3CoreFactoryAddress:"0x9323c1d6D800ed51Bd7C6B216cfBec678B7d0BC2",multicallAddress:"0xB206027a9E0E13F05eBEFa5D2402Bab3eA716439",quoterAddress:"0xedf539058e28E5937dAef3f69cEd0b25fbE66Ae9",v3MigratorAddress:"0x3efe5d02a04b7351D671Db7008ec6eBA9AD9e3aE",nonfungiblePositionManagerAddress:"0x3c61369ef0D1D2AFa70d8feC2F31C5D6Ce134F30",tickLensAddress:"0x1acB873Ee909D0c98adB18e4474943249F931b92",swapRouter02Address:"0x8357227D4eDc78991Db6FDB9bD6ADE250536dE1d"},p[exports.ChainId.ZORA]={v3CoreFactoryAddress:"0x7145F8aeef1f6510E92164038E1B6F8cB2c42Cbb",multicallAddress:"0xA51c76bEE6746cB487a7e9312E43e2b8f4A37C15",quoterAddress:"0x11867e1b3348F3ce4FcC170BC5af3d23E07E64Df",v3MigratorAddress:"0x048352d8dCF13686982C799da63fA6426a9D0b60",nonfungiblePositionManagerAddress:"0xbC91e8DfA3fF18De43853372A3d7dfe585137D78",tickLensAddress:"0x209AAda09D74Ad3B8D0E92910Eaf85D2357e3044",swapRouter02Address:"0x7De04c96BE5159c3b5CeffC82aa176dc81281557"},p[exports.ChainId.ZORA_SEPOLIA]={v3CoreFactoryAddress:"0x4324A677D74764f46f33ED447964252441aA8Db6",multicallAddress:"0xA1E7e3A69671C4494EC59Dbd442de930a93F911A",quoterAddress:"0xC195976fEF0985886E37036E2DF62bF371E12Df0",v3MigratorAddress:"0x65ef259b31bf1d977c37e9434658694267674897",nonfungiblePositionManagerAddress:"0xB8458EaAe43292e3c1F7994EFd016bd653d23c20",tickLensAddress:"0x23C0F71877a1Fc4e20A78018f9831365c85f3064"},p[exports.ChainId.ROOTSTOCK]={v3CoreFactoryAddress:"0xaF37EC98A00FD63689CF3060BF3B6784E00caD82",multicallAddress:"0x996a9858cDfa45Ad68E47c9A30a7201E29c6a386",quoterAddress:"0xb51727c996C68E60F598A923a5006853cd2fEB31",v3MigratorAddress:"0x16678977CA4ec3DAD5efc7b15780295FE5f56162",nonfungiblePositionManagerAddress:"0x9d9386c042F194B460Ec424a1e57ACDE25f5C4b1",tickLensAddress:"0x55B9dF5bF68ADe972191a91980459f48ecA16afC",swapRouter02Address:"0x0B14ff67f0014046b4b99057Aec4509640b3947A"},p[exports.ChainId.BLAST]={v3CoreFactoryAddress:"0x792edAdE80af5fC680d96a2eD80A44247D2Cf6Fd",multicallAddress:"0xdC7f370de7631cE9e2c2e1DCDA6B3B5744Cf4705",quoterAddress:"0x6Cdcd65e03c1CEc3730AeeCd45bc140D57A25C77",v3MigratorAddress:"0x15CA7043CD84C5D21Ae76Ba0A1A967d42c40ecE0",nonfungiblePositionManagerAddress:"0xB218e4f7cF0533d4696fDfC419A0023D33345F28",tickLensAddress:"0x2E95185bCdD928a3e984B7e2D6560Ab1b17d7274",swapRouter02Address:"0x549FEB8c9bd4c12Ad2AB27022dA12492aC452B66"},p),w=u({},I.reduce((function(e,r){return e[r]=U[r].v3CoreFactoryAddress,e}),{})),q=u({},I.reduce((function(e,r){var t=U[r].v3MigratorAddress;return t&&(e[r]=t),e}),{})),G=u({},I.reduce((function(e,r){return e[r]=U[r].multicallAddress,e}),{})),W=O("0x5e4be8Bc9637f0EAA1A755019e06A68ce081D58F"),H=((b={})[exports.ChainId.MAINNET]="0xC4e172459f1E7939D522503B81AFAaC1014CE6F6",b),k=((D={})[exports.ChainId.MAINNET]="0x408ED6354d4973f66138C91495F2f2FCbd8724C3",D),V=O("0x1a9C8182C09F50C8318d769245beA52c32BE35BC"),Y=((l={})[exports.ChainId.MAINNET]="0x090D4613473dEE047c3f2706764f49E0821D256e",l),j=((B={})[exports.ChainId.MAINNET]="0xeca4B0bDBf7c55E9b7925919d03CbF8Dc82537E8",B),X=u({},I.reduce((function(e,r){return e[r]=U[r].quoterAddress,e}),{})),K=u({},I.reduce((function(e,r){var t=U[r].nonfungiblePositionManagerAddress;return t&&(e[r]=t),e}),{})),Z=u({},O("0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e")),Q=((h={})[exports.ChainId.MAINNET]="0x65770b5283117639760beA3F867b69b3697a91dd",h),J=u({},I.reduce((function(e,r){var t=U[r].tickLensAddress;return t&&(e[r]=t),e}),{})),$=I.reduce((function(e,r){var t=U[r].v1MixedRouteQuoterAddress;return t&&(e[r]=t),e}),{});(m=exports.TradeType||(exports.TradeType={}))[m.EXACT_INPUT=0]="EXACT_INPUT",m[m.EXACT_OUTPUT=1]="EXACT_OUTPUT",(R=exports.Rounding||(exports.Rounding={}))[R.ROUND_DOWN=0]="ROUND_DOWN",R[R.ROUND_HALF_UP=1]="ROUND_HALF_UP",R[R.ROUND_UP=2]="ROUND_UP";var z,ee,re=t.BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"),te=o(d),ne=o(a),de=((z={})[exports.Rounding.ROUND_DOWN]=te.ROUND_DOWN,z[exports.Rounding.ROUND_HALF_UP]=te.ROUND_HALF_UP,z[exports.Rounding.ROUND_UP]=te.ROUND_UP,z),ae=((ee={})[exports.Rounding.ROUND_DOWN]=0,ee[exports.Rounding.ROUND_HALF_UP]=1,ee[exports.Rounding.ROUND_UP]=3,ee),oe=function(){function e(e,r){void 0===r&&(r=t.BigInt(1)),this.numerator=t.BigInt(e),this.denominator=t.BigInt(r)}e.tryParseFraction=function(r){if(r instanceof t||"number"==typeof r||"string"==typeof r)return new e(r);if("numerator"in r&&"denominator"in r)return r;throw new Error("Could not parse fraction")};var r=e.prototype;return r.invert=function(){return new e(this.denominator,this.numerator)},r.add=function(r){var n=e.tryParseFraction(r);return t.equal(this.denominator,n.denominator)?new e(t.add(this.numerator,n.numerator),this.denominator):new e(t.add(t.multiply(this.numerator,n.denominator),t.multiply(n.numerator,this.denominator)),t.multiply(this.denominator,n.denominator))},r.subtract=function(r){var n=e.tryParseFraction(r);return t.equal(this.denominator,n.denominator)?new e(t.subtract(this.numerator,n.numerator),this.denominator):new e(t.subtract(t.multiply(this.numerator,n.denominator),t.multiply(n.numerator,this.denominator)),t.multiply(this.denominator,n.denominator))},r.lessThan=function(r){var n=e.tryParseFraction(r);return t.lessThan(t.multiply(this.numerator,n.denominator),t.multiply(n.numerator,this.denominator))},r.equalTo=function(r){var n=e.tryParseFraction(r);return t.equal(t.multiply(this.numerator,n.denominator),t.multiply(n.numerator,this.denominator))},r.greaterThan=function(r){var n=e.tryParseFraction(r);return t.greaterThan(t.multiply(this.numerator,n.denominator),t.multiply(n.numerator,this.denominator))},r.multiply=function(r){var n=e.tryParseFraction(r);return new e(t.multiply(this.numerator,n.numerator),t.multiply(this.denominator,n.denominator))},r.divide=function(r){var n=e.tryParseFraction(r);return new e(t.multiply(this.numerator,n.denominator),t.multiply(this.denominator,n.numerator))},r.toSignificant=function(e,r,t){void 0===r&&(r={groupSeparator:""}),void 0===t&&(t=exports.Rounding.ROUND_HALF_UP),Number.isInteger(e)||n(!1),e>0||n(!1),te.set({precision:e+1,rounding:de[t]});var d=new te(this.numerator.toString()).div(this.denominator.toString()).toSignificantDigits(e);return d.toFormat(d.decimalPlaces(),r)},r.toFixed=function(e,r,t){return void 0===r&&(r={groupSeparator:""}),void 0===t&&(t=exports.Rounding.ROUND_HALF_UP),Number.isInteger(e)||n(!1),e>=0||n(!1),ne.DP=e,ne.RM=ae[t],new ne(this.numerator.toString()).div(this.denominator.toString()).toFormat(e,r)},A(e,[{key:"quotient",get:function(){return t.divide(this.numerator,this.denominator)}},{key:"remainder",get:function(){return new e(t.remainder(this.numerator,this.denominator),this.denominator)}},{key:"asFraction",get:function(){return new e(this.numerator,this.denominator)}}]),e}(),ie=o(a),se=function(e){function r(r,d,a){var o;return o=e.call(this,d,a)||this,t.lessThanOrEqual(o.quotient,re)||n(!1),o.currency=r,o.decimalScale=t.exponentiate(t.BigInt(10),t.BigInt(r.decimals)),o}f(r,e),r.fromRawAmount=function(e,t){return new r(e,t)},r.fromFractionalAmount=function(e,t,n){return new r(e,t,n)};var d=r.prototype;return d.add=function(t){this.currency.equals(t.currency)||n(!1);var d=e.prototype.add.call(this,t);return r.fromFractionalAmount(this.currency,d.numerator,d.denominator)},d.subtract=function(t){this.currency.equals(t.currency)||n(!1);var d=e.prototype.subtract.call(this,t);return r.fromFractionalAmount(this.currency,d.numerator,d.denominator)},d.multiply=function(t){var n=e.prototype.multiply.call(this,t);return r.fromFractionalAmount(this.currency,n.numerator,n.denominator)},d.divide=function(t){var n=e.prototype.divide.call(this,t);return r.fromFractionalAmount(this.currency,n.numerator,n.denominator)},d.toSignificant=function(r,t,n){return void 0===r&&(r=6),void 0===n&&(n=exports.Rounding.ROUND_DOWN),e.prototype.divide.call(this,this.decimalScale).toSignificant(r,t,n)},d.toFixed=function(r,t,d){return void 0===r&&(r=this.currency.decimals),void 0===d&&(d=exports.Rounding.ROUND_DOWN),r<=this.currency.decimals||n(!1),e.prototype.divide.call(this,this.decimalScale).toFixed(r,t,d)},d.toExact=function(e){return void 0===e&&(e={groupSeparator:""}),ie.DP=this.currency.decimals,new ie(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(e)},A(r,[{key:"wrapped",get:function(){return this.currency.isToken?this:r.fromFractionalAmount(this.currency.wrapped,this.numerator,this.denominator)}}]),r}(oe),ce=new oe(t.BigInt(100));function Ae(e){return new ue(e.numerator,e.denominator)}var ue=function(e){function r(){var r;return(r=e.apply(this,arguments)||this).isPercent=!0,r}f(r,e);var t=r.prototype;return t.add=function(r){return Ae(e.prototype.add.call(this,r))},t.subtract=function(r){return Ae(e.prototype.subtract.call(this,r))},t.multiply=function(r){return Ae(e.prototype.multiply.call(this,r))},t.divide=function(r){return Ae(e.prototype.divide.call(this,r))},t.toSignificant=function(r,t,n){return void 0===r&&(r=5),e.prototype.multiply.call(this,ce).toSignificant(r,t,n)},t.toFixed=function(r,t,n){return void 0===r&&(r=2),e.prototype.multiply.call(this,ce).toFixed(r,t,n)},r}(oe),fe=function(e){function r(){for(var r,n,d,a,o,i=arguments.length,s=new Array(i),c=0;c<i;c++)s[c]=arguments[c];if(4===s.length)n=s[0],d=s[1],a=s[2],o=s[3];else{var A=s[0].quoteAmount.divide(s[0].baseAmount),u=[s[0].baseAmount.currency,s[0].quoteAmount.currency,A.denominator,A.numerator];n=u[0],d=u[1],a=u[2],o=u[3]}return(r=e.call(this,o,a)||this).baseCurrency=n,r.quoteCurrency=d,r.scalar=new oe(t.exponentiate(t.BigInt(10),t.BigInt(n.decimals)),t.exponentiate(t.BigInt(10),t.BigInt(d.decimals))),r}f(r,e);var d=r.prototype;return d.invert=function(){return new r(this.quoteCurrency,this.baseCurrency,this.numerator,this.denominator)},d.multiply=function(t){this.quoteCurrency.equals(t.baseCurrency)||n(!1);var d=e.prototype.multiply.call(this,t);return new r(this.baseCurrency,t.quoteCurrency,d.denominator,d.numerator)},d.quote=function(r){r.currency.equals(this.baseCurrency)||n(!1);var t=e.prototype.multiply.call(this,r);return se.fromFractionalAmount(this.quoteCurrency,t.numerator,t.denominator)},d.toSignificant=function(e,r,t){return void 0===e&&(e=6),this.adjustedForDecimals.toSignificant(e,r,t)},d.toFixed=function(e,r,t){return void 0===e&&(e=4),this.adjustedForDecimals.toFixed(e,r,t)},A(r,[{key:"adjustedForDecimals",get:function(){return e.prototype.multiply.call(this,this.scalar)}}]),r}(oe),Ee=function(e,r,t,d){Number.isSafeInteger(e)||n(!1),r>=0&&r<255&&Number.isInteger(r)||n(!1),this.chainId=e,this.decimals=r,this.symbol=t,this.name=d},Ce=function(e){function r(){var r;return(r=e.apply(this,arguments)||this).isNative=!0,r.isToken=!1,r}return f(r,e),r}(Ee);function xe(e){try{return s.getAddress(e)}catch(r){throw new Error(e+" is not a valid address.")}}var pe,be=/^0x[0-9a-fA-F]{40}$/,De=function(e){function r(r,t,d,a,o,s,c,A){var u;return(u=e.call(this,r,d,a,o)||this).isNative=!1,u.isToken=!0,u.address=s?function(e){if(be.test(e))return e;throw new Error(e+" is not a valid address.")}(t):xe(t),c&&(c.gte(i.BigNumber.from(0))||n(!1)),A&&(A.gte(i.BigNumber.from(0))||n(!1)),u.buyFeeBps=c,u.sellFeeBps=A,u}f(r,e);var t=r.prototype;return t.equals=function(e){return e.isToken&&this.chainId===e.chainId&&this.address.toLowerCase()===e.address.toLowerCase()},t.sortsBefore=function(e){return this.chainId!==e.chainId&&n(!1),this.address.toLowerCase()===e.address.toLowerCase()&&n(!1),this.address.toLowerCase()<e.address.toLowerCase()},A(r,[{key:"wrapped",get:function(){return this}}]),r}(Ee),le=((pe={})[1]=new De(1,"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",18,"WETH","Wrapped Ether"),pe[3]=new De(3,"0xc778417E063141139Fce010982780140Aa0cD5Ab",18,"WETH","Wrapped Ether"),pe[4]=new De(4,"0xc778417E063141139Fce010982780140Aa0cD5Ab",18,"WETH","Wrapped Ether"),pe[5]=new De(5,"0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6",18,"WETH","Wrapped Ether"),pe[42]=new De(42,"0xd0A1E359811322d97991E03f863a0C30C2cF029C",18,"WETH","Wrapped Ether"),pe[10]=new De(10,"0x4200000000000000000000000000000000000006",18,"WETH","Wrapped Ether"),pe[69]=new De(69,"0x4200000000000000000000000000000000000006",18,"WETH","Wrapped Ether"),pe[11155420]=new De(11155420,"0x4200000000000000000000000000000000000006",18,"WETH","Wrapped Ether"),pe[42161]=new De(42161,"0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",18,"WETH","Wrapped Ether"),pe[421611]=new De(421611,"0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681",18,"WETH","Wrapped Ether"),pe[421614]=new De(421614,"0x980B62Da83eFf3D4576C647993b0c1D7faf17c73",18,"WETH","Wrapped Ether"),pe[8453]=new De(8453,"0x4200000000000000000000000000000000000006",18,"WETH","Wrapped Ether"),pe[56]=new De(56,"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c",18,"WBNB","Wrapped BNB"),pe[137]=new De(137,"0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270",18,"WMATIC","Wrapped MATIC"),pe[43114]=new De(43114,"0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",18,"WAVAX","Wrapped AVAX"),pe),Be=function(e){function r(r){return e.call(this,r,18,"ETH","Ether")||this}return f(r,e),r.onChain=function(e){var t;return null!=(t=this._etherCache[e])?t:this._etherCache[e]=new r(e)},r.prototype.equals=function(e){return e.isNative&&e.chainId===this.chainId},A(r,[{key:"wrapped",get:function(){var e=le[this.chainId];return e||n(!1),e}}]),r}(Ce);Be._etherCache={};var he=t.BigInt(Number.MAX_SAFE_INTEGER),Ie=t.BigInt(0),Fe=t.BigInt(1),Oe=t.BigInt(2);exports.ARGENT_WALLET_DETECTOR_ADDRESS=j,exports.CHAIN_TO_ADDRESSES_MAP=U,exports.CurrencyAmount=se,exports.ENS_REGISTRAR_ADDRESSES=Z,exports.Ether=Be,exports.Fraction=oe,exports.GOVERNANCE_ALPHA_V0_ADDRESSES=W,exports.GOVERNANCE_ALPHA_V1_ADDRESSES=H,exports.GOVERNANCE_BRAVO_ADDRESSES=k,exports.MERKLE_DISTRIBUTOR_ADDRESS=Y,exports.MIXED_ROUTE_QUOTER_V1_ADDRESSES=$,exports.MULTICALL_ADDRESSES=G,exports.MaxUint256=re,exports.NONFUNGIBLE_POSITION_MANAGER_ADDRESSES=K,exports.NativeCurrency=Ce,exports.Percent=ue,exports.Price=fe,exports.QUOTER_ADDRESSES=X,exports.SOCKS_CONTROLLER_ADDRESSES=Q,exports.SUPPORTED_CHAINS=I,exports.SWAP_ROUTER_02_ADDRESSES=function(e){var r;return I.includes(e)?null!=(r=U[e].swapRouter02Address)?r:"0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45":""},exports.TICK_LENS_ADDRESSES=J,exports.TIMELOCK_ADDRESSES=V,exports.Token=De,exports.UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS="0x8B799381ac40b838BBA4131ffB26197C432AFe78",exports.UNI_ADDRESSES=S,exports.V2_FACTORY_ADDRESS="0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f",exports.V2_FACTORY_ADDRESSES=_,exports.V2_ROUTER_ADDRESS="0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",exports.V2_ROUTER_ADDRESSES=T,exports.V3_CORE_FACTORY_ADDRESSES=w,exports.V3_MIGRATOR_ADDRESSES=q,exports.WETH9=le,exports.computePriceImpact=function(e,r,t){var n=e.quote(r),d=n.subtract(t).divide(n);return new ue(d.numerator,d.denominator)},exports.sortedInsert=function(e,r,t,d){if(t>0||n(!1),e.length<=t||n(!1),0===e.length)return e.push(r),null;var a=e.length===t;if(a&&d(e[e.length-1],r)<=0)return r;for(var o=0,i=e.length;o<i;){var s=o+i>>>1;d(e[s],r)<=0?o=s+1:i=s}return e.splice(o,0,r),a?e.pop():null},exports.sqrt=function(e){if(t.greaterThanOrEqual(e,Ie)||n(!1),t.lessThan(e,he))return t.BigInt(Math.floor(Math.sqrt(t.toNumber(e))));var r,d;for(r=e,d=t.add(t.divide(e,Oe),Fe);t.lessThan(d,r);)r=d,d=t.divide(t.add(t.divide(e,d),d),Oe);return r},exports.validateAndParseAddress=xe;
+"use strict";function e(e){return e&&"object"==typeof e&&"default"in e?e.default:e}Object.defineProperty(exports,"__esModule",{value:!0});var r,t=e(require("jsbi")),n=e(require("tiny-invariant")),d=e(require("decimal.js-light")),a=e(require("big.js")),o=e(require("toformat")),i=require("@ethersproject/bignumber"),s=require("@ethersproject/address");function c(e,r){for(var t=0;t<r.length;t++){var n=r[t];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function A(e,r,t){return r&&c(e.prototype,r),t&&c(e,t),e}function u(){return(u=Object.assign||function(e){for(var r=1;r<arguments.length;r++){var t=arguments[r];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e}).apply(this,arguments)}function f(e,r){e.prototype=Object.create(r.prototype),e.prototype.constructor=e,e.__proto__=r}(r=exports.ChainId||(exports.ChainId={}))[r.MAINNET=1]="MAINNET",r[r.GOERLI=5]="GOERLI",r[r.SEPOLIA=11155111]="SEPOLIA",r[r.OPTIMISM=10]="OPTIMISM",r[r.OPTIMISM_GOERLI=420]="OPTIMISM_GOERLI",r[r.OPTIMISM_SEPOLIA=11155420]="OPTIMISM_SEPOLIA",r[r.ARBITRUM_ONE=42161]="ARBITRUM_ONE",r[r.ARBITRUM_GOERLI=421613]="ARBITRUM_GOERLI",r[r.ARBITRUM_SEPOLIA=421614]="ARBITRUM_SEPOLIA",r[r.POLYGON=137]="POLYGON",r[r.POLYGON_MUMBAI=80001]="POLYGON_MUMBAI",r[r.CELO=42220]="CELO",r[r.CELO_ALFAJORES=44787]="CELO_ALFAJORES",r[r.GNOSIS=100]="GNOSIS",r[r.MOONBEAM=1284]="MOONBEAM",r[r.BNB=56]="BNB",r[r.AVALANCHE=43114]="AVALANCHE",r[r.BASE_GOERLI=84531]="BASE_GOERLI",r[r.BASE=8453]="BASE",r[r.ZORA=7777777]="ZORA",r[r.ZORA_SEPOLIA=999999999]="ZORA_SEPOLIA",r[r.ROOTSTOCK=30]="ROOTSTOCK",r[r.BLAST=81457]="BLAST";var E,C,x,p,D,b,l,B,h,I=[exports.ChainId.MAINNET,exports.ChainId.OPTIMISM,exports.ChainId.OPTIMISM_GOERLI,exports.ChainId.OPTIMISM_SEPOLIA,exports.ChainId.ARBITRUM_ONE,exports.ChainId.ARBITRUM_GOERLI,exports.ChainId.ARBITRUM_SEPOLIA,exports.ChainId.POLYGON,exports.ChainId.POLYGON_MUMBAI,exports.ChainId.GOERLI,exports.ChainId.SEPOLIA,exports.ChainId.CELO_ALFAJORES,exports.ChainId.CELO,exports.ChainId.BNB,exports.ChainId.AVALANCHE,exports.ChainId.BASE,exports.ChainId.BASE_GOERLI,exports.ChainId.ZORA,exports.ChainId.ZORA_SEPOLIA,exports.ChainId.ROOTSTOCK,exports.ChainId.BLAST];(E=exports.NativeCurrencyName||(exports.NativeCurrencyName={})).ETHER="ETH",E.MATIC="MATIC",E.CELO="CELO",E.GNOSIS="XDAI",E.MOONBEAM="GLMR",E.BNB="BNB",E.AVAX="AVAX",E.ROOTSTOCK="RBTC";var F=[exports.ChainId.MAINNET,exports.ChainId.GOERLI,exports.ChainId.SEPOLIA];function O(e,r){return void 0===r&&(r=[]),F.concat(r).reduce((function(r,t){return r[t]=e,r}),{})}var m,R,S=O("0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984",[exports.ChainId.OPTIMISM,exports.ChainId.ARBITRUM_ONE,exports.ChainId.POLYGON,exports.ChainId.POLYGON_MUMBAI,exports.ChainId.SEPOLIA]),_=((C={})[exports.ChainId.MAINNET]="0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f",C[exports.ChainId.GOERLI]="0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f",C[exports.ChainId.SEPOLIA]="0xB7f907f7A9eBC822a80BD25E224be42Ce0A698A0",C[exports.ChainId.OPTIMISM]="0x0c3c1c532F1e39EdF36BE9Fe0bE1410313E074Bf",C[exports.ChainId.ARBITRUM_ONE]="0xf1D7CC64Fb4452F05c498126312eBE29f30Fbcf9",C[exports.ChainId.AVALANCHE]="0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C",C[exports.ChainId.BASE]="0x8909dc15e40173ff4699343b6eb8132c65e18ec6",C[exports.ChainId.BNB]="0x8909Dc15e40173Ff4699343b6eB8132c65e18eC6",C[exports.ChainId.POLYGON]="0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C",C[exports.ChainId.CELO]="0x79a530c8e2fA8748B7B40dd3629C0520c2cCf03f",C[exports.ChainId.BLAST]="0x5C346464d33F90bABaf70dB6388507CC889C1070",C),T=((x={})[exports.ChainId.MAINNET]="0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",x[exports.ChainId.GOERLI]="0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",x[exports.ChainId.ARBITRUM_ONE]="0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24",x[exports.ChainId.OPTIMISM]="0x4a7b5da61326a6379179b40d00f57e5bbdc962c2",x[exports.ChainId.BASE]="0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24",x[exports.ChainId.AVALANCHE]="0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24",x[exports.ChainId.BNB]="0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24",x[exports.ChainId.POLYGON]="0xedf6066a2b290c185783862c7f4776a2c8077ad1",x[exports.ChainId.BLAST]="0xBB66Eb1c5e875933D44DAe661dbD80e5D9B03035",x),y={v3CoreFactoryAddress:"0x1F98431c8aD98523631AE4a59f267346ea31F984",multicallAddress:"0x1F98415757620B543A52E61c46B32eB19261F984",quoterAddress:"0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6",v3MigratorAddress:"0xA5644E29708357803b5A882D272c41cC0dF92B34",nonfungiblePositionManagerAddress:"0xC36442b4a4522E871399CD717aBDD847Ab11FE88"},v=u({},y,{v1MixedRouteQuoterAddress:"0x84E44095eeBfEC7793Cd7d5b57B7e401D7f1cA2E"}),N=u({},y,{v1MixedRouteQuoterAddress:"0xBa60b6e6fF25488308789E6e0A65D838be34194e"}),g=y,M=u({},y,{multicallAddress:"0xadF885960B47eA2CD9B55E6DAc6B42b7Cb2806dB",tickLensAddress:"0xbfd8137f7d1516D3ea5cA83523914859ec47F573"}),L=y,P={v3CoreFactoryAddress:"0xAfE208a311B21f13EF87E33A90049fC17A7acDEc",multicallAddress:"0x633987602DE5C4F337e3DbF265303A1080324204",quoterAddress:"0x82825d0554fA07f7FC52Ab63c961F330fdEFa8E8",v3MigratorAddress:"0x3cFd4d48EDfDCC53D3f173F596f621064614C582",nonfungiblePositionManagerAddress:"0x3d79EdAaBC0EaB6F08ED885C05Fc0B014290D95A",tickLensAddress:"0x5f115D9113F88e0a0Db1b5033D90D4a9690AcD3D"},U=((p={})[exports.ChainId.MAINNET]=v,p[exports.ChainId.OPTIMISM]=g,p[exports.ChainId.ARBITRUM_ONE]=M,p[exports.ChainId.POLYGON]=L,p[exports.ChainId.POLYGON_MUMBAI]=L,p[exports.ChainId.GOERLI]=N,p[exports.ChainId.CELO]=P,p[exports.ChainId.CELO_ALFAJORES]=P,p[exports.ChainId.BNB]={v3CoreFactoryAddress:"0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7",multicallAddress:"0x963Df249eD09c358A4819E39d9Cd5736c3087184",quoterAddress:"0x78D78E420Da98ad378D7799bE8f4AF69033EB077",v3MigratorAddress:"0x32681814957e0C13117ddc0c2aba232b5c9e760f",nonfungiblePositionManagerAddress:"0x7b8A01B39D58278b5DE7e48c8449c9f4F5170613",tickLensAddress:"0xD9270014D396281579760619CCf4c3af0501A47C",swapRouter02Address:"0xB971eF87ede563556b2ED4b1C0b0019111Dd85d2"},p[exports.ChainId.OPTIMISM_GOERLI]={v3CoreFactoryAddress:"0xB656dA17129e7EB733A557f4EBc57B76CFbB5d10",multicallAddress:"0x07F2D8a2a02251B62af965f22fC4744A5f96BCCd",quoterAddress:"0x9569CbA925c8ca2248772A9A4976A516743A246F",v3MigratorAddress:"0xf6c55fBe84B1C8c3283533c53F51bC32F5C7Aba8",nonfungiblePositionManagerAddress:"0x39Ca85Af2F383190cBf7d7c41ED9202D27426EF6",tickLensAddress:"0xe6140Bd164b63E8BfCfc40D5dF952f83e171758e"},p[exports.ChainId.OPTIMISM_SEPOLIA]={v3CoreFactoryAddress:"0x8CE191193D15ea94e11d327b4c7ad8bbE520f6aF",multicallAddress:"0x80e4e06841bb76AA9735E0448cB8d003C0EF009a",quoterAddress:"0x0FBEa6cf957d95ee9313490050F6A0DA68039404",v3MigratorAddress:"0xE7EcbAAaA54D007A00dbb6c1d2f150066D69dA07",nonfungiblePositionManagerAddress:"0xdA75cEf1C93078e8b736FCA5D5a30adb97C8957d",tickLensAddress:"0xCb7f54747F58F8944973cea5b8f4ac2209BadDC5",swapRouter02Address:"0x94cC0AaC535CCDB3C01d6787D6413C739ae12bc4"},p[exports.ChainId.ARBITRUM_GOERLI]={v3CoreFactoryAddress:"0x4893376342d5D7b3e31d4184c08b265e5aB2A3f6",multicallAddress:"0x8260CB40247290317a4c062F3542622367F206Ee",quoterAddress:"0x1dd92b83591781D0C6d98d07391eea4b9a6008FA",v3MigratorAddress:"0xA815919D2584Ac3F76ea9CB62E6Fd40a43BCe0C3",nonfungiblePositionManagerAddress:"0x622e4726a167799826d1E1D150b076A7725f5D81",tickLensAddress:"0xb52429333da969a0C79a60930a4Bf0020E5D1DE8"},p[exports.ChainId.ARBITRUM_SEPOLIA]={v3CoreFactoryAddress:"0x248AB79Bbb9bC29bB72f7Cd42F17e054Fc40188e",multicallAddress:"0x2B718b475e385eD29F56775a66aAB1F5cC6B2A0A",quoterAddress:"0x2779a0CC1c3e0E44D2542EC3e79e3864Ae93Ef0B",v3MigratorAddress:"0x398f43ef2c67B941147157DA1c5a868E906E043D",nonfungiblePositionManagerAddress:"0x6b2937Bde17889EDCf8fbD8dE31C3C2a70Bc4d65",tickLensAddress:"0x0fd18587734e5C2dcE2dccDcC7DD1EC89ba557d9",swapRouter02Address:"0x101F443B4d1b059569D643917553c771E1b9663E"},p[exports.ChainId.SEPOLIA]={v3CoreFactoryAddress:"0x11BAa8360DD2f9de11EA93501C2022E1260DC02f",multicallAddress:"0x65Dec5354c0Ae5bf432135097c2bC68FA09ee210",quoterAddress:"0xdA7377bE8BA41acA5f24B8C92C99290614d2ABf8",v3MigratorAddress:"0xDf3e6435Cce912384476F1926ED4caca16785d83",nonfungiblePositionManagerAddress:"0x3A525D8737bb0b483AbCCF6b387F1E6764C46DF6",tickLensAddress:"0x45533a7407f33191E9278bc577E53B107A53Da36",swapRouter02Address:"0x1b8DB7D581376e87d76936432411BdF47f9E524D"},p[exports.ChainId.AVALANCHE]={v3CoreFactoryAddress:"0x740b1c1de25031C31FF4fC9A62f554A55cdC1baD",multicallAddress:"0x0139141Cd4Ee88dF3Cdb65881D411bAE271Ef0C2",quoterAddress:"0xbe0F5544EC67e9B3b2D979aaA43f18Fd87E6257F",v3MigratorAddress:"0x44f5f1f5E452ea8d29C890E8F6e893fC0f1f0f97",nonfungiblePositionManagerAddress:"0x655C406EBFa14EE2006250925e54ec43AD184f8B",tickLensAddress:"0xEB9fFC8bf81b4fFd11fb6A63a6B0f098c6e21950",swapRouter02Address:"0xbb00FF08d01D300023C629E8fFfFcb65A5a578cE"},p[exports.ChainId.BASE]={v3CoreFactoryAddress:"0x33128a8fC17869897dcE68Ed026d694621f6FDfD",multicallAddress:"0x091e99cb1C49331a94dD62755D168E941AbD0693",quoterAddress:"0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a",v3MigratorAddress:"0x23cF10b1ee3AdfCA73B0eF17C07F7577e7ACd2d7",nonfungiblePositionManagerAddress:"0x03a520b32C04BF3bEEf7BEb72E919cf822Ed34f1",tickLensAddress:"0x0CdeE061c75D43c82520eD998C23ac2991c9ac6d",swapRouter02Address:"0x2626664c2603336E57B271c5C0b26F421741e481"},p[exports.ChainId.BASE_GOERLI]={v3CoreFactoryAddress:"0x9323c1d6D800ed51Bd7C6B216cfBec678B7d0BC2",multicallAddress:"0xB206027a9E0E13F05eBEFa5D2402Bab3eA716439",quoterAddress:"0xedf539058e28E5937dAef3f69cEd0b25fbE66Ae9",v3MigratorAddress:"0x3efe5d02a04b7351D671Db7008ec6eBA9AD9e3aE",nonfungiblePositionManagerAddress:"0x3c61369ef0D1D2AFa70d8feC2F31C5D6Ce134F30",tickLensAddress:"0x1acB873Ee909D0c98adB18e4474943249F931b92",swapRouter02Address:"0x8357227D4eDc78991Db6FDB9bD6ADE250536dE1d"},p[exports.ChainId.ZORA]={v3CoreFactoryAddress:"0x7145F8aeef1f6510E92164038E1B6F8cB2c42Cbb",multicallAddress:"0xA51c76bEE6746cB487a7e9312E43e2b8f4A37C15",quoterAddress:"0x11867e1b3348F3ce4FcC170BC5af3d23E07E64Df",v3MigratorAddress:"0x048352d8dCF13686982C799da63fA6426a9D0b60",nonfungiblePositionManagerAddress:"0xbC91e8DfA3fF18De43853372A3d7dfe585137D78",tickLensAddress:"0x209AAda09D74Ad3B8D0E92910Eaf85D2357e3044",swapRouter02Address:"0x7De04c96BE5159c3b5CeffC82aa176dc81281557"},p[exports.ChainId.ZORA_SEPOLIA]={v3CoreFactoryAddress:"0x4324A677D74764f46f33ED447964252441aA8Db6",multicallAddress:"0xA1E7e3A69671C4494EC59Dbd442de930a93F911A",quoterAddress:"0xC195976fEF0985886E37036E2DF62bF371E12Df0",v3MigratorAddress:"0x65ef259b31bf1d977c37e9434658694267674897",nonfungiblePositionManagerAddress:"0xB8458EaAe43292e3c1F7994EFd016bd653d23c20",tickLensAddress:"0x23C0F71877a1Fc4e20A78018f9831365c85f3064"},p[exports.ChainId.ROOTSTOCK]={v3CoreFactoryAddress:"0xaF37EC98A00FD63689CF3060BF3B6784E00caD82",multicallAddress:"0x996a9858cDfa45Ad68E47c9A30a7201E29c6a386",quoterAddress:"0xb51727c996C68E60F598A923a5006853cd2fEB31",v3MigratorAddress:"0x16678977CA4ec3DAD5efc7b15780295FE5f56162",nonfungiblePositionManagerAddress:"0x9d9386c042F194B460Ec424a1e57ACDE25f5C4b1",tickLensAddress:"0x55B9dF5bF68ADe972191a91980459f48ecA16afC",swapRouter02Address:"0x0B14ff67f0014046b4b99057Aec4509640b3947A"},p[exports.ChainId.BLAST]={v3CoreFactoryAddress:"0x792edAdE80af5fC680d96a2eD80A44247D2Cf6Fd",multicallAddress:"0xdC7f370de7631cE9e2c2e1DCDA6B3B5744Cf4705",quoterAddress:"0x6Cdcd65e03c1CEc3730AeeCd45bc140D57A25C77",v3MigratorAddress:"0x15CA7043CD84C5D21Ae76Ba0A1A967d42c40ecE0",nonfungiblePositionManagerAddress:"0xB218e4f7cF0533d4696fDfC419A0023D33345F28",tickLensAddress:"0x2E95185bCdD928a3e984B7e2D6560Ab1b17d7274",swapRouter02Address:"0x549FEB8c9bd4c12Ad2AB27022dA12492aC452B66"},p),w=u({},I.reduce((function(e,r){return e[r]=U[r].v3CoreFactoryAddress,e}),{})),q=u({},I.reduce((function(e,r){var t=U[r].v3MigratorAddress;return t&&(e[r]=t),e}),{})),G=u({},I.reduce((function(e,r){return e[r]=U[r].multicallAddress,e}),{})),W=O("0x5e4be8Bc9637f0EAA1A755019e06A68ce081D58F"),H=((D={})[exports.ChainId.MAINNET]="0xC4e172459f1E7939D522503B81AFAaC1014CE6F6",D),k=((b={})[exports.ChainId.MAINNET]="0x408ED6354d4973f66138C91495F2f2FCbd8724C3",b),V=O("0x1a9C8182C09F50C8318d769245beA52c32BE35BC"),Y=((l={})[exports.ChainId.MAINNET]="0x090D4613473dEE047c3f2706764f49E0821D256e",l),j=((B={})[exports.ChainId.MAINNET]="0xeca4B0bDBf7c55E9b7925919d03CbF8Dc82537E8",B),X=u({},I.reduce((function(e,r){return e[r]=U[r].quoterAddress,e}),{})),K=u({},I.reduce((function(e,r){var t=U[r].nonfungiblePositionManagerAddress;return t&&(e[r]=t),e}),{})),Z=u({},O("0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e")),Q=((h={})[exports.ChainId.MAINNET]="0x65770b5283117639760beA3F867b69b3697a91dd",h),J=u({},I.reduce((function(e,r){var t=U[r].tickLensAddress;return t&&(e[r]=t),e}),{})),$=I.reduce((function(e,r){var t=U[r].v1MixedRouteQuoterAddress;return t&&(e[r]=t),e}),{});(m=exports.TradeType||(exports.TradeType={}))[m.EXACT_INPUT=0]="EXACT_INPUT",m[m.EXACT_OUTPUT=1]="EXACT_OUTPUT",(R=exports.Rounding||(exports.Rounding={}))[R.ROUND_DOWN=0]="ROUND_DOWN",R[R.ROUND_HALF_UP=1]="ROUND_HALF_UP",R[R.ROUND_UP=2]="ROUND_UP";var z,ee,re=t.BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"),te=o(d),ne=o(a),de=((z={})[exports.Rounding.ROUND_DOWN]=te.ROUND_DOWN,z[exports.Rounding.ROUND_HALF_UP]=te.ROUND_HALF_UP,z[exports.Rounding.ROUND_UP]=te.ROUND_UP,z),ae=((ee={})[exports.Rounding.ROUND_DOWN]=0,ee[exports.Rounding.ROUND_HALF_UP]=1,ee[exports.Rounding.ROUND_UP]=3,ee),oe=function(){function e(e,r){void 0===r&&(r=t.BigInt(1)),this.numerator=t.BigInt(e),this.denominator=t.BigInt(r)}e.tryParseFraction=function(r){if(r instanceof t||"number"==typeof r||"string"==typeof r)return new e(r);if("numerator"in r&&"denominator"in r)return r;throw new Error("Could not parse fraction")};var r=e.prototype;return r.invert=function(){return new e(this.denominator,this.numerator)},r.add=function(r){var n=e.tryParseFraction(r);return t.equal(this.denominator,n.denominator)?new e(t.add(this.numerator,n.numerator),this.denominator):new e(t.add(t.multiply(this.numerator,n.denominator),t.multiply(n.numerator,this.denominator)),t.multiply(this.denominator,n.denominator))},r.subtract=function(r){var n=e.tryParseFraction(r);return t.equal(this.denominator,n.denominator)?new e(t.subtract(this.numerator,n.numerator),this.denominator):new e(t.subtract(t.multiply(this.numerator,n.denominator),t.multiply(n.numerator,this.denominator)),t.multiply(this.denominator,n.denominator))},r.lessThan=function(r){var n=e.tryParseFraction(r);return t.lessThan(t.multiply(this.numerator,n.denominator),t.multiply(n.numerator,this.denominator))},r.equalTo=function(r){var n=e.tryParseFraction(r);return t.equal(t.multiply(this.numerator,n.denominator),t.multiply(n.numerator,this.denominator))},r.greaterThan=function(r){var n=e.tryParseFraction(r);return t.greaterThan(t.multiply(this.numerator,n.denominator),t.multiply(n.numerator,this.denominator))},r.multiply=function(r){var n=e.tryParseFraction(r);return new e(t.multiply(this.numerator,n.numerator),t.multiply(this.denominator,n.denominator))},r.divide=function(r){var n=e.tryParseFraction(r);return new e(t.multiply(this.numerator,n.denominator),t.multiply(this.denominator,n.numerator))},r.toSignificant=function(e,r,t){void 0===r&&(r={groupSeparator:""}),void 0===t&&(t=exports.Rounding.ROUND_HALF_UP),Number.isInteger(e)||n(!1),e>0||n(!1),te.set({precision:e+1,rounding:de[t]});var d=new te(this.numerator.toString()).div(this.denominator.toString()).toSignificantDigits(e);return d.toFormat(d.decimalPlaces(),r)},r.toFixed=function(e,r,t){return void 0===r&&(r={groupSeparator:""}),void 0===t&&(t=exports.Rounding.ROUND_HALF_UP),Number.isInteger(e)||n(!1),e>=0||n(!1),ne.DP=e,ne.RM=ae[t],new ne(this.numerator.toString()).div(this.denominator.toString()).toFormat(e,r)},A(e,[{key:"quotient",get:function(){return t.divide(this.numerator,this.denominator)}},{key:"remainder",get:function(){return new e(t.remainder(this.numerator,this.denominator),this.denominator)}},{key:"asFraction",get:function(){return new e(this.numerator,this.denominator)}}]),e}(),ie=o(a),se=function(e){function r(r,d,a){var o;return o=e.call(this,d,a)||this,t.lessThanOrEqual(o.quotient,re)||n(!1),o.currency=r,o.decimalScale=t.exponentiate(t.BigInt(10),t.BigInt(r.decimals)),o}f(r,e),r.fromRawAmount=function(e,t){return new r(e,t)},r.fromFractionalAmount=function(e,t,n){return new r(e,t,n)};var d=r.prototype;return d.add=function(t){this.currency.equals(t.currency)||n(!1);var d=e.prototype.add.call(this,t);return r.fromFractionalAmount(this.currency,d.numerator,d.denominator)},d.subtract=function(t){this.currency.equals(t.currency)||n(!1);var d=e.prototype.subtract.call(this,t);return r.fromFractionalAmount(this.currency,d.numerator,d.denominator)},d.multiply=function(t){var n=e.prototype.multiply.call(this,t);return r.fromFractionalAmount(this.currency,n.numerator,n.denominator)},d.divide=function(t){var n=e.prototype.divide.call(this,t);return r.fromFractionalAmount(this.currency,n.numerator,n.denominator)},d.toSignificant=function(r,t,n){return void 0===r&&(r=6),void 0===n&&(n=exports.Rounding.ROUND_DOWN),e.prototype.divide.call(this,this.decimalScale).toSignificant(r,t,n)},d.toFixed=function(r,t,d){return void 0===r&&(r=this.currency.decimals),void 0===d&&(d=exports.Rounding.ROUND_DOWN),r<=this.currency.decimals||n(!1),e.prototype.divide.call(this,this.decimalScale).toFixed(r,t,d)},d.toExact=function(e){return void 0===e&&(e={groupSeparator:""}),ie.DP=this.currency.decimals,new ie(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(e)},A(r,[{key:"wrapped",get:function(){return this.currency.isToken?this:r.fromFractionalAmount(this.currency.wrapped,this.numerator,this.denominator)}}]),r}(oe),ce=new oe(t.BigInt(100));function Ae(e){return new ue(e.numerator,e.denominator)}var ue=function(e){function r(){var r;return(r=e.apply(this,arguments)||this).isPercent=!0,r}f(r,e);var t=r.prototype;return t.add=function(r){return Ae(e.prototype.add.call(this,r))},t.subtract=function(r){return Ae(e.prototype.subtract.call(this,r))},t.multiply=function(r){return Ae(e.prototype.multiply.call(this,r))},t.divide=function(r){return Ae(e.prototype.divide.call(this,r))},t.toSignificant=function(r,t,n){return void 0===r&&(r=5),e.prototype.multiply.call(this,ce).toSignificant(r,t,n)},t.toFixed=function(r,t,n){return void 0===r&&(r=2),e.prototype.multiply.call(this,ce).toFixed(r,t,n)},r}(oe),fe=function(e){function r(){for(var r,n,d,a,o,i=arguments.length,s=new Array(i),c=0;c<i;c++)s[c]=arguments[c];if(4===s.length)n=s[0],d=s[1],a=s[2],o=s[3];else{var A=s[0].quoteAmount.divide(s[0].baseAmount),u=[s[0].baseAmount.currency,s[0].quoteAmount.currency,A.denominator,A.numerator];n=u[0],d=u[1],a=u[2],o=u[3]}return(r=e.call(this,o,a)||this).baseCurrency=n,r.quoteCurrency=d,r.scalar=new oe(t.exponentiate(t.BigInt(10),t.BigInt(n.decimals)),t.exponentiate(t.BigInt(10),t.BigInt(d.decimals))),r}f(r,e);var d=r.prototype;return d.invert=function(){return new r(this.quoteCurrency,this.baseCurrency,this.numerator,this.denominator)},d.multiply=function(t){this.quoteCurrency.equals(t.baseCurrency)||n(!1);var d=e.prototype.multiply.call(this,t);return new r(this.baseCurrency,t.quoteCurrency,d.denominator,d.numerator)},d.quote=function(r){r.currency.equals(this.baseCurrency)||n(!1);var t=e.prototype.multiply.call(this,r);return se.fromFractionalAmount(this.quoteCurrency,t.numerator,t.denominator)},d.toSignificant=function(e,r,t){return void 0===e&&(e=6),this.adjustedForDecimals.toSignificant(e,r,t)},d.toFixed=function(e,r,t){return void 0===e&&(e=4),this.adjustedForDecimals.toFixed(e,r,t)},A(r,[{key:"adjustedForDecimals",get:function(){return e.prototype.multiply.call(this,this.scalar)}}]),r}(oe),Ee=function(e,r,t,d){Number.isSafeInteger(e)||n(!1),r>=0&&r<255&&Number.isInteger(r)||n(!1),this.chainId=e,this.decimals=r,this.symbol=t,this.name=d},Ce=function(e){function r(){var r;return(r=e.apply(this,arguments)||this).isNative=!0,r.isToken=!1,r}return f(r,e),r}(Ee);function xe(e){try{return s.getAddress(e)}catch(r){throw new Error(e+" is not a valid address.")}}var pe,De=/^0x[0-9a-fA-F]{40}$/,be=function(e){function r(r,t,d,a,o,s,c,A){var u;return(u=e.call(this,r,d,a,o)||this).isNative=!1,u.isToken=!0,u.address=s?function(e){if(De.test(e))return e;throw new Error(e+" is not a valid address.")}(t):xe(t),c&&(c.gte(i.BigNumber.from(0))||n(!1)),A&&(A.gte(i.BigNumber.from(0))||n(!1)),u.buyFeeBps=c,u.sellFeeBps=A,u}f(r,e);var t=r.prototype;return t.equals=function(e){return e.isToken&&this.chainId===e.chainId&&this.address.toLowerCase()===e.address.toLowerCase()},t.sortsBefore=function(e){return this.chainId!==e.chainId&&n(!1),this.address.toLowerCase()===e.address.toLowerCase()&&n(!1),this.address.toLowerCase()<e.address.toLowerCase()},A(r,[{key:"wrapped",get:function(){return this}}]),r}(Ee),le=((pe={})[1]=new be(1,"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",18,"WETH","Wrapped Ether"),pe[3]=new be(3,"0xc778417E063141139Fce010982780140Aa0cD5Ab",18,"WETH","Wrapped Ether"),pe[4]=new be(4,"0xc778417E063141139Fce010982780140Aa0cD5Ab",18,"WETH","Wrapped Ether"),pe[5]=new be(5,"0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6",18,"WETH","Wrapped Ether"),pe[42]=new be(42,"0xd0A1E359811322d97991E03f863a0C30C2cF029C",18,"WETH","Wrapped Ether"),pe[10]=new be(10,"0x4200000000000000000000000000000000000006",18,"WETH","Wrapped Ether"),pe[69]=new be(69,"0x4200000000000000000000000000000000000006",18,"WETH","Wrapped Ether"),pe[11155420]=new be(11155420,"0x4200000000000000000000000000000000000006",18,"WETH","Wrapped Ether"),pe[42161]=new be(42161,"0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",18,"WETH","Wrapped Ether"),pe[421611]=new be(421611,"0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681",18,"WETH","Wrapped Ether"),pe[421614]=new be(421614,"0x980B62Da83eFf3D4576C647993b0c1D7faf17c73",18,"WETH","Wrapped Ether"),pe[8453]=new be(8453,"0x4200000000000000000000000000000000000006",18,"WETH","Wrapped Ether"),pe[56]=new be(56,"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c",18,"WBNB","Wrapped BNB"),pe[137]=new be(137,"0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270",18,"WMATIC","Wrapped MATIC"),pe[43114]=new be(43114,"0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",18,"WAVAX","Wrapped AVAX"),pe[11155111]=new be(11155111,"0xb16F35c0Ae2912430DAc15764477E179D9B9EbEa",18,"WETH","Wrapped Ether"),pe),Be=function(e){function r(r){return e.call(this,r,18,"ETH","Ether")||this}return f(r,e),r.onChain=function(e){var t;return null!=(t=this._etherCache[e])?t:this._etherCache[e]=new r(e)},r.prototype.equals=function(e){return e.isNative&&e.chainId===this.chainId},A(r,[{key:"wrapped",get:function(){var e=le[this.chainId];return e||n(!1),e}}]),r}(Ce);Be._etherCache={};var he=t.BigInt(Number.MAX_SAFE_INTEGER),Ie=t.BigInt(0),Fe=t.BigInt(1),Oe=t.BigInt(2);exports.ARGENT_WALLET_DETECTOR_ADDRESS=j,exports.CHAIN_TO_ADDRESSES_MAP=U,exports.CurrencyAmount=se,exports.ENS_REGISTRAR_ADDRESSES=Z,exports.Ether=Be,exports.Fraction=oe,exports.GOVERNANCE_ALPHA_V0_ADDRESSES=W,exports.GOVERNANCE_ALPHA_V1_ADDRESSES=H,exports.GOVERNANCE_BRAVO_ADDRESSES=k,exports.MERKLE_DISTRIBUTOR_ADDRESS=Y,exports.MIXED_ROUTE_QUOTER_V1_ADDRESSES=$,exports.MULTICALL_ADDRESSES=G,exports.MaxUint256=re,exports.NONFUNGIBLE_POSITION_MANAGER_ADDRESSES=K,exports.NativeCurrency=Ce,exports.Percent=ue,exports.Price=fe,exports.QUOTER_ADDRESSES=X,exports.SOCKS_CONTROLLER_ADDRESSES=Q,exports.SUPPORTED_CHAINS=I,exports.SWAP_ROUTER_02_ADDRESSES=function(e){var r;return I.includes(e)?null!=(r=U[e].swapRouter02Address)?r:"0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45":""},exports.TICK_LENS_ADDRESSES=J,exports.TIMELOCK_ADDRESSES=V,exports.Token=be,exports.UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS="0x8B799381ac40b838BBA4131ffB26197C432AFe78",exports.UNI_ADDRESSES=S,exports.V2_FACTORY_ADDRESS="0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f",exports.V2_FACTORY_ADDRESSES=_,exports.V2_ROUTER_ADDRESS="0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",exports.V2_ROUTER_ADDRESSES=T,exports.V3_CORE_FACTORY_ADDRESSES=w,exports.V3_MIGRATOR_ADDRESSES=q,exports.WETH9=le,exports.computePriceImpact=function(e,r,t){var n=e.quote(r),d=n.subtract(t).divide(n);return new ue(d.numerator,d.denominator)},exports.sortedInsert=function(e,r,t,d){if(t>0||n(!1),e.length<=t||n(!1),0===e.length)return e.push(r),null;var a=e.length===t;if(a&&d(e[e.length-1],r)<=0)return r;for(var o=0,i=e.length;o<i;){var s=o+i>>>1;d(e[s],r)<=0?o=s+1:i=s}return e.splice(o,0,r),a?e.pop():null},exports.sqrt=function(e){if(t.greaterThanOrEqual(e,Ie)||n(!1),t.lessThan(e,he))return t.BigInt(Math.floor(Math.sqrt(t.toNumber(e))));var r,d;for(r=e,d=t.add(t.divide(e,Oe),Fe);t.lessThan(d,r);)r=d,d=t.divide(t.add(t.divide(e,d),d),Oe);return r},exports.validateAndParseAddress=xe;
 //# sourceMappingURL=sdk-core.cjs.production.min.js.map
diff --git a/node_modules/@uniswap/sdk-core/dist/sdk-core.cjs.production.min.js.map b/node_modules/@uniswap/sdk-core/dist/sdk-core.cjs.production.min.js.map
index e6c5d8a..140b3ee 100644
--- a/node_modules/@uniswap/sdk-core/dist/sdk-core.cjs.production.min.js.map
+++ b/node_modules/@uniswap/sdk-core/dist/sdk-core.cjs.production.min.js.map
@@ -1 +1 @@
-{"version":3,"file":"sdk-core.cjs.production.min.js","sources":["../src/chains.ts","../src/addresses.ts","../src/constants.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/price.ts","../src/entities/baseCurrency.ts","../src/entities/nativeCurrency.ts","../src/utils/validateAndParseAddress.ts","../src/entities/token.ts","../src/entities/weth9.ts","../src/entities/ether.ts","../src/utils/sqrt.ts","../src/utils/computePriceImpact.ts","../src/utils/sortedInsert.ts"],"sourcesContent":["export enum ChainId {\n  MAINNET = 1,\n  GOERLI = 5,\n  SEPOLIA = 11155111,\n  OPTIMISM = 10,\n  OPTIMISM_GOERLI = 420,\n  OPTIMISM_SEPOLIA = 11155420,\n  ARBITRUM_ONE = 42161,\n  ARBITRUM_GOERLI = 421613,\n  ARBITRUM_SEPOLIA = 421614,\n  POLYGON = 137,\n  POLYGON_MUMBAI = 80001,\n  CELO = 42220,\n  CELO_ALFAJORES = 44787,\n  GNOSIS = 100,\n  MOONBEAM = 1284,\n  BNB = 56,\n  AVALANCHE = 43114,\n  BASE_GOERLI = 84531,\n  BASE = 8453,\n  ZORA = 7777777,\n  ZORA_SEPOLIA = 999999999,\n  ROOTSTOCK = 30,\n  BLAST = 81457\n}\n\nexport const SUPPORTED_CHAINS = [\n  ChainId.MAINNET,\n  ChainId.OPTIMISM,\n  ChainId.OPTIMISM_GOERLI,\n  ChainId.OPTIMISM_SEPOLIA,\n  ChainId.ARBITRUM_ONE,\n  ChainId.ARBITRUM_GOERLI,\n  ChainId.ARBITRUM_SEPOLIA,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.GOERLI,\n  ChainId.SEPOLIA,\n  ChainId.CELO_ALFAJORES,\n  ChainId.CELO,\n  ChainId.BNB,\n  ChainId.AVALANCHE,\n  ChainId.BASE,\n  ChainId.BASE_GOERLI,\n  ChainId.ZORA,\n  ChainId.ZORA_SEPOLIA,\n  ChainId.ROOTSTOCK,\n  ChainId.BLAST\n] as const\nexport type SupportedChainsType = typeof SUPPORTED_CHAINS[number]\n\nexport enum NativeCurrencyName {\n  // Strings match input for CLI\n  ETHER = 'ETH',\n  MATIC = 'MATIC',\n  CELO = 'CELO',\n  GNOSIS = 'XDAI',\n  MOONBEAM = 'GLMR',\n  BNB = 'BNB',\n  AVAX = 'AVAX',\n  ROOTSTOCK = 'RBTC'\n}\n","import { ChainId, SUPPORTED_CHAINS, SupportedChainsType } from './chains'\n\ntype AddressMap = { [chainId: number]: string }\n\ntype ChainAddresses = {\n  v3CoreFactoryAddress: string\n  multicallAddress: string\n  quoterAddress: string\n  v3MigratorAddress?: string\n  nonfungiblePositionManagerAddress?: string\n  tickLensAddress?: string\n  swapRouter02Address?: string\n  v1MixedRouteQuoterAddress?: string\n}\n\nconst DEFAULT_NETWORKS = [ChainId.MAINNET, ChainId.GOERLI, ChainId.SEPOLIA]\n\nfunction constructSameAddressMap(address: string, additionalNetworks: ChainId[] = []): AddressMap {\n  return DEFAULT_NETWORKS.concat(additionalNetworks).reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = address\n    return memo\n  }, {})\n}\n\nexport const UNI_ADDRESSES: AddressMap = constructSameAddressMap('0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984', [\n  ChainId.OPTIMISM,\n  ChainId.ARBITRUM_ONE,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.SEPOLIA\n])\n\nexport const UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS = '0x8B799381ac40b838BBA4131ffB26197C432AFe78'\n\n/**\n * @deprecated use V2_FACTORY_ADDRESSES instead\n */\nexport const V2_FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\nexport const V2_FACTORY_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n  [ChainId.GOERLI]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n  [ChainId.SEPOLIA]: '0xB7f907f7A9eBC822a80BD25E224be42Ce0A698A0',\n  [ChainId.OPTIMISM]: '0x0c3c1c532F1e39EdF36BE9Fe0bE1410313E074Bf',\n  [ChainId.ARBITRUM_ONE]: '0xf1D7CC64Fb4452F05c498126312eBE29f30Fbcf9',\n  [ChainId.AVALANCHE]: '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C',\n  [ChainId.BASE]: '0x8909dc15e40173ff4699343b6eb8132c65e18ec6',\n  [ChainId.BNB]: '0x8909Dc15e40173Ff4699343b6eB8132c65e18eC6',\n  [ChainId.POLYGON]: '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C',\n  [ChainId.CELO]: '0x79a530c8e2fA8748B7B40dd3629C0520c2cCf03f',\n  [ChainId.BLAST]: '0x5C346464d33F90bABaf70dB6388507CC889C1070'\n}\n/**\n * @deprecated use V2_ROUTER_ADDRESSES instead\n */\nexport const V2_ROUTER_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D'\nexport const V2_ROUTER_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\n  [ChainId.GOERLI]: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\n  [ChainId.ARBITRUM_ONE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.OPTIMISM]: '0x4a7b5da61326a6379179b40d00f57e5bbdc962c2',\n  [ChainId.BASE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.AVALANCHE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.BNB]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.POLYGON]: '0xedf6066a2b290c185783862c7f4776a2c8077ad1',\n  [ChainId.BLAST]: '0xBB66Eb1c5e875933D44DAe661dbD80e5D9B03035'\n}\n\n// Networks that share most of the same addresses i.e. Mainnet, Goerli, Optimism, Arbitrum, Polygon\nconst DEFAULT_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x1F98431c8aD98523631AE4a59f267346ea31F984',\n  multicallAddress: '0x1F98415757620B543A52E61c46B32eB19261F984',\n  quoterAddress: '0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6',\n  v3MigratorAddress: '0xA5644E29708357803b5A882D272c41cC0dF92B34',\n  nonfungiblePositionManagerAddress: '0xC36442b4a4522E871399CD717aBDD847Ab11FE88'\n}\nconst MAINNET_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  v1MixedRouteQuoterAddress: '0x84E44095eeBfEC7793Cd7d5b57B7e401D7f1cA2E'\n}\nconst GOERLI_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  v1MixedRouteQuoterAddress: '0xBa60b6e6fF25488308789E6e0A65D838be34194e'\n}\n\nconst OPTIMISM_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\nconst ARBITRUM_ONE_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  multicallAddress: '0xadF885960B47eA2CD9B55E6DAc6B42b7Cb2806dB',\n  tickLensAddress: '0xbfd8137f7d1516D3ea5cA83523914859ec47F573'\n}\nconst POLYGON_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\n\n// celo v3 addresses\nconst CELO_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xAfE208a311B21f13EF87E33A90049fC17A7acDEc',\n  multicallAddress: '0x633987602DE5C4F337e3DbF265303A1080324204',\n  quoterAddress: '0x82825d0554fA07f7FC52Ab63c961F330fdEFa8E8',\n  v3MigratorAddress: '0x3cFd4d48EDfDCC53D3f173F596f621064614C582',\n  nonfungiblePositionManagerAddress: '0x3d79EdAaBC0EaB6F08ED885C05Fc0B014290D95A',\n  tickLensAddress: '0x5f115D9113F88e0a0Db1b5033D90D4a9690AcD3D'\n}\n\n// BNB v3 addresses\nconst BNB_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7',\n  multicallAddress: '0x963Df249eD09c358A4819E39d9Cd5736c3087184',\n  quoterAddress: '0x78D78E420Da98ad378D7799bE8f4AF69033EB077',\n  v3MigratorAddress: '0x32681814957e0C13117ddc0c2aba232b5c9e760f',\n  nonfungiblePositionManagerAddress: '0x7b8A01B39D58278b5DE7e48c8449c9f4F5170613',\n  tickLensAddress: '0xD9270014D396281579760619CCf4c3af0501A47C',\n  swapRouter02Address: '0xB971eF87ede563556b2ED4b1C0b0019111Dd85d2'\n}\n\n// optimism goerli addresses\nconst OPTIMISM_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xB656dA17129e7EB733A557f4EBc57B76CFbB5d10',\n  multicallAddress: '0x07F2D8a2a02251B62af965f22fC4744A5f96BCCd',\n  quoterAddress: '0x9569CbA925c8ca2248772A9A4976A516743A246F',\n  v3MigratorAddress: '0xf6c55fBe84B1C8c3283533c53F51bC32F5C7Aba8',\n  nonfungiblePositionManagerAddress: '0x39Ca85Af2F383190cBf7d7c41ED9202D27426EF6',\n  tickLensAddress: '0xe6140Bd164b63E8BfCfc40D5dF952f83e171758e'\n}\n\n// optimism sepolia addresses\nconst OPTIMISM_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x8CE191193D15ea94e11d327b4c7ad8bbE520f6aF',\n  multicallAddress: '0x80e4e06841bb76AA9735E0448cB8d003C0EF009a',\n  quoterAddress: '0x0FBEa6cf957d95ee9313490050F6A0DA68039404',\n  v3MigratorAddress: '0xE7EcbAAaA54D007A00dbb6c1d2f150066D69dA07',\n  nonfungiblePositionManagerAddress: '0xdA75cEf1C93078e8b736FCA5D5a30adb97C8957d',\n  tickLensAddress: '0xCb7f54747F58F8944973cea5b8f4ac2209BadDC5',\n  swapRouter02Address: '0x94cC0AaC535CCDB3C01d6787D6413C739ae12bc4'\n}\n\n// arbitrum goerli v3 addresses\nconst ARBITRUM_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x4893376342d5D7b3e31d4184c08b265e5aB2A3f6',\n  multicallAddress: '0x8260CB40247290317a4c062F3542622367F206Ee',\n  quoterAddress: '0x1dd92b83591781D0C6d98d07391eea4b9a6008FA',\n  v3MigratorAddress: '0xA815919D2584Ac3F76ea9CB62E6Fd40a43BCe0C3',\n  nonfungiblePositionManagerAddress: '0x622e4726a167799826d1E1D150b076A7725f5D81',\n  tickLensAddress: '0xb52429333da969a0C79a60930a4Bf0020E5D1DE8'\n}\n\n// arbitrum sepolia v3 addresses\nconst ARBITRUM_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x248AB79Bbb9bC29bB72f7Cd42F17e054Fc40188e',\n  multicallAddress: '0x2B718b475e385eD29F56775a66aAB1F5cC6B2A0A',\n  quoterAddress: '0x2779a0CC1c3e0E44D2542EC3e79e3864Ae93Ef0B',\n  v3MigratorAddress: '0x398f43ef2c67B941147157DA1c5a868E906E043D',\n  nonfungiblePositionManagerAddress: '0x6b2937Bde17889EDCf8fbD8dE31C3C2a70Bc4d65',\n  tickLensAddress: '0x0fd18587734e5C2dcE2dccDcC7DD1EC89ba557d9',\n  swapRouter02Address: '0x101F443B4d1b059569D643917553c771E1b9663E'\n}\n\n// sepolia v3 addresses\nconst SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x0227628f3F023bb0B980b67D528571c95c6DaC1c',\n  multicallAddress: '0xD7F33bCdb21b359c8ee6F0251d30E94832baAd07',\n  quoterAddress: '0xEd1f6473345F45b75F8179591dd5bA1888cf2FB3',\n  v3MigratorAddress: '0x729004182cF005CEC8Bd85df140094b6aCbe8b15',\n  nonfungiblePositionManagerAddress: '0x1238536071E1c677A632429e3655c799b22cDA52',\n  tickLensAddress: '0xd7f33bcdb21b359c8ee6f0251d30e94832baad07',\n  swapRouter02Address: '0x3bFA4769FB09eefC5a80d6E87c3B9C650f7Ae48E'\n}\n\n// Avalanche v3 addresses\nconst AVALANCHE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x740b1c1de25031C31FF4fC9A62f554A55cdC1baD',\n  multicallAddress: '0x0139141Cd4Ee88dF3Cdb65881D411bAE271Ef0C2',\n  quoterAddress: '0xbe0F5544EC67e9B3b2D979aaA43f18Fd87E6257F',\n  v3MigratorAddress: '0x44f5f1f5E452ea8d29C890E8F6e893fC0f1f0f97',\n  nonfungiblePositionManagerAddress: '0x655C406EBFa14EE2006250925e54ec43AD184f8B',\n  tickLensAddress: '0xEB9fFC8bf81b4fFd11fb6A63a6B0f098c6e21950',\n  swapRouter02Address: '0xbb00FF08d01D300023C629E8fFfFcb65A5a578cE'\n}\n\nconst BASE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x33128a8fC17869897dcE68Ed026d694621f6FDfD',\n  multicallAddress: '0x091e99cb1C49331a94dD62755D168E941AbD0693',\n  quoterAddress: '0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a',\n  v3MigratorAddress: '0x23cF10b1ee3AdfCA73B0eF17C07F7577e7ACd2d7',\n  nonfungiblePositionManagerAddress: '0x03a520b32C04BF3bEEf7BEb72E919cf822Ed34f1',\n  tickLensAddress: '0x0CdeE061c75D43c82520eD998C23ac2991c9ac6d',\n  swapRouter02Address: '0x2626664c2603336E57B271c5C0b26F421741e481'\n}\n\n// Base Goerli v3 addresses\nconst BASE_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x9323c1d6D800ed51Bd7C6B216cfBec678B7d0BC2',\n  multicallAddress: '0xB206027a9E0E13F05eBEFa5D2402Bab3eA716439',\n  quoterAddress: '0xedf539058e28E5937dAef3f69cEd0b25fbE66Ae9',\n  v3MigratorAddress: '0x3efe5d02a04b7351D671Db7008ec6eBA9AD9e3aE',\n  nonfungiblePositionManagerAddress: '0x3c61369ef0D1D2AFa70d8feC2F31C5D6Ce134F30',\n  tickLensAddress: '0x1acB873Ee909D0c98adB18e4474943249F931b92',\n  swapRouter02Address: '0x8357227D4eDc78991Db6FDB9bD6ADE250536dE1d'\n}\n\nconst ZORA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x7145F8aeef1f6510E92164038E1B6F8cB2c42Cbb',\n  multicallAddress: '0xA51c76bEE6746cB487a7e9312E43e2b8f4A37C15',\n  quoterAddress: '0x11867e1b3348F3ce4FcC170BC5af3d23E07E64Df',\n  v3MigratorAddress: '0x048352d8dCF13686982C799da63fA6426a9D0b60',\n  nonfungiblePositionManagerAddress: '0xbC91e8DfA3fF18De43853372A3d7dfe585137D78',\n  tickLensAddress: '0x209AAda09D74Ad3B8D0E92910Eaf85D2357e3044',\n  swapRouter02Address: '0x7De04c96BE5159c3b5CeffC82aa176dc81281557'\n}\n\nconst ZORA_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x4324A677D74764f46f33ED447964252441aA8Db6',\n  multicallAddress: '0xA1E7e3A69671C4494EC59Dbd442de930a93F911A',\n  quoterAddress: '0xC195976fEF0985886E37036E2DF62bF371E12Df0',\n  v3MigratorAddress: '0x65ef259b31bf1d977c37e9434658694267674897',\n  nonfungiblePositionManagerAddress: '0xB8458EaAe43292e3c1F7994EFd016bd653d23c20',\n  tickLensAddress: '0x23C0F71877a1Fc4e20A78018f9831365c85f3064'\n}\n\nconst ROOTSTOCK_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xaF37EC98A00FD63689CF3060BF3B6784E00caD82',\n  multicallAddress: '0x996a9858cDfa45Ad68E47c9A30a7201E29c6a386',\n  quoterAddress: '0xb51727c996C68E60F598A923a5006853cd2fEB31',\n  v3MigratorAddress: '0x16678977CA4ec3DAD5efc7b15780295FE5f56162',\n  nonfungiblePositionManagerAddress: '0x9d9386c042F194B460Ec424a1e57ACDE25f5C4b1',\n  tickLensAddress: '0x55B9dF5bF68ADe972191a91980459f48ecA16afC',\n  swapRouter02Address: '0x0B14ff67f0014046b4b99057Aec4509640b3947A'\n}\n\nconst BLAST_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x792edAdE80af5fC680d96a2eD80A44247D2Cf6Fd',\n  multicallAddress: '0xdC7f370de7631cE9e2c2e1DCDA6B3B5744Cf4705',\n  quoterAddress: '0x6Cdcd65e03c1CEc3730AeeCd45bc140D57A25C77',\n  v3MigratorAddress: '0x15CA7043CD84C5D21Ae76Ba0A1A967d42c40ecE0',\n  nonfungiblePositionManagerAddress: '0xB218e4f7cF0533d4696fDfC419A0023D33345F28',\n  tickLensAddress: '0x2E95185bCdD928a3e984B7e2D6560Ab1b17d7274',\n  swapRouter02Address: '0x549FEB8c9bd4c12Ad2AB27022dA12492aC452B66'\n}\n\nexport const CHAIN_TO_ADDRESSES_MAP: Record<SupportedChainsType, ChainAddresses> = {\n  [ChainId.MAINNET]: MAINNET_ADDRESSES,\n  [ChainId.OPTIMISM]: OPTIMISM_ADDRESSES,\n  [ChainId.ARBITRUM_ONE]: ARBITRUM_ONE_ADDRESSES,\n  [ChainId.POLYGON]: POLYGON_ADDRESSES,\n  [ChainId.POLYGON_MUMBAI]: POLYGON_ADDRESSES,\n  [ChainId.GOERLI]: GOERLI_ADDRESSES,\n  [ChainId.CELO]: CELO_ADDRESSES,\n  [ChainId.CELO_ALFAJORES]: CELO_ADDRESSES,\n  [ChainId.BNB]: BNB_ADDRESSES,\n  [ChainId.OPTIMISM_GOERLI]: OPTIMISM_GOERLI_ADDRESSES,\n  [ChainId.OPTIMISM_SEPOLIA]: OPTIMISM_SEPOLIA_ADDRESSES,\n  [ChainId.ARBITRUM_GOERLI]: ARBITRUM_GOERLI_ADDRESSES,\n  [ChainId.ARBITRUM_SEPOLIA]: ARBITRUM_SEPOLIA_ADDRESSES,\n  [ChainId.SEPOLIA]: SEPOLIA_ADDRESSES,\n  [ChainId.AVALANCHE]: AVALANCHE_ADDRESSES,\n  [ChainId.BASE]: BASE_ADDRESSES,\n  [ChainId.BASE_GOERLI]: BASE_GOERLI_ADDRESSES,\n  [ChainId.ZORA]: ZORA_ADDRESSES,\n  [ChainId.ZORA_SEPOLIA]: ZORA_SEPOLIA_ADDRESSES,\n  [ChainId.ROOTSTOCK]: ROOTSTOCK_ADDRESSES,\n  [ChainId.BLAST]: BLAST_ADDRESSES\n}\n\n/* V3 Contract Addresses */\nexport const V3_CORE_FACTORY_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].v3CoreFactoryAddress\n    return memo\n  }, {})\n}\n\nexport const V3_MIGRATOR_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const v3MigratorAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v3MigratorAddress\n    if (v3MigratorAddress) {\n      memo[chainId] = v3MigratorAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const MULTICALL_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].multicallAddress\n    return memo\n  }, {})\n}\n\n/**\n * The oldest V0 governance address\n */\nexport const GOVERNANCE_ALPHA_V0_ADDRESSES: AddressMap = constructSameAddressMap(\n  '0x5e4be8Bc9637f0EAA1A755019e06A68ce081D58F'\n)\n/**\n * The older V1 governance address\n */\nexport const GOVERNANCE_ALPHA_V1_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0xC4e172459f1E7939D522503B81AFAaC1014CE6F6'\n}\n/**\n * The latest governor bravo that is currently admin of timelock\n */\nexport const GOVERNANCE_BRAVO_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x408ED6354d4973f66138C91495F2f2FCbd8724C3'\n}\n\nexport const TIMELOCK_ADDRESSES: AddressMap = constructSameAddressMap('0x1a9C8182C09F50C8318d769245beA52c32BE35BC')\n\nexport const MERKLE_DISTRIBUTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x090D4613473dEE047c3f2706764f49E0821D256e'\n}\n\nexport const ARGENT_WALLET_DETECTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xeca4B0bDBf7c55E9b7925919d03CbF8Dc82537E8'\n}\n\nexport const QUOTER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].quoterAddress\n    return memo\n  }, {})\n}\n\nexport const NONFUNGIBLE_POSITION_MANAGER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const nonfungiblePositionManagerAddress = CHAIN_TO_ADDRESSES_MAP[chainId].nonfungiblePositionManagerAddress\n    if (nonfungiblePositionManagerAddress) {\n      memo[chainId] = nonfungiblePositionManagerAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const ENS_REGISTRAR_ADDRESSES: AddressMap = {\n  ...constructSameAddressMap('0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e')\n}\n\nexport const SOCKS_CONTROLLER_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x65770b5283117639760beA3F867b69b3697a91dd'\n}\n\nexport const TICK_LENS_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const tickLensAddress = CHAIN_TO_ADDRESSES_MAP[chainId].tickLensAddress\n    if (tickLensAddress) {\n      memo[chainId] = tickLensAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const MIXED_ROUTE_QUOTER_V1_ADDRESSES: AddressMap = SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n  const v1MixedRouteQuoterAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v1MixedRouteQuoterAddress\n  if (v1MixedRouteQuoterAddress) {\n    memo[chainId] = v1MixedRouteQuoterAddress\n  }\n  return memo\n}, {})\n\nexport const SWAP_ROUTER_02_ADDRESSES = (chainId: number) => {\n  if (SUPPORTED_CHAINS.includes(chainId)) {\n    const id = chainId as SupportedChainsType\n    return CHAIN_TO_ADDRESSES_MAP[id].swapRouter02Address ?? '0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45'\n  }\n  return ''\n}\n","import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | string | number\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { Currency } from '../currency'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\nimport _Big from 'big.js'\n\nimport toFormat from 'toformat'\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n}\n","import JSBI from 'jsbi'\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Currency } from '../currency'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [{ baseAmount: CurrencyAmount<TBase>; quoteAmount: CurrencyAmount<TQuote> }]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { Token } from './token'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class BaseCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import { BaseCurrency } from './baseCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends BaseCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","import { getAddress } from '@ethersproject/address'\n\n/**\n * Validates an address and returns the parsed (checksummed) version of that address\n * @param address the unchecksummed hex address\n */\nexport function validateAndParseAddress(address: string): string {\n  try {\n    return getAddress(address)\n  } catch (error) {\n    throw new Error(`${address} is not a valid address.`)\n  }\n}\n\n// Checks a string starts with 0x, is 42 characters long and contains only hex characters after 0x\nconst startsWith0xLen42HexRegex = /^0x[0-9a-fA-F]{40}$/\n\n/**\n * Checks if an address is valid by checking 0x prefix, length === 42 and hex encoding.\n * @param address the unchecksummed hex address\n */\nexport function checkValidAddress(address: string): string {\n  if (startsWith0xLen42HexRegex.test(address)) {\n    return address\n  }\n\n  throw new Error(`${address} is not a valid address.`)\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport invariant from 'tiny-invariant'\nimport { checkValidAddress, validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { BaseCurrency } from './baseCurrency'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string\n\n  /**\n   * Relevant for fee-on-transfer (FOT) token taxes,\n   * Not every ERC20 token is FOT token, so this field is optional\n   */\n  public readonly buyFeeBps?: BigNumber\n  public readonly sellFeeBps?: BigNumber\n\n  /**\n   *\n   * @param chainId {@link BaseCurrency#chainId}\n   * @param address The contract address on the chain on which this token lives\n   * @param decimals {@link BaseCurrency#decimals}\n   * @param symbol {@link BaseCurrency#symbol}\n   * @param name {@link BaseCurrency#name}\n   * @param bypassChecksum If true it only checks for length === 42, startsWith 0x and contains only hex characters\n   * @param buyFeeBps Buy fee tax for FOT tokens, in basis points\n   * @param sellFeeBps Sell fee tax for FOT tokens, in basis points\n   */\n  public constructor(\n    chainId: number,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string,\n    bypassChecksum?: boolean,\n    buyFeeBps?: BigNumber,\n    sellFeeBps?: BigNumber\n  ) {\n    super(chainId, decimals, symbol, name)\n    if (bypassChecksum) {\n      this.address = checkValidAddress(address)\n    } else {\n      this.address = validateAndParseAddress(address)\n    }\n    if (buyFeeBps) {\n      invariant(buyFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    if (sellFeeBps) {\n      invariant(sellFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    this.buyFeeBps = buyFeeBps\n    this.sellFeeBps = sellFeeBps\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address.toLowerCase() === other.address.toLowerCase()\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address.toLowerCase() !== other.address.toLowerCase(), 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n","import { Token } from './token'\n\n/**\n * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped\n */\nexport const WETH9: { [chainId: number]: Token } = {\n  [1]: new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'),\n  [3]: new Token(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  [4]: new Token(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  [5]: new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [42]: new Token(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\n\n  [10]: new Token(10, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  [69]: new Token(69, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  [11155420]: new Token(11155420, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n\n  [42161]: new Token(42161, '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', 18, 'WETH', 'Wrapped Ether'),\n  [421611]: new Token(421611, '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681', 18, 'WETH', 'Wrapped Ether'),\n  [421614]: new Token(421614, '0x980B62Da83eFf3D4576C647993b0c1D7faf17c73', 18, 'WETH', 'Wrapped Ether'),\n\n  [8453]: new Token(8453, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n\n  [56]: new Token(56, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB'),\n  [137]: new Token(137, '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270', 18, 'WMATIC', 'Wrapped MATIC'),\n  [43114]: new Token(43114, '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7', 18, 'WAVAX', 'Wrapped AVAX')\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { NativeCurrency } from './nativeCurrency'\nimport { Token } from './token'\nimport { WETH9 } from './weth9'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n","import { Currency, CurrencyAmount, Percent, Price } from '../entities'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n"],"names":["ChainId","NativeCurrencyName","SUPPORTED_CHAINS","MAINNET","OPTIMISM","OPTIMISM_GOERLI","OPTIMISM_SEPOLIA","ARBITRUM_ONE","ARBITRUM_GOERLI","ARBITRUM_SEPOLIA","POLYGON","POLYGON_MUMBAI","GOERLI","SEPOLIA","CELO_ALFAJORES","CELO","BNB","AVALANCHE","BASE","BASE_GOERLI","ZORA","ZORA_SEPOLIA","ROOTSTOCK","BLAST","DEFAULT_NETWORKS","constructSameAddressMap","address","additionalNetworks","concat","reduce","memo","chainId","TradeType","Rounding","UNI_ADDRESSES","V2_FACTORY_ADDRESSES","V2_ROUTER_ADDRESSES","DEFAULT_ADDRESSES","v3CoreFactoryAddress","multicallAddress","quoterAddress","v3MigratorAddress","nonfungiblePositionManagerAddress","MAINNET_ADDRESSES","v1MixedRouteQuoterAddress","GOERLI_ADDRESSES","OPTIMISM_ADDRESSES","ARBITRUM_ONE_ADDRESSES","tickLensAddress","POLYGON_ADDRESSES","CELO_ADDRESSES","CHAIN_TO_ADDRESSES_MAP","swapRouter02Address","V3_CORE_FACTORY_ADDRESSES","V3_MIGRATOR_ADDRESSES","MULTICALL_ADDRESSES","GOVERNANCE_ALPHA_V0_ADDRESSES","GOVERNANCE_ALPHA_V1_ADDRESSES","GOVERNANCE_BRAVO_ADDRESSES","TIMELOCK_ADDRESSES","MERKLE_DISTRIBUTOR_ADDRESS","ARGENT_WALLET_DETECTOR_ADDRESS","QUOTER_ADDRESSES","NONFUNGIBLE_POSITION_MANAGER_ADDRESSES","ENS_REGISTRAR_ADDRESSES","SOCKS_CONTROLLER_ADDRESSES","TICK_LENS_ADDRESSES","MIXED_ROUTE_QUOTER_V1_ADDRESSES","MaxUint256","JSBI","BigInt","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","Error","invert","this","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","invariant","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","lessThanOrEqual","_this","decimalScale","exponentiate","decimals","fromRawAmount","rawAmount","fromFractionalAmount","equals","added","subtracted","multiplied","divided","_Fraction","toExact","isToken","wrapped","ONE_HUNDRED","toPercent","fraction","Percent","Price","baseCurrency","quoteCurrency","args","length","result","quoteAmount","baseAmount","scalar","quote","currencyAmount","adjustedForDecimals","BaseCurrency","symbol","name","isSafeInteger","NativeCurrency","validateAndParseAddress","getAddress","error","startsWith0xLen42HexRegex","Token","bypassChecksum","buyFeeBps","sellFeeBps","test","checkValidAddress","gte","BigNumber","from","toLowerCase","sortsBefore","WETH9","Ether","_NativeCurrency","onChain","_etherCache","isNative","weth9","MAX_SAFE_INTEGER","ZERO","ONE","TWO","includes","midPrice","inputAmount","outputAmount","quotedOutputAmount","priceImpact","items","maxSize","comparator","push","isFull","lo","hi","mid","splice","pop","value","greaterThanOrEqual","Math","floor","sqrt","toNumber","z","x"],"mappings":"8IAAYA,+tBAAAA,EAAAA,kBAAAA,4CAEVA,uBACAA,gCACAA,4BACAA,2CACAA,kDACAA,uCACAA,8CACAA,gDACAA,2BACAA,2CACAA,uBACAA,2CACAA,yBACAA,8BACAA,kBACAA,iCACAA,qCACAA,sBACAA,yBACAA,2CACAA,8BACAA,6BA4BUC,kBAzBCC,EAAmB,CAC9BF,gBAAQG,QACRH,gBAAQI,SACRJ,gBAAQK,gBACRL,gBAAQM,iBACRN,gBAAQO,aACRP,gBAAQQ,gBACRR,gBAAQS,iBACRT,gBAAQU,QACRV,gBAAQW,eACRX,gBAAQY,OACRZ,gBAAQa,QACRb,gBAAQc,eACRd,gBAAQe,KACRf,gBAAQgB,IACRhB,gBAAQiB,UACRjB,gBAAQkB,KACRlB,gBAAQmB,YACRnB,gBAAQoB,KACRpB,gBAAQqB,aACRrB,gBAAQsB,UACRtB,gBAAQuB,QAIEtB,EAAAA,6BAAAA,4CAGVA,gBACAA,cACAA,gBACAA,kBACAA,YACAA,cACAA,mBC7CF,IAAMuB,EAAmB,CAACxB,gBAAQG,QAASH,gBAAQY,OAAQZ,gBAAQa,SAEnE,SAASY,EAAwBC,EAAiBC,mBAAAA,IAAAA,EAAgC,IACzEH,EAAiBI,OAAOD,GAAoBE,QAAmB,SAACC,EAAMC,UAC3ED,EAAKC,GAAWL,EACTI,IACN,QChBOE,EAKAC,EDcCC,EAA4BT,EAAwB,6CAA8C,CAC7GzB,gBAAQI,SACRJ,gBAAQO,aACRP,gBAAQU,QACRV,gBAAQW,eACRX,gBAAQa,UASGsB,UACVnC,gBAAQG,SAAU,+CAClBH,gBAAQY,QAAS,+CACjBZ,gBAAQa,SAAU,+CAClBb,gBAAQI,UAAW,+CACnBJ,gBAAQO,cAAe,+CACvBP,gBAAQiB,WAAY,+CACpBjB,gBAAQkB,MAAO,+CACflB,gBAAQgB,KAAM,+CACdhB,gBAAQU,SAAU,+CAClBV,gBAAQe,MAAO,+CACff,gBAAQuB,OAAQ,gDAMNa,UACVpC,gBAAQG,SAAU,+CAClBH,gBAAQY,QAAS,+CACjBZ,gBAAQO,cAAe,+CACvBP,gBAAQI,UAAW,+CACnBJ,gBAAQkB,MAAO,+CACflB,gBAAQiB,WAAY,+CACpBjB,gBAAQgB,KAAM,+CACdhB,gBAAQU,SAAU,+CAClBV,gBAAQuB,OAAQ,gDAIbc,EAAoC,CACxCC,qBAAsB,6CACtBC,iBAAkB,6CAClBC,cAAe,6CACfC,kBAAmB,6CACnBC,kCAAmC,8CAE/BC,OACDN,GACHO,0BAA2B,+CAEvBC,OACDR,GACHO,0BAA2B,+CAGvBE,EAAqCT,EACrCU,OACDV,GACHE,iBAAkB,6CAClBS,gBAAiB,+CAEbC,EAAoCZ,EAGpCa,EAAiC,CACrCZ,qBAAsB,6CACtBC,iBAAkB,6CAClBC,cAAe,6CACfC,kBAAmB,6CACnBC,kCAAmC,6CACnCM,gBAAiB,8CA0ING,UACVnD,gBAAQG,SAAUwC,IAClB3C,gBAAQI,UAAW0C,IACnB9C,gBAAQO,cAAewC,IACvB/C,gBAAQU,SAAUuC,IAClBjD,gBAAQW,gBAAiBsC,IACzBjD,gBAAQY,QAASiC,IACjB7C,gBAAQe,MAAOmC,IACflD,gBAAQc,gBAAiBoC,IACzBlD,gBAAQgB,KA/I2B,CACpCsB,qBAAsB,6CACtBC,iBAAkB,6CAClBC,cAAe,6CACfC,kBAAmB,6CACnBC,kCAAmC,6CACnCM,gBAAiB,6CACjBI,oBAAqB,gDAyIpBpD,gBAAQK,iBArIuC,CAChDiC,qBAAsB,6CACtBC,iBAAkB,6CAClBC,cAAe,6CACfC,kBAAmB,6CACnBC,kCAAmC,6CACnCM,gBAAiB,gDAgIhBhD,gBAAQM,kBA5HwC,CACjDgC,qBAAsB,6CACtBC,iBAAkB,6CAClBC,cAAe,6CACfC,kBAAmB,6CACnBC,kCAAmC,6CACnCM,gBAAiB,6CACjBI,oBAAqB,gDAsHpBpD,gBAAQQ,iBAlHuC,CAChD8B,qBAAsB,6CACtBC,iBAAkB,6CAClBC,cAAe,6CACfC,kBAAmB,6CACnBC,kCAAmC,6CACnCM,gBAAiB,gDA6GhBhD,gBAAQS,kBAzGwC,CACjD6B,qBAAsB,6CACtBC,iBAAkB,6CAClBC,cAAe,6CACfC,kBAAmB,6CACnBC,kCAAmC,6CACnCM,gBAAiB,6CACjBI,oBAAqB,gDAmGpBpD,gBAAQa,SA/F+B,CACxCyB,qBAAsB,6CACtBC,iBAAkB,6CAClBC,cAAe,6CACfC,kBAAmB,6CACnBC,kCAAmC,6CACnCM,gBAAiB,6CACjBI,oBAAqB,gDAyFpBpD,gBAAQiB,WArFiC,CAC1CqB,qBAAsB,6CACtBC,iBAAkB,6CAClBC,cAAe,6CACfC,kBAAmB,6CACnBC,kCAAmC,6CACnCM,gBAAiB,6CACjBI,oBAAqB,gDA+EpBpD,gBAAQkB,MA5E4B,CACrCoB,qBAAsB,6CACtBC,iBAAkB,6CAClBC,cAAe,6CACfC,kBAAmB,6CACnBC,kCAAmC,6CACnCM,gBAAiB,6CACjBI,oBAAqB,gDAsEpBpD,gBAAQmB,aAlEmC,CAC5CmB,qBAAsB,6CACtBC,iBAAkB,6CAClBC,cAAe,6CACfC,kBAAmB,6CACnBC,kCAAmC,6CACnCM,gBAAiB,6CACjBI,oBAAqB,gDA4DpBpD,gBAAQoB,MAzD4B,CACrCkB,qBAAsB,6CACtBC,iBAAkB,6CAClBC,cAAe,6CACfC,kBAAmB,6CACnBC,kCAAmC,6CACnCM,gBAAiB,6CACjBI,oBAAqB,gDAmDpBpD,gBAAQqB,cAhDoC,CAC7CiB,qBAAsB,6CACtBC,iBAAkB,6CAClBC,cAAe,6CACfC,kBAAmB,6CACnBC,kCAAmC,6CACnCM,gBAAiB,gDA2ChBhD,gBAAQsB,WAxCiC,CAC1CgB,qBAAsB,6CACtBC,iBAAkB,6CAClBC,cAAe,6CACfC,kBAAmB,6CACnBC,kCAAmC,6CACnCM,gBAAiB,6CACjBI,oBAAqB,gDAkCpBpD,gBAAQuB,OA/B6B,CACtCe,qBAAsB,6CACtBC,iBAAkB,6CAClBC,cAAe,6CACfC,kBAAmB,6CACnBC,kCAAmC,6CACnCM,gBAAiB,6CACjBI,oBAAqB,iDA4BVC,OACRnD,EAAiB2B,QAAmB,SAACC,EAAMC,UAC5CD,EAAKC,GAAWoB,EAAuBpB,GAASO,qBACzCR,IACN,KAGQwB,OACRpD,EAAiB2B,QAAmB,SAACC,EAAMC,OACtCU,EAAoBU,EAAuBpB,GAASU,yBACtDA,IACFX,EAAKC,GAAWU,GAEXX,IACN,KAGQyB,OACRrD,EAAiB2B,QAAmB,SAACC,EAAMC,UAC5CD,EAAKC,GAAWoB,EAAuBpB,GAASQ,iBACzCT,IACN,KAMQ0B,EAA4C/B,EACvD,8CAKWgC,UACVzD,gBAAQG,SAAU,gDAKRuD,UACV1D,gBAAQG,SAAU,gDAGRwD,EAAiClC,EAAwB,8CAEzDmC,UACV5D,gBAAQG,SAAU,gDAGR0D,UACV7D,gBAAQG,SAAU,gDAGR2D,OACR5D,EAAiB2B,QAAmB,SAACC,EAAMC,UAC5CD,EAAKC,GAAWoB,EAAuBpB,GAASS,cACzCV,IACN,KAGQiC,OACR7D,EAAiB2B,QAAmB,SAACC,EAAMC,OACtCW,EAAoCS,EAAuBpB,GAASW,yCACtEA,IACFZ,EAAKC,GAAWW,GAEXZ,IACN,KAGQkC,OACRvC,EAAwB,+CAGhBwC,UACVjE,gBAAQG,SAAU,gDAGR+D,OACRhE,EAAiB2B,QAAmB,SAACC,EAAMC,OACtCiB,EAAkBG,EAAuBpB,GAASiB,uBACpDA,IACFlB,EAAKC,GAAWiB,GAEXlB,IACN,KAGQqC,EAA8CjE,EAAiB2B,QAAmB,SAACC,EAAMC,OAC9Fa,EAA4BO,EAAuBpB,GAASa,iCAC9DA,IACFd,EAAKC,GAAWa,GAEXd,IACN,KC/VSE,EAAAA,oBAAAA,sDAEVA,oCAGUC,EAAAA,mBAAAA,mDAEVA,qCACAA,2BAGF,SAAamC,GAAaC,EAAKC,OAAO,sECRhCC,GAAUC,EAASC,GACnBC,GAAMF,EAASG,GAEfC,WACH3C,iBAAS4C,YAAaN,GAAQM,aAC9B5C,iBAAS6C,eAAgBP,GAAQO,gBACjC7C,iBAAS8C,UAAWR,GAAQQ,YAGzBC,YACH/C,iBAAS4C,iBACT5C,iBAAS6C,oBACT7C,iBAAS8C,gBAGCE,yBAIQC,EAAsBC,YAAAA,IAAAA,EAAyBd,EAAKC,OAAO,SACvEY,UAAYb,EAAKC,OAAOY,QACxBC,YAAcd,EAAKC,OAAOa,KAGlBC,iBAAP,SAAwBC,MAC1BA,aAAuBhB,GAA+B,iBAAhBgB,GAAmD,iBAAhBA,EAC3E,OAAO,IAAIJ,EAASI,MAElB,cAAeA,GAAe,gBAAiBA,EAAa,OAAOA,QACjE,IAAIC,MAAM,wDAaXC,OAAA,kBACE,IAAIN,EAASO,KAAKL,YAAaK,KAAKN,cAGtCO,IAAA,SAAIC,OACHC,EAAcV,EAASG,iBAAiBM,UAC1CrB,EAAKuB,MAAMJ,KAAKL,YAAaQ,EAAYR,aACpC,IAAIF,EAASZ,EAAKoB,IAAID,KAAKN,UAAWS,EAAYT,WAAYM,KAAKL,aAErE,IAAIF,EACTZ,EAAKoB,IACHpB,EAAKwB,SAASL,KAAKN,UAAWS,EAAYR,aAC1Cd,EAAKwB,SAASF,EAAYT,UAAWM,KAAKL,cAE5Cd,EAAKwB,SAASL,KAAKL,YAAaQ,EAAYR,iBAIzCW,SAAA,SAASJ,OACRC,EAAcV,EAASG,iBAAiBM,UAC1CrB,EAAKuB,MAAMJ,KAAKL,YAAaQ,EAAYR,aACpC,IAAIF,EAASZ,EAAKyB,SAASN,KAAKN,UAAWS,EAAYT,WAAYM,KAAKL,aAE1E,IAAIF,EACTZ,EAAKyB,SACHzB,EAAKwB,SAASL,KAAKN,UAAWS,EAAYR,aAC1Cd,EAAKwB,SAASF,EAAYT,UAAWM,KAAKL,cAE5Cd,EAAKwB,SAASL,KAAKL,YAAaQ,EAAYR,iBAIzCY,SAAA,SAASL,OACRC,EAAcV,EAASG,iBAAiBM,UACvCrB,EAAK0B,SACV1B,EAAKwB,SAASL,KAAKN,UAAWS,EAAYR,aAC1Cd,EAAKwB,SAASF,EAAYT,UAAWM,KAAKL,iBAIvCa,QAAA,SAAQN,OACPC,EAAcV,EAASG,iBAAiBM,UACvCrB,EAAKuB,MACVvB,EAAKwB,SAASL,KAAKN,UAAWS,EAAYR,aAC1Cd,EAAKwB,SAASF,EAAYT,UAAWM,KAAKL,iBAIvCc,YAAA,SAAYP,OACXC,EAAcV,EAASG,iBAAiBM,UACvCrB,EAAK4B,YACV5B,EAAKwB,SAASL,KAAKN,UAAWS,EAAYR,aAC1Cd,EAAKwB,SAASF,EAAYT,UAAWM,KAAKL,iBAIvCU,SAAA,SAASH,OACRC,EAAcV,EAASG,iBAAiBM,UACvC,IAAIT,EACTZ,EAAKwB,SAASL,KAAKN,UAAWS,EAAYT,WAC1Cb,EAAKwB,SAASL,KAAKL,YAAaQ,EAAYR,iBAIzCe,OAAA,SAAOR,OACNC,EAAcV,EAASG,iBAAiBM,UACvC,IAAIT,EACTZ,EAAKwB,SAASL,KAAKN,UAAWS,EAAYR,aAC1Cd,EAAKwB,SAASL,KAAKL,YAAaQ,EAAYT,eAIzCiB,cAAA,SACLC,EACAC,EACAC,YADAD,IAAAA,EAAiB,CAAEE,eAAgB,cACnCD,IAAAA,EAAqBrE,iBAAS6C,eAEpB0B,OAAOC,UAAUL,IAA3BM,MACUN,EAAoB,GAA9BM,MAEAnC,GAAQoC,IAAI,CAAEC,UAAWR,EAAoB,EAAGE,SAAU1B,GAAsB0B,SAC1EO,EAAW,IAAItC,GAAQiB,KAAKN,UAAU4B,YACzCC,IAAIvB,KAAKL,YAAY2B,YACrBE,oBAAoBZ,UAChBS,EAASrC,SAASqC,EAASI,gBAAiBZ,MAG9Ca,QAAA,SACLD,EACAZ,EACAC,mBADAD,IAAAA,EAAiB,CAAEE,eAAgB,cACnCD,IAAAA,EAAqBrE,iBAAS6C,eAEpB0B,OAAOC,UAAUQ,IAA3BP,MACUO,GAAiB,GAA3BP,MAEAhC,GAAIyC,GAAKF,EACTvC,GAAI0C,GAAKpC,GAAgBsB,GAClB,IAAI5B,GAAIc,KAAKN,UAAU4B,YAAYC,IAAIvB,KAAKL,YAAY2B,YAAYtC,SAASyC,EAAeZ,+CAzG5FhC,EAAK6B,OAAOV,KAAKN,UAAWM,KAAKL,sDAKjC,IAAIF,EAASZ,EAAKgD,UAAU7B,KAAKN,UAAWM,KAAKL,aAAcK,KAAKL,uDA2GpE,IAAIF,EAASO,KAAKN,UAAWM,KAAKL,sBChJvCT,GAAMF,EAASG,GAER2C,0BA2BWC,EAAarC,EAAsBC,8BACjDD,EAAWC,SACPd,EAAKmD,gBAAgBC,EAAKZ,SAAUzC,KAA9CsC,QACKa,SAAWA,IACXG,aAAerD,EAAKsD,aAAatD,EAAKC,OAAO,IAAKD,EAAKC,OAAOiD,EAASK,sBAtBhEC,cAAP,SAAyCN,EAAaO,UACpD,IAAIR,EAAeC,EAAUO,MASxBC,qBAAP,SACLR,EACArC,EACAC,UAEO,IAAImC,EAAeC,EAAUrC,EAAWC,+BAU1CM,IAAA,SAAIC,GACCF,KAAK+B,SAASS,OAAOtC,EAAM6B,WAArCb,UACMuB,cAAcxC,cAAIC,UACjB4B,EAAeS,qBAAqBvC,KAAK+B,SAAUU,EAAM/C,UAAW+C,EAAM9C,gBAG5EW,SAAA,SAASJ,GACJF,KAAK+B,SAASS,OAAOtC,EAAM6B,WAArCb,UACMwB,cAAmBpC,mBAASJ,UAC3B4B,EAAeS,qBAAqBvC,KAAK+B,SAAUW,EAAWhD,UAAWgD,EAAW/C,gBAGtFU,SAAA,SAASH,OACRyC,cAAmBtC,mBAASH,UAC3B4B,EAAeS,qBAAqBvC,KAAK+B,SAAUY,EAAWjD,UAAWiD,EAAWhD,gBAGtFe,OAAA,SAAOR,OACN0C,cAAgBlC,iBAAOR,UACtB4B,EAAeS,qBAAqBvC,KAAK+B,SAAUa,EAAQlD,UAAWkD,EAAQjD,gBAGhFgB,cAAA,SACLC,EACAC,EACAC,mBAFAF,IAAAA,EAA4B,YAE5BE,IAAAA,EAAqBrE,iBAAS4C,YAEvBwD,YAAMnC,iBAAOV,KAAKkC,cAAcvB,cAAcC,EAAmBC,EAAQC,MAG3EY,QAAA,SACLD,EACAZ,EACAC,mBAFAW,IAAAA,EAAwBzB,KAAK+B,SAASK,mBAEtCtB,IAAAA,EAAqBrE,iBAAS4C,YAEpBoC,GAAiBzB,KAAK+B,SAASK,UAAzClB,MACO2B,YAAMnC,iBAAOV,KAAKkC,cAAcR,QAAQD,EAAeZ,EAAQC,MAGjEgC,QAAA,SAAQjC,mBAAAA,IAAAA,EAAiB,CAAEE,eAAgB,KAChD7B,GAAIyC,GAAK3B,KAAK+B,SAASK,SAChB,IAAIlD,GAAIc,KAAKqB,SAASC,YAAYC,IAAIvB,KAAKkC,aAAaZ,YAAYtC,SAAS6B,8CAIhFb,KAAK+B,SAASgB,QAAgB/C,KAC3B8B,EAAeS,qBAAqBvC,KAAK+B,SAASiB,QAAShD,KAAKN,UAAWM,KAAKL,oBAhFnCF,ICRlDwD,GAAc,IAAIxD,GAASZ,EAAKC,OAAO,MAM7C,SAASoE,GAAUC,UACV,IAAIC,GAAQD,EAASzD,UAAWyD,EAASxD,iBAGrCyD,qFAIuB,sCAElCnD,IAAA,SAAIC,UACKgD,eAAgBjD,cAAIC,OAG7BI,SAAA,SAASJ,UACAgD,eAAgB5C,mBAASJ,OAGlCG,SAAA,SAASH,UACAgD,eAAgB7C,mBAASH,OAGlCQ,OAAA,SAAOR,UACEgD,eAAgBxC,iBAAOR,OAGzBS,cAAA,SAAcC,EAA+BC,EAAiBC,mBAAhDF,IAAAA,EAA4B,GACxCiC,YAAMxC,mBAAS4C,IAAatC,cAAcC,EAAmBC,EAAQC,MAGvEY,QAAA,SAAQD,EAA2BZ,EAAiBC,mBAA5CW,IAAAA,EAAwB,GAC9BoB,YAAMxC,mBAAS4C,IAAavB,QAAQD,EAAeZ,EAAQC,OA3BzCrB,ICNhB4D,sCAcLC,EAAqBC,EAAuB5D,EAAwBD,qBAJrE8D,2BAAAA,qBAMiB,IAAhBA,EAAKC,OACLH,EAAuDE,KAAzCD,EAAyCC,KAA1B7D,EAA0B6D,KAAb9D,EAAa8D,SACpD,KACCE,EAASF,EAAK,GAAGG,YAAYjD,OAAO8C,EAAK,GAAGI,cACO,CACvDJ,EAAK,GAAGI,WAAW7B,SACnByB,EAAK,GAAGG,YAAY5B,SACpB2B,EAAO/D,YACP+D,EAAOhE,WAJP4D,OAAcC,OAAe5D,OAAaD,4BAOxCA,EAAWC,UAEZ2D,aAAeA,IACfC,cAAgBA,IAChBM,OAAS,IAAIpE,GAChBZ,EAAKsD,aAAatD,EAAKC,OAAO,IAAKD,EAAKC,OAAOwE,EAAalB,WAC5DvD,EAAKsD,aAAatD,EAAKC,OAAO,IAAKD,EAAKC,OAAOyE,EAAcnB,gDAO1DrC,OAAA,kBACE,IAAIsD,EAAMrD,KAAKuD,cAAevD,KAAKsD,aAActD,KAAKN,UAAWM,KAAKL,gBAOxEU,SAAA,SAAuCH,GAClCF,KAAKuD,cAAcf,OAAOtC,EAAMoD,eAA1CpC,UACMiC,cAAiB9C,mBAASH,UACzB,IAAImD,EAAMrD,KAAKsD,aAAcpD,EAAMqD,cAAeJ,EAASxD,YAAawD,EAASzD,cAOnFoE,MAAA,SAAMC,GACDA,EAAehC,SAASS,OAAOxC,KAAKsD,eAA9CpC,UACMwC,cAAerD,mBAAS0D,UACvBjC,GAAeS,qBAAqBvC,KAAKuD,cAAeG,EAAOhE,UAAWgE,EAAO/D,gBAWnFgB,cAAA,SAAcC,EAA+BC,EAAiBC,mBAAhDF,IAAAA,EAA4B,GACxCZ,KAAKgE,oBAAoBrD,cAAcC,EAAmBC,EAAQC,MAGpEY,QAAA,SAAQD,EAA2BZ,EAAiBC,mBAA5CW,IAAAA,EAAwB,GAC9BzB,KAAKgE,oBAAoBtC,QAAQD,EAAeZ,EAAQC,sEARlDT,mBAASL,KAAK6D,eArE6CpE,ICDtDwE,GAkCpB,SAAsB1H,EAAiB6F,EAAkB8B,EAAiBC,GAC9DnD,OAAOoD,cAAc7H,IAA/B2E,MACUkB,GAAY,GAAKA,EAAW,KAAOpB,OAAOC,UAAUmB,IAA9DlB,WAEK3E,QAAUA,OACV6F,SAAWA,OACX8B,OAASA,OACTC,KAAOA,GC3CME,oFACa,aACA,qBAFUJ,aCC7BK,GAAwBpI,cAE7BqI,aAAWrI,GAClB,MAAOsI,SACD,IAAI1E,MAAS5D,+BAKvB,OAAMuI,GAA4B,sBCNrBC,0BA4BTnI,EACAL,EACAkG,EACA8B,EACAC,EACAQ,EACAC,EACAC,8BAEMtI,EAAS6F,EAAU8B,EAAQC,oBApCD,aACF,IAqCvBjI,QADHyI,WD1B0BzI,MAC5BuI,GAA0BK,KAAK5I,UAC1BA,QAGH,IAAI4D,MAAS5D,8BCsBA6I,CAAkB7I,GAElBoI,GAAwBpI,GAErC0I,IACQA,EAAUI,IAAIC,YAAUC,KAAK,KAAvChE,OAEE2D,IACQA,EAAWG,IAAIC,YAAUC,KAAK,KAAxChE,SAEG0D,UAAYA,IACZC,WAAaA,sCAObrC,OAAA,SAAOtC,UACLA,EAAM6C,SAAW/C,KAAKzD,UAAY2D,EAAM3D,SAAWyD,KAAK9D,QAAQiJ,gBAAkBjF,EAAMhE,QAAQiJ,iBASlGC,YAAA,SAAYlF,UACPF,KAAKzD,UAAY2D,EAAM3D,SAAjC2E,MACUlB,KAAK9D,QAAQiJ,gBAAkBjF,EAAMhE,QAAQiJ,eAAvDjE,MACOlB,KAAK9D,QAAQiJ,cAAgBjF,EAAMhE,QAAQiJ,yDAO3CnF,YA7EgBiE,ICJdoB,YACV,GAAI,IAAIX,GAAM,EAAG,6CAA8C,GAAI,OAAQ,oBAC3E,GAAI,IAAIA,GAAM,EAAG,6CAA8C,GAAI,OAAQ,oBAC3E,GAAI,IAAIA,GAAM,EAAG,6CAA8C,GAAI,OAAQ,oBAC3E,GAAI,IAAIA,GAAM,EAAG,6CAA8C,GAAI,OAAQ,oBAC3E,IAAK,IAAIA,GAAM,GAAI,6CAA8C,GAAI,OAAQ,oBAE7E,IAAK,IAAIA,GAAM,GAAI,6CAA8C,GAAI,OAAQ,oBAC7E,IAAK,IAAIA,GAAM,GAAI,6CAA8C,GAAI,OAAQ,oBAC7E,UAAW,IAAIA,GAAM,SAAU,6CAA8C,GAAI,OAAQ,oBAEzF,OAAQ,IAAIA,GAAM,MAAO,6CAA8C,GAAI,OAAQ,oBACnF,QAAS,IAAIA,GAAM,OAAQ,6CAA8C,GAAI,OAAQ,oBACrF,QAAS,IAAIA,GAAM,OAAQ,6CAA8C,GAAI,OAAQ,oBAErF,MAAO,IAAIA,GAAM,KAAM,6CAA8C,GAAI,OAAQ,oBAEjF,IAAK,IAAIA,GAAM,GAAI,6CAA8C,GAAI,OAAQ,kBAC7E,KAAM,IAAIA,GAAM,IAAK,6CAA8C,GAAI,SAAU,oBACjF,OAAQ,IAAIA,GAAM,MAAO,6CAA8C,GAAI,QAAS,oBCf1EY,0BACW/I,UACpBgJ,YAAMhJ,EAAS,GAAI,MAAO,+BAWdiJ,QAAP,SAAejJ,yBACbyD,KAAKyF,YAAYlJ,MAAayD,KAAKyF,YAAYlJ,GAAW,IAAI+I,EAAM/I,gBAGtEiG,OAAA,SAAOtC,UACLA,EAAMwF,UAAYxF,EAAM3D,UAAYyD,KAAKzD,gDAZ1CoJ,EAAQN,GAAMrF,KAAKzD,gBACboJ,GAAZzE,MACOyE,SARgBtB,IAWViB,eAA4C,OCjBhDM,GAAmB/G,EAAKC,OAAOkC,OAAO4E,kBAE7CC,GAAOhH,EAAKC,OAAO,GACnBgH,GAAMjH,EAAKC,OAAO,GAClBiH,GAAMlH,EAAKC,OAAO,ipBZ+VgB,SAACvC,gBACnC7B,EAAiBsL,SAASzJ,YAErBoB,EADIpB,GACuBqB,uBAAuB,6CAEpD,0HA3UwC,gGAKf,sGAiBD,2La9CjC,SACEqI,EACAC,EACAC,OAEMC,EAAqBH,EAASnC,MAAMoC,GAEpCG,EAAcD,EAAmB9F,SAAS6F,GAAczF,OAAO0F,UAC9D,IAAIhD,GAAQiD,EAAY3G,UAAW2G,EAAY1G,mCCZxD,SAAgC2G,EAAYrG,EAAQsG,EAAiBC,MACzDD,EAAU,GAApBrF,MAEUoF,EAAM7C,QAAU8C,GAA1BrF,MAGqB,IAAjBoF,EAAM7C,cACR6C,EAAMG,KAAKxG,GACJ,SAEDyG,EAASJ,EAAM7C,SAAW8C,KAE5BG,GAAUF,EAAWF,EAAMA,EAAM7C,OAAS,GAAIxD,IAAQ,SACjDA,UAGL0G,EAAK,EACPC,EAAKN,EAAM7C,OAENkD,EAAKC,GAAI,KACRC,EAAOF,EAAKC,IAAQ,EACtBJ,EAAWF,EAAMO,GAAM5G,IAAQ,EACjC0G,EAAKE,EAAM,EAEXD,EAAKC,SAGTP,EAAMQ,OAAOH,EAAI,EAAG1G,GACbyG,EAASJ,EAAMS,MAAS,4BFnBdC,MACTnI,EAAKoI,mBAAmBD,EAAOnB,KAAzC3E,MAGIrC,EAAK0B,SAASyG,EAAOpB,WAChB/G,EAAKC,OAAOoI,KAAKC,MAAMD,KAAKE,KAAKvI,EAAKwI,SAASL,UAGpDM,EACAC,MACJD,EAAIN,EACJO,EAAI1I,EAAKoB,IAAIpB,EAAK6B,OAAOsG,EAAOjB,IAAMD,IAC/BjH,EAAK0B,SAASgH,EAAGD,IACtBA,EAAIC,EACJA,EAAI1I,EAAK6B,OAAO7B,EAAKoB,IAAIpB,EAAK6B,OAAOsG,EAAOO,GAAIA,GAAIxB,WAE/CuB"}
\ No newline at end of file
+{"version":3,"file":"sdk-core.cjs.production.min.js","sources":["../src/chains.ts","../src/addresses.ts","../src/constants.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/price.ts","../src/entities/baseCurrency.ts","../src/entities/nativeCurrency.ts","../src/utils/validateAndParseAddress.ts","../src/entities/token.ts","../src/entities/weth9.ts","../src/entities/ether.ts","../src/utils/sqrt.ts","../src/utils/computePriceImpact.ts","../src/utils/sortedInsert.ts"],"sourcesContent":["export enum ChainId {\n  MAINNET = 1,\n  GOERLI = 5,\n  SEPOLIA = 11155111,\n  OPTIMISM = 10,\n  OPTIMISM_GOERLI = 420,\n  OPTIMISM_SEPOLIA = 11155420,\n  ARBITRUM_ONE = 42161,\n  ARBITRUM_GOERLI = 421613,\n  ARBITRUM_SEPOLIA = 421614,\n  POLYGON = 137,\n  POLYGON_MUMBAI = 80001,\n  CELO = 42220,\n  CELO_ALFAJORES = 44787,\n  GNOSIS = 100,\n  MOONBEAM = 1284,\n  BNB = 56,\n  AVALANCHE = 43114,\n  BASE_GOERLI = 84531,\n  BASE = 8453,\n  ZORA = 7777777,\n  ZORA_SEPOLIA = 999999999,\n  ROOTSTOCK = 30,\n  BLAST = 81457\n}\n\nexport const SUPPORTED_CHAINS = [\n  ChainId.MAINNET,\n  ChainId.OPTIMISM,\n  ChainId.OPTIMISM_GOERLI,\n  ChainId.OPTIMISM_SEPOLIA,\n  ChainId.ARBITRUM_ONE,\n  ChainId.ARBITRUM_GOERLI,\n  ChainId.ARBITRUM_SEPOLIA,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.GOERLI,\n  ChainId.SEPOLIA,\n  ChainId.CELO_ALFAJORES,\n  ChainId.CELO,\n  ChainId.BNB,\n  ChainId.AVALANCHE,\n  ChainId.BASE,\n  ChainId.BASE_GOERLI,\n  ChainId.ZORA,\n  ChainId.ZORA_SEPOLIA,\n  ChainId.ROOTSTOCK,\n  ChainId.BLAST\n] as const\nexport type SupportedChainsType = typeof SUPPORTED_CHAINS[number]\n\nexport enum NativeCurrencyName {\n  // Strings match input for CLI\n  ETHER = 'ETH',\n  MATIC = 'MATIC',\n  CELO = 'CELO',\n  GNOSIS = 'XDAI',\n  MOONBEAM = 'GLMR',\n  BNB = 'BNB',\n  AVAX = 'AVAX',\n  ROOTSTOCK = 'RBTC'\n}\n","import { ChainId, SUPPORTED_CHAINS, SupportedChainsType } from './chains'\n\ntype AddressMap = { [chainId: number]: string }\n\ntype ChainAddresses = {\n  v3CoreFactoryAddress: string\n  multicallAddress: string\n  quoterAddress: string\n  v3MigratorAddress?: string\n  nonfungiblePositionManagerAddress?: string\n  tickLensAddress?: string\n  swapRouter02Address?: string\n  v1MixedRouteQuoterAddress?: string\n}\n\nconst DEFAULT_NETWORKS = [ChainId.MAINNET, ChainId.GOERLI, ChainId.SEPOLIA]\n\nfunction constructSameAddressMap(address: string, additionalNetworks: ChainId[] = []): AddressMap {\n  return DEFAULT_NETWORKS.concat(additionalNetworks).reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = address\n    return memo\n  }, {})\n}\n\nexport const UNI_ADDRESSES: AddressMap = constructSameAddressMap('0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984', [\n  ChainId.OPTIMISM,\n  ChainId.ARBITRUM_ONE,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.SEPOLIA\n])\n\nexport const UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS = '0x8B799381ac40b838BBA4131ffB26197C432AFe78'\n\n/**\n * @deprecated use V2_FACTORY_ADDRESSES instead\n */\nexport const V2_FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\nexport const V2_FACTORY_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n  [ChainId.GOERLI]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n  [ChainId.SEPOLIA]: '0xB7f907f7A9eBC822a80BD25E224be42Ce0A698A0',\n  [ChainId.OPTIMISM]: '0x0c3c1c532F1e39EdF36BE9Fe0bE1410313E074Bf',\n  [ChainId.ARBITRUM_ONE]: '0xf1D7CC64Fb4452F05c498126312eBE29f30Fbcf9',\n  [ChainId.AVALANCHE]: '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C',\n  [ChainId.BASE]: '0x8909dc15e40173ff4699343b6eb8132c65e18ec6',\n  [ChainId.BNB]: '0x8909Dc15e40173Ff4699343b6eB8132c65e18eC6',\n  [ChainId.POLYGON]: '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C',\n  [ChainId.CELO]: '0x79a530c8e2fA8748B7B40dd3629C0520c2cCf03f',\n  [ChainId.BLAST]: '0x5C346464d33F90bABaf70dB6388507CC889C1070'\n}\n/**\n * @deprecated use V2_ROUTER_ADDRESSES instead\n */\nexport const V2_ROUTER_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D'\nexport const V2_ROUTER_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\n  [ChainId.GOERLI]: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\n  [ChainId.ARBITRUM_ONE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.OPTIMISM]: '0x4a7b5da61326a6379179b40d00f57e5bbdc962c2',\n  [ChainId.BASE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.AVALANCHE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.BNB]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.POLYGON]: '0xedf6066a2b290c185783862c7f4776a2c8077ad1',\n  [ChainId.BLAST]: '0xBB66Eb1c5e875933D44DAe661dbD80e5D9B03035'\n}\n\n// Networks that share most of the same addresses i.e. Mainnet, Goerli, Optimism, Arbitrum, Polygon\nconst DEFAULT_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x1F98431c8aD98523631AE4a59f267346ea31F984',\n  multicallAddress: '0x1F98415757620B543A52E61c46B32eB19261F984',\n  quoterAddress: '0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6',\n  v3MigratorAddress: '0xA5644E29708357803b5A882D272c41cC0dF92B34',\n  nonfungiblePositionManagerAddress: '0xC36442b4a4522E871399CD717aBDD847Ab11FE88'\n}\nconst MAINNET_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  v1MixedRouteQuoterAddress: '0x84E44095eeBfEC7793Cd7d5b57B7e401D7f1cA2E'\n}\nconst GOERLI_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  v1MixedRouteQuoterAddress: '0xBa60b6e6fF25488308789E6e0A65D838be34194e'\n}\n\nconst OPTIMISM_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\nconst ARBITRUM_ONE_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  multicallAddress: '0xadF885960B47eA2CD9B55E6DAc6B42b7Cb2806dB',\n  tickLensAddress: '0xbfd8137f7d1516D3ea5cA83523914859ec47F573'\n}\nconst POLYGON_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\n\n// celo v3 addresses\nconst CELO_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xAfE208a311B21f13EF87E33A90049fC17A7acDEc',\n  multicallAddress: '0x633987602DE5C4F337e3DbF265303A1080324204',\n  quoterAddress: '0x82825d0554fA07f7FC52Ab63c961F330fdEFa8E8',\n  v3MigratorAddress: '0x3cFd4d48EDfDCC53D3f173F596f621064614C582',\n  nonfungiblePositionManagerAddress: '0x3d79EdAaBC0EaB6F08ED885C05Fc0B014290D95A',\n  tickLensAddress: '0x5f115D9113F88e0a0Db1b5033D90D4a9690AcD3D'\n}\n\n// BNB v3 addresses\nconst BNB_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7',\n  multicallAddress: '0x963Df249eD09c358A4819E39d9Cd5736c3087184',\n  quoterAddress: '0x78D78E420Da98ad378D7799bE8f4AF69033EB077',\n  v3MigratorAddress: '0x32681814957e0C13117ddc0c2aba232b5c9e760f',\n  nonfungiblePositionManagerAddress: '0x7b8A01B39D58278b5DE7e48c8449c9f4F5170613',\n  tickLensAddress: '0xD9270014D396281579760619CCf4c3af0501A47C',\n  swapRouter02Address: '0xB971eF87ede563556b2ED4b1C0b0019111Dd85d2'\n}\n\n// optimism goerli addresses\nconst OPTIMISM_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xB656dA17129e7EB733A557f4EBc57B76CFbB5d10',\n  multicallAddress: '0x07F2D8a2a02251B62af965f22fC4744A5f96BCCd',\n  quoterAddress: '0x9569CbA925c8ca2248772A9A4976A516743A246F',\n  v3MigratorAddress: '0xf6c55fBe84B1C8c3283533c53F51bC32F5C7Aba8',\n  nonfungiblePositionManagerAddress: '0x39Ca85Af2F383190cBf7d7c41ED9202D27426EF6',\n  tickLensAddress: '0xe6140Bd164b63E8BfCfc40D5dF952f83e171758e'\n}\n\n// optimism sepolia addresses\nconst OPTIMISM_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x8CE191193D15ea94e11d327b4c7ad8bbE520f6aF',\n  multicallAddress: '0x80e4e06841bb76AA9735E0448cB8d003C0EF009a',\n  quoterAddress: '0x0FBEa6cf957d95ee9313490050F6A0DA68039404',\n  v3MigratorAddress: '0xE7EcbAAaA54D007A00dbb6c1d2f150066D69dA07',\n  nonfungiblePositionManagerAddress: '0xdA75cEf1C93078e8b736FCA5D5a30adb97C8957d',\n  tickLensAddress: '0xCb7f54747F58F8944973cea5b8f4ac2209BadDC5',\n  swapRouter02Address: '0x94cC0AaC535CCDB3C01d6787D6413C739ae12bc4'\n}\n\n// arbitrum goerli v3 addresses\nconst ARBITRUM_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x4893376342d5D7b3e31d4184c08b265e5aB2A3f6',\n  multicallAddress: '0x8260CB40247290317a4c062F3542622367F206Ee',\n  quoterAddress: '0x1dd92b83591781D0C6d98d07391eea4b9a6008FA',\n  v3MigratorAddress: '0xA815919D2584Ac3F76ea9CB62E6Fd40a43BCe0C3',\n  nonfungiblePositionManagerAddress: '0x622e4726a167799826d1E1D150b076A7725f5D81',\n  tickLensAddress: '0xb52429333da969a0C79a60930a4Bf0020E5D1DE8'\n}\n\n// arbitrum sepolia v3 addresses\nconst ARBITRUM_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x248AB79Bbb9bC29bB72f7Cd42F17e054Fc40188e',\n  multicallAddress: '0x2B718b475e385eD29F56775a66aAB1F5cC6B2A0A',\n  quoterAddress: '0x2779a0CC1c3e0E44D2542EC3e79e3864Ae93Ef0B',\n  v3MigratorAddress: '0x398f43ef2c67B941147157DA1c5a868E906E043D',\n  nonfungiblePositionManagerAddress: '0x6b2937Bde17889EDCf8fbD8dE31C3C2a70Bc4d65',\n  tickLensAddress: '0x0fd18587734e5C2dcE2dccDcC7DD1EC89ba557d9',\n  swapRouter02Address: '0x101F443B4d1b059569D643917553c771E1b9663E'\n}\n\n// sepolia v3 addresses\nconst SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x11BAa8360DD2f9de11EA93501C2022E1260DC02f',\n  multicallAddress: '0x65Dec5354c0Ae5bf432135097c2bC68FA09ee210',\n  quoterAddress: '0xdA7377bE8BA41acA5f24B8C92C99290614d2ABf8',\n  v3MigratorAddress: '0xDf3e6435Cce912384476F1926ED4caca16785d83',\n  nonfungiblePositionManagerAddress: '0x3A525D8737bb0b483AbCCF6b387F1E6764C46DF6',\n  tickLensAddress: '0x45533a7407f33191E9278bc577E53B107A53Da36',\n  swapRouter02Address: '0x1b8DB7D581376e87d76936432411BdF47f9E524D'\n}\n\n// Avalanche v3 addresses\nconst AVALANCHE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x740b1c1de25031C31FF4fC9A62f554A55cdC1baD',\n  multicallAddress: '0x0139141Cd4Ee88dF3Cdb65881D411bAE271Ef0C2',\n  quoterAddress: '0xbe0F5544EC67e9B3b2D979aaA43f18Fd87E6257F',\n  v3MigratorAddress: '0x44f5f1f5E452ea8d29C890E8F6e893fC0f1f0f97',\n  nonfungiblePositionManagerAddress: '0x655C406EBFa14EE2006250925e54ec43AD184f8B',\n  tickLensAddress: '0xEB9fFC8bf81b4fFd11fb6A63a6B0f098c6e21950',\n  swapRouter02Address: '0xbb00FF08d01D300023C629E8fFfFcb65A5a578cE'\n}\n\nconst BASE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x33128a8fC17869897dcE68Ed026d694621f6FDfD',\n  multicallAddress: '0x091e99cb1C49331a94dD62755D168E941AbD0693',\n  quoterAddress: '0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a',\n  v3MigratorAddress: '0x23cF10b1ee3AdfCA73B0eF17C07F7577e7ACd2d7',\n  nonfungiblePositionManagerAddress: '0x03a520b32C04BF3bEEf7BEb72E919cf822Ed34f1',\n  tickLensAddress: '0x0CdeE061c75D43c82520eD998C23ac2991c9ac6d',\n  swapRouter02Address: '0x2626664c2603336E57B271c5C0b26F421741e481'\n}\n\n// Base Goerli v3 addresses\nconst BASE_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x9323c1d6D800ed51Bd7C6B216cfBec678B7d0BC2',\n  multicallAddress: '0xB206027a9E0E13F05eBEFa5D2402Bab3eA716439',\n  quoterAddress: '0xedf539058e28E5937dAef3f69cEd0b25fbE66Ae9',\n  v3MigratorAddress: '0x3efe5d02a04b7351D671Db7008ec6eBA9AD9e3aE',\n  nonfungiblePositionManagerAddress: '0x3c61369ef0D1D2AFa70d8feC2F31C5D6Ce134F30',\n  tickLensAddress: '0x1acB873Ee909D0c98adB18e4474943249F931b92',\n  swapRouter02Address: '0x8357227D4eDc78991Db6FDB9bD6ADE250536dE1d'\n}\n\nconst ZORA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x7145F8aeef1f6510E92164038E1B6F8cB2c42Cbb',\n  multicallAddress: '0xA51c76bEE6746cB487a7e9312E43e2b8f4A37C15',\n  quoterAddress: '0x11867e1b3348F3ce4FcC170BC5af3d23E07E64Df',\n  v3MigratorAddress: '0x048352d8dCF13686982C799da63fA6426a9D0b60',\n  nonfungiblePositionManagerAddress: '0xbC91e8DfA3fF18De43853372A3d7dfe585137D78',\n  tickLensAddress: '0x209AAda09D74Ad3B8D0E92910Eaf85D2357e3044',\n  swapRouter02Address: '0x7De04c96BE5159c3b5CeffC82aa176dc81281557'\n}\n\nconst ZORA_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x4324A677D74764f46f33ED447964252441aA8Db6',\n  multicallAddress: '0xA1E7e3A69671C4494EC59Dbd442de930a93F911A',\n  quoterAddress: '0xC195976fEF0985886E37036E2DF62bF371E12Df0',\n  v3MigratorAddress: '0x65ef259b31bf1d977c37e9434658694267674897',\n  nonfungiblePositionManagerAddress: '0xB8458EaAe43292e3c1F7994EFd016bd653d23c20',\n  tickLensAddress: '0x23C0F71877a1Fc4e20A78018f9831365c85f3064'\n}\n\nconst ROOTSTOCK_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xaF37EC98A00FD63689CF3060BF3B6784E00caD82',\n  multicallAddress: '0x996a9858cDfa45Ad68E47c9A30a7201E29c6a386',\n  quoterAddress: '0xb51727c996C68E60F598A923a5006853cd2fEB31',\n  v3MigratorAddress: '0x16678977CA4ec3DAD5efc7b15780295FE5f56162',\n  nonfungiblePositionManagerAddress: '0x9d9386c042F194B460Ec424a1e57ACDE25f5C4b1',\n  tickLensAddress: '0x55B9dF5bF68ADe972191a91980459f48ecA16afC',\n  swapRouter02Address: '0x0B14ff67f0014046b4b99057Aec4509640b3947A'\n}\n\nconst BLAST_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x792edAdE80af5fC680d96a2eD80A44247D2Cf6Fd',\n  multicallAddress: '0xdC7f370de7631cE9e2c2e1DCDA6B3B5744Cf4705',\n  quoterAddress: '0x6Cdcd65e03c1CEc3730AeeCd45bc140D57A25C77',\n  v3MigratorAddress: '0x15CA7043CD84C5D21Ae76Ba0A1A967d42c40ecE0',\n  nonfungiblePositionManagerAddress: '0xB218e4f7cF0533d4696fDfC419A0023D33345F28',\n  tickLensAddress: '0x2E95185bCdD928a3e984B7e2D6560Ab1b17d7274',\n  swapRouter02Address: '0x549FEB8c9bd4c12Ad2AB27022dA12492aC452B66'\n}\n\nexport const CHAIN_TO_ADDRESSES_MAP: Record<SupportedChainsType, ChainAddresses> = {\n  [ChainId.MAINNET]: MAINNET_ADDRESSES,\n  [ChainId.OPTIMISM]: OPTIMISM_ADDRESSES,\n  [ChainId.ARBITRUM_ONE]: ARBITRUM_ONE_ADDRESSES,\n  [ChainId.POLYGON]: POLYGON_ADDRESSES,\n  [ChainId.POLYGON_MUMBAI]: POLYGON_ADDRESSES,\n  [ChainId.GOERLI]: GOERLI_ADDRESSES,\n  [ChainId.CELO]: CELO_ADDRESSES,\n  [ChainId.CELO_ALFAJORES]: CELO_ADDRESSES,\n  [ChainId.BNB]: BNB_ADDRESSES,\n  [ChainId.OPTIMISM_GOERLI]: OPTIMISM_GOERLI_ADDRESSES,\n  [ChainId.OPTIMISM_SEPOLIA]: OPTIMISM_SEPOLIA_ADDRESSES,\n  [ChainId.ARBITRUM_GOERLI]: ARBITRUM_GOERLI_ADDRESSES,\n  [ChainId.ARBITRUM_SEPOLIA]: ARBITRUM_SEPOLIA_ADDRESSES,\n  [ChainId.SEPOLIA]: SEPOLIA_ADDRESSES,\n  [ChainId.AVALANCHE]: AVALANCHE_ADDRESSES,\n  [ChainId.BASE]: BASE_ADDRESSES,\n  [ChainId.BASE_GOERLI]: BASE_GOERLI_ADDRESSES,\n  [ChainId.ZORA]: ZORA_ADDRESSES,\n  [ChainId.ZORA_SEPOLIA]: ZORA_SEPOLIA_ADDRESSES,\n  [ChainId.ROOTSTOCK]: ROOTSTOCK_ADDRESSES,\n  [ChainId.BLAST]: BLAST_ADDRESSES\n}\n\n/* V3 Contract Addresses */\nexport const V3_CORE_FACTORY_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].v3CoreFactoryAddress\n    return memo\n  }, {})\n}\n\nexport const V3_MIGRATOR_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const v3MigratorAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v3MigratorAddress\n    if (v3MigratorAddress) {\n      memo[chainId] = v3MigratorAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const MULTICALL_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].multicallAddress\n    return memo\n  }, {})\n}\n\n/**\n * The oldest V0 governance address\n */\nexport const GOVERNANCE_ALPHA_V0_ADDRESSES: AddressMap = constructSameAddressMap(\n  '0x5e4be8Bc9637f0EAA1A755019e06A68ce081D58F'\n)\n/**\n * The older V1 governance address\n */\nexport const GOVERNANCE_ALPHA_V1_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0xC4e172459f1E7939D522503B81AFAaC1014CE6F6'\n}\n/**\n * The latest governor bravo that is currently admin of timelock\n */\nexport const GOVERNANCE_BRAVO_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x408ED6354d4973f66138C91495F2f2FCbd8724C3'\n}\n\nexport const TIMELOCK_ADDRESSES: AddressMap = constructSameAddressMap('0x1a9C8182C09F50C8318d769245beA52c32BE35BC')\n\nexport const MERKLE_DISTRIBUTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x090D4613473dEE047c3f2706764f49E0821D256e'\n}\n\nexport const ARGENT_WALLET_DETECTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xeca4B0bDBf7c55E9b7925919d03CbF8Dc82537E8'\n}\n\nexport const QUOTER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].quoterAddress\n    return memo\n  }, {})\n}\n\nexport const NONFUNGIBLE_POSITION_MANAGER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const nonfungiblePositionManagerAddress = CHAIN_TO_ADDRESSES_MAP[chainId].nonfungiblePositionManagerAddress\n    if (nonfungiblePositionManagerAddress) {\n      memo[chainId] = nonfungiblePositionManagerAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const ENS_REGISTRAR_ADDRESSES: AddressMap = {\n  ...constructSameAddressMap('0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e')\n}\n\nexport const SOCKS_CONTROLLER_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x65770b5283117639760beA3F867b69b3697a91dd'\n}\n\nexport const TICK_LENS_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const tickLensAddress = CHAIN_TO_ADDRESSES_MAP[chainId].tickLensAddress\n    if (tickLensAddress) {\n      memo[chainId] = tickLensAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const MIXED_ROUTE_QUOTER_V1_ADDRESSES: AddressMap = SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n  const v1MixedRouteQuoterAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v1MixedRouteQuoterAddress\n  if (v1MixedRouteQuoterAddress) {\n    memo[chainId] = v1MixedRouteQuoterAddress\n  }\n  return memo\n}, {})\n\nexport const SWAP_ROUTER_02_ADDRESSES = (chainId: number) => {\n  if (SUPPORTED_CHAINS.includes(chainId)) {\n    const id = chainId as SupportedChainsType\n    return CHAIN_TO_ADDRESSES_MAP[id].swapRouter02Address ?? '0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45'\n  }\n  return ''\n}\n","import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | string | number\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { Currency } from '../currency'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\nimport _Big from 'big.js'\n\nimport toFormat from 'toformat'\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n}\n","import JSBI from 'jsbi'\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Currency } from '../currency'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [{ baseAmount: CurrencyAmount<TBase>; quoteAmount: CurrencyAmount<TQuote> }]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { Token } from './token'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class BaseCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import { BaseCurrency } from './baseCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends BaseCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","import { getAddress } from '@ethersproject/address'\n\n/**\n * Validates an address and returns the parsed (checksummed) version of that address\n * @param address the unchecksummed hex address\n */\nexport function validateAndParseAddress(address: string): string {\n  try {\n    return getAddress(address)\n  } catch (error) {\n    throw new Error(`${address} is not a valid address.`)\n  }\n}\n\n// Checks a string starts with 0x, is 42 characters long and contains only hex characters after 0x\nconst startsWith0xLen42HexRegex = /^0x[0-9a-fA-F]{40}$/\n\n/**\n * Checks if an address is valid by checking 0x prefix, length === 42 and hex encoding.\n * @param address the unchecksummed hex address\n */\nexport function checkValidAddress(address: string): string {\n  if (startsWith0xLen42HexRegex.test(address)) {\n    return address\n  }\n\n  throw new Error(`${address} is not a valid address.`)\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport invariant from 'tiny-invariant'\nimport { checkValidAddress, validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { BaseCurrency } from './baseCurrency'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string\n\n  /**\n   * Relevant for fee-on-transfer (FOT) token taxes,\n   * Not every ERC20 token is FOT token, so this field is optional\n   */\n  public readonly buyFeeBps?: BigNumber\n  public readonly sellFeeBps?: BigNumber\n\n  /**\n   *\n   * @param chainId {@link BaseCurrency#chainId}\n   * @param address The contract address on the chain on which this token lives\n   * @param decimals {@link BaseCurrency#decimals}\n   * @param symbol {@link BaseCurrency#symbol}\n   * @param name {@link BaseCurrency#name}\n   * @param bypassChecksum If true it only checks for length === 42, startsWith 0x and contains only hex characters\n   * @param buyFeeBps Buy fee tax for FOT tokens, in basis points\n   * @param sellFeeBps Sell fee tax for FOT tokens, in basis points\n   */\n  public constructor(\n    chainId: number,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string,\n    bypassChecksum?: boolean,\n    buyFeeBps?: BigNumber,\n    sellFeeBps?: BigNumber\n  ) {\n    super(chainId, decimals, symbol, name)\n    if (bypassChecksum) {\n      this.address = checkValidAddress(address)\n    } else {\n      this.address = validateAndParseAddress(address)\n    }\n    if (buyFeeBps) {\n      invariant(buyFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    if (sellFeeBps) {\n      invariant(sellFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    this.buyFeeBps = buyFeeBps\n    this.sellFeeBps = sellFeeBps\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address.toLowerCase() === other.address.toLowerCase()\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address.toLowerCase() !== other.address.toLowerCase(), 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n","import { Token } from './token'\n\n/**\n * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped\n */\nexport const WETH9: { [chainId: number]: Token } = {\n  [1]: new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'),\n  [3]: new Token(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  [4]: new Token(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  [5]: new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [42]: new Token(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\n\n  [10]: new Token(10, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  [69]: new Token(69, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  [11155420]: new Token(11155420, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n\n  [42161]: new Token(42161, '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', 18, 'WETH', 'Wrapped Ether'),\n  [421611]: new Token(421611, '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681', 18, 'WETH', 'Wrapped Ether'),\n  [421614]: new Token(421614, '0x980B62Da83eFf3D4576C647993b0c1D7faf17c73', 18, 'WETH', 'Wrapped Ether'),\n\n  [8453]: new Token(8453, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n\n  [56]: new Token(56, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB'),\n  [137]: new Token(137, '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270', 18, 'WMATIC', 'Wrapped MATIC'),\n  [43114]: new Token(43114, '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7', 18, 'WAVAX', 'Wrapped AVAX'),\n  [11155111]: new Token(11155111, '0xb16F35c0Ae2912430DAc15764477E179D9B9EbEa', 18, 'WETH', 'Wrapped Ether')\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { NativeCurrency } from './nativeCurrency'\nimport { Token } from './token'\nimport { WETH9 } from './weth9'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n","import { Currency, CurrencyAmount, Percent, Price } from '../entities'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n"],"names":["ChainId","NativeCurrencyName","SUPPORTED_CHAINS","MAINNET","OPTIMISM","OPTIMISM_GOERLI","OPTIMISM_SEPOLIA","ARBITRUM_ONE","ARBITRUM_GOERLI","ARBITRUM_SEPOLIA","POLYGON","POLYGON_MUMBAI","GOERLI","SEPOLIA","CELO_ALFAJORES","CELO","BNB","AVALANCHE","BASE","BASE_GOERLI","ZORA","ZORA_SEPOLIA","ROOTSTOCK","BLAST","DEFAULT_NETWORKS","constructSameAddressMap","address","additionalNetworks","concat","reduce","memo","chainId","TradeType","Rounding","UNI_ADDRESSES","V2_FACTORY_ADDRESSES","V2_ROUTER_ADDRESSES","DEFAULT_ADDRESSES","v3CoreFactoryAddress","multicallAddress","quoterAddress","v3MigratorAddress","nonfungiblePositionManagerAddress","MAINNET_ADDRESSES","v1MixedRouteQuoterAddress","GOERLI_ADDRESSES","OPTIMISM_ADDRESSES","ARBITRUM_ONE_ADDRESSES","tickLensAddress","POLYGON_ADDRESSES","CELO_ADDRESSES","CHAIN_TO_ADDRESSES_MAP","swapRouter02Address","V3_CORE_FACTORY_ADDRESSES","V3_MIGRATOR_ADDRESSES","MULTICALL_ADDRESSES","GOVERNANCE_ALPHA_V0_ADDRESSES","GOVERNANCE_ALPHA_V1_ADDRESSES","GOVERNANCE_BRAVO_ADDRESSES","TIMELOCK_ADDRESSES","MERKLE_DISTRIBUTOR_ADDRESS","ARGENT_WALLET_DETECTOR_ADDRESS","QUOTER_ADDRESSES","NONFUNGIBLE_POSITION_MANAGER_ADDRESSES","ENS_REGISTRAR_ADDRESSES","SOCKS_CONTROLLER_ADDRESSES","TICK_LENS_ADDRESSES","MIXED_ROUTE_QUOTER_V1_ADDRESSES","MaxUint256","JSBI","BigInt","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","Error","invert","this","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","invariant","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","lessThanOrEqual","_this","decimalScale","exponentiate","decimals","fromRawAmount","rawAmount","fromFractionalAmount","equals","added","subtracted","multiplied","divided","_Fraction","toExact","isToken","wrapped","ONE_HUNDRED","toPercent","fraction","Percent","Price","baseCurrency","quoteCurrency","args","length","result","quoteAmount","baseAmount","scalar","quote","currencyAmount","adjustedForDecimals","BaseCurrency","symbol","name","isSafeInteger","NativeCurrency","validateAndParseAddress","getAddress","error","startsWith0xLen42HexRegex","Token","bypassChecksum","buyFeeBps","sellFeeBps","test","checkValidAddress","gte","BigNumber","from","toLowerCase","sortsBefore","WETH9","Ether","_NativeCurrency","onChain","_etherCache","isNative","weth9","MAX_SAFE_INTEGER","ZERO","ONE","TWO","includes","midPrice","inputAmount","outputAmount","quotedOutputAmount","priceImpact","items","maxSize","comparator","push","isFull","lo","hi","mid","splice","pop","value","greaterThanOrEqual","Math","floor","sqrt","toNumber","z","x"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@uniswap/sdk-core/dist/sdk-core.esm.js b/node_modules/@uniswap/sdk-core/dist/sdk-core.esm.js
index 7a77e2b..6ed074d 100644
--- a/node_modules/@uniswap/sdk-core/dist/sdk-core.esm.js
+++ b/node_modules/@uniswap/sdk-core/dist/sdk-core.esm.js
@@ -201,13 +201,13 @@ var ARBITRUM_SEPOLIA_ADDRESSES = {
 }; // sepolia v3 addresses
 
 var SEPOLIA_ADDRESSES = {
-  v3CoreFactoryAddress: '0x0227628f3F023bb0B980b67D528571c95c6DaC1c',
-  multicallAddress: '0xD7F33bCdb21b359c8ee6F0251d30E94832baAd07',
-  quoterAddress: '0xEd1f6473345F45b75F8179591dd5bA1888cf2FB3',
-  v3MigratorAddress: '0x729004182cF005CEC8Bd85df140094b6aCbe8b15',
-  nonfungiblePositionManagerAddress: '0x1238536071E1c677A632429e3655c799b22cDA52',
-  tickLensAddress: '0xd7f33bcdb21b359c8ee6f0251d30e94832baad07',
-  swapRouter02Address: '0x3bFA4769FB09eefC5a80d6E87c3B9C650f7Ae48E'
+  v3CoreFactoryAddress: '0x11BAa8360DD2f9de11EA93501C2022E1260DC02f',
+  multicallAddress: '0x65Dec5354c0Ae5bf432135097c2bC68FA09ee210',
+  quoterAddress: '0xdA7377bE8BA41acA5f24B8C92C99290614d2ABf8',
+  v3MigratorAddress: '0xDf3e6435Cce912384476F1926ED4caca16785d83',
+  nonfungiblePositionManagerAddress: '0x3A525D8737bb0b483AbCCF6b387F1E6764C46DF6',
+  tickLensAddress: '0x45533a7407f33191E9278bc577E53B107A53Da36',
+  swapRouter02Address: '0x1b8DB7D581376e87d76936432411BdF47f9E524D'
 }; // Avalanche v3 addresses
 
 var AVALANCHE_ADDRESSES = {
@@ -941,7 +941,7 @@ var _WETH;
  * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped
  */
 
-var WETH9 = (_WETH = {}, _WETH[1] = /*#__PURE__*/new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'), _WETH[3] = /*#__PURE__*/new Token(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'), _WETH[4] = /*#__PURE__*/new Token(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'), _WETH[5] = /*#__PURE__*/new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'), _WETH[42] = /*#__PURE__*/new Token(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'), _WETH[10] = /*#__PURE__*/new Token(10, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'), _WETH[69] = /*#__PURE__*/new Token(69, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'), _WETH[11155420] = /*#__PURE__*/new Token(11155420, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'), _WETH[42161] = /*#__PURE__*/new Token(42161, '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', 18, 'WETH', 'Wrapped Ether'), _WETH[421611] = /*#__PURE__*/new Token(421611, '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681', 18, 'WETH', 'Wrapped Ether'), _WETH[421614] = /*#__PURE__*/new Token(421614, '0x980B62Da83eFf3D4576C647993b0c1D7faf17c73', 18, 'WETH', 'Wrapped Ether'), _WETH[8453] = /*#__PURE__*/new Token(8453, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'), _WETH[56] = /*#__PURE__*/new Token(56, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB'), _WETH[137] = /*#__PURE__*/new Token(137, '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270', 18, 'WMATIC', 'Wrapped MATIC'), _WETH[43114] = /*#__PURE__*/new Token(43114, '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7', 18, 'WAVAX', 'Wrapped AVAX'), _WETH);
+var WETH9 = (_WETH = {}, _WETH[1] = /*#__PURE__*/new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'), _WETH[3] = /*#__PURE__*/new Token(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'), _WETH[4] = /*#__PURE__*/new Token(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'), _WETH[5] = /*#__PURE__*/new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'), _WETH[42] = /*#__PURE__*/new Token(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'), _WETH[10] = /*#__PURE__*/new Token(10, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'), _WETH[69] = /*#__PURE__*/new Token(69, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'), _WETH[11155420] = /*#__PURE__*/new Token(11155420, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'), _WETH[42161] = /*#__PURE__*/new Token(42161, '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', 18, 'WETH', 'Wrapped Ether'), _WETH[421611] = /*#__PURE__*/new Token(421611, '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681', 18, 'WETH', 'Wrapped Ether'), _WETH[421614] = /*#__PURE__*/new Token(421614, '0x980B62Da83eFf3D4576C647993b0c1D7faf17c73', 18, 'WETH', 'Wrapped Ether'), _WETH[8453] = /*#__PURE__*/new Token(8453, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'), _WETH[56] = /*#__PURE__*/new Token(56, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB'), _WETH[137] = /*#__PURE__*/new Token(137, '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270', 18, 'WMATIC', 'Wrapped MATIC'), _WETH[43114] = /*#__PURE__*/new Token(43114, '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7', 18, 'WAVAX', 'Wrapped AVAX'), _WETH[11155111] = /*#__PURE__*/new Token(11155111, '0xb16F35c0Ae2912430DAc15764477E179D9B9EbEa', 18, 'WETH', 'Wrapped Ether'), _WETH);
 
 /**
  * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets
diff --git a/node_modules/@uniswap/sdk-core/dist/sdk-core.esm.js.map b/node_modules/@uniswap/sdk-core/dist/sdk-core.esm.js.map
index d3ffe1c..3d519d5 100644
--- a/node_modules/@uniswap/sdk-core/dist/sdk-core.esm.js.map
+++ b/node_modules/@uniswap/sdk-core/dist/sdk-core.esm.js.map
@@ -1 +1 @@
-{"version":3,"file":"sdk-core.esm.js","sources":["../src/chains.ts","../src/addresses.ts","../src/constants.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/price.ts","../src/entities/baseCurrency.ts","../src/entities/nativeCurrency.ts","../src/utils/validateAndParseAddress.ts","../src/entities/token.ts","../src/entities/weth9.ts","../src/entities/ether.ts","../src/utils/computePriceImpact.ts","../src/utils/sortedInsert.ts","../src/utils/sqrt.ts"],"sourcesContent":["export enum ChainId {\n  MAINNET = 1,\n  GOERLI = 5,\n  SEPOLIA = 11155111,\n  OPTIMISM = 10,\n  OPTIMISM_GOERLI = 420,\n  OPTIMISM_SEPOLIA = 11155420,\n  ARBITRUM_ONE = 42161,\n  ARBITRUM_GOERLI = 421613,\n  ARBITRUM_SEPOLIA = 421614,\n  POLYGON = 137,\n  POLYGON_MUMBAI = 80001,\n  CELO = 42220,\n  CELO_ALFAJORES = 44787,\n  GNOSIS = 100,\n  MOONBEAM = 1284,\n  BNB = 56,\n  AVALANCHE = 43114,\n  BASE_GOERLI = 84531,\n  BASE = 8453,\n  ZORA = 7777777,\n  ZORA_SEPOLIA = 999999999,\n  ROOTSTOCK = 30,\n  BLAST = 81457\n}\n\nexport const SUPPORTED_CHAINS = [\n  ChainId.MAINNET,\n  ChainId.OPTIMISM,\n  ChainId.OPTIMISM_GOERLI,\n  ChainId.OPTIMISM_SEPOLIA,\n  ChainId.ARBITRUM_ONE,\n  ChainId.ARBITRUM_GOERLI,\n  ChainId.ARBITRUM_SEPOLIA,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.GOERLI,\n  ChainId.SEPOLIA,\n  ChainId.CELO_ALFAJORES,\n  ChainId.CELO,\n  ChainId.BNB,\n  ChainId.AVALANCHE,\n  ChainId.BASE,\n  ChainId.BASE_GOERLI,\n  ChainId.ZORA,\n  ChainId.ZORA_SEPOLIA,\n  ChainId.ROOTSTOCK,\n  ChainId.BLAST\n] as const\nexport type SupportedChainsType = typeof SUPPORTED_CHAINS[number]\n\nexport enum NativeCurrencyName {\n  // Strings match input for CLI\n  ETHER = 'ETH',\n  MATIC = 'MATIC',\n  CELO = 'CELO',\n  GNOSIS = 'XDAI',\n  MOONBEAM = 'GLMR',\n  BNB = 'BNB',\n  AVAX = 'AVAX',\n  ROOTSTOCK = 'RBTC'\n}\n","import { ChainId, SUPPORTED_CHAINS, SupportedChainsType } from './chains'\n\ntype AddressMap = { [chainId: number]: string }\n\ntype ChainAddresses = {\n  v3CoreFactoryAddress: string\n  multicallAddress: string\n  quoterAddress: string\n  v3MigratorAddress?: string\n  nonfungiblePositionManagerAddress?: string\n  tickLensAddress?: string\n  swapRouter02Address?: string\n  v1MixedRouteQuoterAddress?: string\n}\n\nconst DEFAULT_NETWORKS = [ChainId.MAINNET, ChainId.GOERLI, ChainId.SEPOLIA]\n\nfunction constructSameAddressMap(address: string, additionalNetworks: ChainId[] = []): AddressMap {\n  return DEFAULT_NETWORKS.concat(additionalNetworks).reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = address\n    return memo\n  }, {})\n}\n\nexport const UNI_ADDRESSES: AddressMap = constructSameAddressMap('0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984', [\n  ChainId.OPTIMISM,\n  ChainId.ARBITRUM_ONE,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.SEPOLIA\n])\n\nexport const UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS = '0x8B799381ac40b838BBA4131ffB26197C432AFe78'\n\n/**\n * @deprecated use V2_FACTORY_ADDRESSES instead\n */\nexport const V2_FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\nexport const V2_FACTORY_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n  [ChainId.GOERLI]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n  [ChainId.SEPOLIA]: '0xB7f907f7A9eBC822a80BD25E224be42Ce0A698A0',\n  [ChainId.OPTIMISM]: '0x0c3c1c532F1e39EdF36BE9Fe0bE1410313E074Bf',\n  [ChainId.ARBITRUM_ONE]: '0xf1D7CC64Fb4452F05c498126312eBE29f30Fbcf9',\n  [ChainId.AVALANCHE]: '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C',\n  [ChainId.BASE]: '0x8909dc15e40173ff4699343b6eb8132c65e18ec6',\n  [ChainId.BNB]: '0x8909Dc15e40173Ff4699343b6eB8132c65e18eC6',\n  [ChainId.POLYGON]: '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C',\n  [ChainId.CELO]: '0x79a530c8e2fA8748B7B40dd3629C0520c2cCf03f',\n  [ChainId.BLAST]: '0x5C346464d33F90bABaf70dB6388507CC889C1070'\n}\n/**\n * @deprecated use V2_ROUTER_ADDRESSES instead\n */\nexport const V2_ROUTER_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D'\nexport const V2_ROUTER_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\n  [ChainId.GOERLI]: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\n  [ChainId.ARBITRUM_ONE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.OPTIMISM]: '0x4a7b5da61326a6379179b40d00f57e5bbdc962c2',\n  [ChainId.BASE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.AVALANCHE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.BNB]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.POLYGON]: '0xedf6066a2b290c185783862c7f4776a2c8077ad1',\n  [ChainId.BLAST]: '0xBB66Eb1c5e875933D44DAe661dbD80e5D9B03035'\n}\n\n// Networks that share most of the same addresses i.e. Mainnet, Goerli, Optimism, Arbitrum, Polygon\nconst DEFAULT_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x1F98431c8aD98523631AE4a59f267346ea31F984',\n  multicallAddress: '0x1F98415757620B543A52E61c46B32eB19261F984',\n  quoterAddress: '0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6',\n  v3MigratorAddress: '0xA5644E29708357803b5A882D272c41cC0dF92B34',\n  nonfungiblePositionManagerAddress: '0xC36442b4a4522E871399CD717aBDD847Ab11FE88'\n}\nconst MAINNET_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  v1MixedRouteQuoterAddress: '0x84E44095eeBfEC7793Cd7d5b57B7e401D7f1cA2E'\n}\nconst GOERLI_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  v1MixedRouteQuoterAddress: '0xBa60b6e6fF25488308789E6e0A65D838be34194e'\n}\n\nconst OPTIMISM_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\nconst ARBITRUM_ONE_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  multicallAddress: '0xadF885960B47eA2CD9B55E6DAc6B42b7Cb2806dB',\n  tickLensAddress: '0xbfd8137f7d1516D3ea5cA83523914859ec47F573'\n}\nconst POLYGON_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\n\n// celo v3 addresses\nconst CELO_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xAfE208a311B21f13EF87E33A90049fC17A7acDEc',\n  multicallAddress: '0x633987602DE5C4F337e3DbF265303A1080324204',\n  quoterAddress: '0x82825d0554fA07f7FC52Ab63c961F330fdEFa8E8',\n  v3MigratorAddress: '0x3cFd4d48EDfDCC53D3f173F596f621064614C582',\n  nonfungiblePositionManagerAddress: '0x3d79EdAaBC0EaB6F08ED885C05Fc0B014290D95A',\n  tickLensAddress: '0x5f115D9113F88e0a0Db1b5033D90D4a9690AcD3D'\n}\n\n// BNB v3 addresses\nconst BNB_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7',\n  multicallAddress: '0x963Df249eD09c358A4819E39d9Cd5736c3087184',\n  quoterAddress: '0x78D78E420Da98ad378D7799bE8f4AF69033EB077',\n  v3MigratorAddress: '0x32681814957e0C13117ddc0c2aba232b5c9e760f',\n  nonfungiblePositionManagerAddress: '0x7b8A01B39D58278b5DE7e48c8449c9f4F5170613',\n  tickLensAddress: '0xD9270014D396281579760619CCf4c3af0501A47C',\n  swapRouter02Address: '0xB971eF87ede563556b2ED4b1C0b0019111Dd85d2'\n}\n\n// optimism goerli addresses\nconst OPTIMISM_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xB656dA17129e7EB733A557f4EBc57B76CFbB5d10',\n  multicallAddress: '0x07F2D8a2a02251B62af965f22fC4744A5f96BCCd',\n  quoterAddress: '0x9569CbA925c8ca2248772A9A4976A516743A246F',\n  v3MigratorAddress: '0xf6c55fBe84B1C8c3283533c53F51bC32F5C7Aba8',\n  nonfungiblePositionManagerAddress: '0x39Ca85Af2F383190cBf7d7c41ED9202D27426EF6',\n  tickLensAddress: '0xe6140Bd164b63E8BfCfc40D5dF952f83e171758e'\n}\n\n// optimism sepolia addresses\nconst OPTIMISM_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x8CE191193D15ea94e11d327b4c7ad8bbE520f6aF',\n  multicallAddress: '0x80e4e06841bb76AA9735E0448cB8d003C0EF009a',\n  quoterAddress: '0x0FBEa6cf957d95ee9313490050F6A0DA68039404',\n  v3MigratorAddress: '0xE7EcbAAaA54D007A00dbb6c1d2f150066D69dA07',\n  nonfungiblePositionManagerAddress: '0xdA75cEf1C93078e8b736FCA5D5a30adb97C8957d',\n  tickLensAddress: '0xCb7f54747F58F8944973cea5b8f4ac2209BadDC5',\n  swapRouter02Address: '0x94cC0AaC535CCDB3C01d6787D6413C739ae12bc4'\n}\n\n// arbitrum goerli v3 addresses\nconst ARBITRUM_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x4893376342d5D7b3e31d4184c08b265e5aB2A3f6',\n  multicallAddress: '0x8260CB40247290317a4c062F3542622367F206Ee',\n  quoterAddress: '0x1dd92b83591781D0C6d98d07391eea4b9a6008FA',\n  v3MigratorAddress: '0xA815919D2584Ac3F76ea9CB62E6Fd40a43BCe0C3',\n  nonfungiblePositionManagerAddress: '0x622e4726a167799826d1E1D150b076A7725f5D81',\n  tickLensAddress: '0xb52429333da969a0C79a60930a4Bf0020E5D1DE8'\n}\n\n// arbitrum sepolia v3 addresses\nconst ARBITRUM_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x248AB79Bbb9bC29bB72f7Cd42F17e054Fc40188e',\n  multicallAddress: '0x2B718b475e385eD29F56775a66aAB1F5cC6B2A0A',\n  quoterAddress: '0x2779a0CC1c3e0E44D2542EC3e79e3864Ae93Ef0B',\n  v3MigratorAddress: '0x398f43ef2c67B941147157DA1c5a868E906E043D',\n  nonfungiblePositionManagerAddress: '0x6b2937Bde17889EDCf8fbD8dE31C3C2a70Bc4d65',\n  tickLensAddress: '0x0fd18587734e5C2dcE2dccDcC7DD1EC89ba557d9',\n  swapRouter02Address: '0x101F443B4d1b059569D643917553c771E1b9663E'\n}\n\n// sepolia v3 addresses\nconst SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x0227628f3F023bb0B980b67D528571c95c6DaC1c',\n  multicallAddress: '0xD7F33bCdb21b359c8ee6F0251d30E94832baAd07',\n  quoterAddress: '0xEd1f6473345F45b75F8179591dd5bA1888cf2FB3',\n  v3MigratorAddress: '0x729004182cF005CEC8Bd85df140094b6aCbe8b15',\n  nonfungiblePositionManagerAddress: '0x1238536071E1c677A632429e3655c799b22cDA52',\n  tickLensAddress: '0xd7f33bcdb21b359c8ee6f0251d30e94832baad07',\n  swapRouter02Address: '0x3bFA4769FB09eefC5a80d6E87c3B9C650f7Ae48E'\n}\n\n// Avalanche v3 addresses\nconst AVALANCHE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x740b1c1de25031C31FF4fC9A62f554A55cdC1baD',\n  multicallAddress: '0x0139141Cd4Ee88dF3Cdb65881D411bAE271Ef0C2',\n  quoterAddress: '0xbe0F5544EC67e9B3b2D979aaA43f18Fd87E6257F',\n  v3MigratorAddress: '0x44f5f1f5E452ea8d29C890E8F6e893fC0f1f0f97',\n  nonfungiblePositionManagerAddress: '0x655C406EBFa14EE2006250925e54ec43AD184f8B',\n  tickLensAddress: '0xEB9fFC8bf81b4fFd11fb6A63a6B0f098c6e21950',\n  swapRouter02Address: '0xbb00FF08d01D300023C629E8fFfFcb65A5a578cE'\n}\n\nconst BASE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x33128a8fC17869897dcE68Ed026d694621f6FDfD',\n  multicallAddress: '0x091e99cb1C49331a94dD62755D168E941AbD0693',\n  quoterAddress: '0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a',\n  v3MigratorAddress: '0x23cF10b1ee3AdfCA73B0eF17C07F7577e7ACd2d7',\n  nonfungiblePositionManagerAddress: '0x03a520b32C04BF3bEEf7BEb72E919cf822Ed34f1',\n  tickLensAddress: '0x0CdeE061c75D43c82520eD998C23ac2991c9ac6d',\n  swapRouter02Address: '0x2626664c2603336E57B271c5C0b26F421741e481'\n}\n\n// Base Goerli v3 addresses\nconst BASE_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x9323c1d6D800ed51Bd7C6B216cfBec678B7d0BC2',\n  multicallAddress: '0xB206027a9E0E13F05eBEFa5D2402Bab3eA716439',\n  quoterAddress: '0xedf539058e28E5937dAef3f69cEd0b25fbE66Ae9',\n  v3MigratorAddress: '0x3efe5d02a04b7351D671Db7008ec6eBA9AD9e3aE',\n  nonfungiblePositionManagerAddress: '0x3c61369ef0D1D2AFa70d8feC2F31C5D6Ce134F30',\n  tickLensAddress: '0x1acB873Ee909D0c98adB18e4474943249F931b92',\n  swapRouter02Address: '0x8357227D4eDc78991Db6FDB9bD6ADE250536dE1d'\n}\n\nconst ZORA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x7145F8aeef1f6510E92164038E1B6F8cB2c42Cbb',\n  multicallAddress: '0xA51c76bEE6746cB487a7e9312E43e2b8f4A37C15',\n  quoterAddress: '0x11867e1b3348F3ce4FcC170BC5af3d23E07E64Df',\n  v3MigratorAddress: '0x048352d8dCF13686982C799da63fA6426a9D0b60',\n  nonfungiblePositionManagerAddress: '0xbC91e8DfA3fF18De43853372A3d7dfe585137D78',\n  tickLensAddress: '0x209AAda09D74Ad3B8D0E92910Eaf85D2357e3044',\n  swapRouter02Address: '0x7De04c96BE5159c3b5CeffC82aa176dc81281557'\n}\n\nconst ZORA_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x4324A677D74764f46f33ED447964252441aA8Db6',\n  multicallAddress: '0xA1E7e3A69671C4494EC59Dbd442de930a93F911A',\n  quoterAddress: '0xC195976fEF0985886E37036E2DF62bF371E12Df0',\n  v3MigratorAddress: '0x65ef259b31bf1d977c37e9434658694267674897',\n  nonfungiblePositionManagerAddress: '0xB8458EaAe43292e3c1F7994EFd016bd653d23c20',\n  tickLensAddress: '0x23C0F71877a1Fc4e20A78018f9831365c85f3064'\n}\n\nconst ROOTSTOCK_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xaF37EC98A00FD63689CF3060BF3B6784E00caD82',\n  multicallAddress: '0x996a9858cDfa45Ad68E47c9A30a7201E29c6a386',\n  quoterAddress: '0xb51727c996C68E60F598A923a5006853cd2fEB31',\n  v3MigratorAddress: '0x16678977CA4ec3DAD5efc7b15780295FE5f56162',\n  nonfungiblePositionManagerAddress: '0x9d9386c042F194B460Ec424a1e57ACDE25f5C4b1',\n  tickLensAddress: '0x55B9dF5bF68ADe972191a91980459f48ecA16afC',\n  swapRouter02Address: '0x0B14ff67f0014046b4b99057Aec4509640b3947A'\n}\n\nconst BLAST_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x792edAdE80af5fC680d96a2eD80A44247D2Cf6Fd',\n  multicallAddress: '0xdC7f370de7631cE9e2c2e1DCDA6B3B5744Cf4705',\n  quoterAddress: '0x6Cdcd65e03c1CEc3730AeeCd45bc140D57A25C77',\n  v3MigratorAddress: '0x15CA7043CD84C5D21Ae76Ba0A1A967d42c40ecE0',\n  nonfungiblePositionManagerAddress: '0xB218e4f7cF0533d4696fDfC419A0023D33345F28',\n  tickLensAddress: '0x2E95185bCdD928a3e984B7e2D6560Ab1b17d7274',\n  swapRouter02Address: '0x549FEB8c9bd4c12Ad2AB27022dA12492aC452B66'\n}\n\nexport const CHAIN_TO_ADDRESSES_MAP: Record<SupportedChainsType, ChainAddresses> = {\n  [ChainId.MAINNET]: MAINNET_ADDRESSES,\n  [ChainId.OPTIMISM]: OPTIMISM_ADDRESSES,\n  [ChainId.ARBITRUM_ONE]: ARBITRUM_ONE_ADDRESSES,\n  [ChainId.POLYGON]: POLYGON_ADDRESSES,\n  [ChainId.POLYGON_MUMBAI]: POLYGON_ADDRESSES,\n  [ChainId.GOERLI]: GOERLI_ADDRESSES,\n  [ChainId.CELO]: CELO_ADDRESSES,\n  [ChainId.CELO_ALFAJORES]: CELO_ADDRESSES,\n  [ChainId.BNB]: BNB_ADDRESSES,\n  [ChainId.OPTIMISM_GOERLI]: OPTIMISM_GOERLI_ADDRESSES,\n  [ChainId.OPTIMISM_SEPOLIA]: OPTIMISM_SEPOLIA_ADDRESSES,\n  [ChainId.ARBITRUM_GOERLI]: ARBITRUM_GOERLI_ADDRESSES,\n  [ChainId.ARBITRUM_SEPOLIA]: ARBITRUM_SEPOLIA_ADDRESSES,\n  [ChainId.SEPOLIA]: SEPOLIA_ADDRESSES,\n  [ChainId.AVALANCHE]: AVALANCHE_ADDRESSES,\n  [ChainId.BASE]: BASE_ADDRESSES,\n  [ChainId.BASE_GOERLI]: BASE_GOERLI_ADDRESSES,\n  [ChainId.ZORA]: ZORA_ADDRESSES,\n  [ChainId.ZORA_SEPOLIA]: ZORA_SEPOLIA_ADDRESSES,\n  [ChainId.ROOTSTOCK]: ROOTSTOCK_ADDRESSES,\n  [ChainId.BLAST]: BLAST_ADDRESSES\n}\n\n/* V3 Contract Addresses */\nexport const V3_CORE_FACTORY_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].v3CoreFactoryAddress\n    return memo\n  }, {})\n}\n\nexport const V3_MIGRATOR_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const v3MigratorAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v3MigratorAddress\n    if (v3MigratorAddress) {\n      memo[chainId] = v3MigratorAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const MULTICALL_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].multicallAddress\n    return memo\n  }, {})\n}\n\n/**\n * The oldest V0 governance address\n */\nexport const GOVERNANCE_ALPHA_V0_ADDRESSES: AddressMap = constructSameAddressMap(\n  '0x5e4be8Bc9637f0EAA1A755019e06A68ce081D58F'\n)\n/**\n * The older V1 governance address\n */\nexport const GOVERNANCE_ALPHA_V1_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0xC4e172459f1E7939D522503B81AFAaC1014CE6F6'\n}\n/**\n * The latest governor bravo that is currently admin of timelock\n */\nexport const GOVERNANCE_BRAVO_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x408ED6354d4973f66138C91495F2f2FCbd8724C3'\n}\n\nexport const TIMELOCK_ADDRESSES: AddressMap = constructSameAddressMap('0x1a9C8182C09F50C8318d769245beA52c32BE35BC')\n\nexport const MERKLE_DISTRIBUTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x090D4613473dEE047c3f2706764f49E0821D256e'\n}\n\nexport const ARGENT_WALLET_DETECTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xeca4B0bDBf7c55E9b7925919d03CbF8Dc82537E8'\n}\n\nexport const QUOTER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].quoterAddress\n    return memo\n  }, {})\n}\n\nexport const NONFUNGIBLE_POSITION_MANAGER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const nonfungiblePositionManagerAddress = CHAIN_TO_ADDRESSES_MAP[chainId].nonfungiblePositionManagerAddress\n    if (nonfungiblePositionManagerAddress) {\n      memo[chainId] = nonfungiblePositionManagerAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const ENS_REGISTRAR_ADDRESSES: AddressMap = {\n  ...constructSameAddressMap('0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e')\n}\n\nexport const SOCKS_CONTROLLER_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x65770b5283117639760beA3F867b69b3697a91dd'\n}\n\nexport const TICK_LENS_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const tickLensAddress = CHAIN_TO_ADDRESSES_MAP[chainId].tickLensAddress\n    if (tickLensAddress) {\n      memo[chainId] = tickLensAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const MIXED_ROUTE_QUOTER_V1_ADDRESSES: AddressMap = SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n  const v1MixedRouteQuoterAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v1MixedRouteQuoterAddress\n  if (v1MixedRouteQuoterAddress) {\n    memo[chainId] = v1MixedRouteQuoterAddress\n  }\n  return memo\n}, {})\n\nexport const SWAP_ROUTER_02_ADDRESSES = (chainId: number) => {\n  if (SUPPORTED_CHAINS.includes(chainId)) {\n    const id = chainId as SupportedChainsType\n    return CHAIN_TO_ADDRESSES_MAP[id].swapRouter02Address ?? '0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45'\n  }\n  return ''\n}\n","import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | string | number\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { Currency } from '../currency'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\nimport _Big from 'big.js'\n\nimport toFormat from 'toformat'\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n}\n","import JSBI from 'jsbi'\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Currency } from '../currency'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [{ baseAmount: CurrencyAmount<TBase>; quoteAmount: CurrencyAmount<TQuote> }]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { Token } from './token'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class BaseCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import { BaseCurrency } from './baseCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends BaseCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","import { getAddress } from '@ethersproject/address'\n\n/**\n * Validates an address and returns the parsed (checksummed) version of that address\n * @param address the unchecksummed hex address\n */\nexport function validateAndParseAddress(address: string): string {\n  try {\n    return getAddress(address)\n  } catch (error) {\n    throw new Error(`${address} is not a valid address.`)\n  }\n}\n\n// Checks a string starts with 0x, is 42 characters long and contains only hex characters after 0x\nconst startsWith0xLen42HexRegex = /^0x[0-9a-fA-F]{40}$/\n\n/**\n * Checks if an address is valid by checking 0x prefix, length === 42 and hex encoding.\n * @param address the unchecksummed hex address\n */\nexport function checkValidAddress(address: string): string {\n  if (startsWith0xLen42HexRegex.test(address)) {\n    return address\n  }\n\n  throw new Error(`${address} is not a valid address.`)\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport invariant from 'tiny-invariant'\nimport { checkValidAddress, validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { BaseCurrency } from './baseCurrency'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string\n\n  /**\n   * Relevant for fee-on-transfer (FOT) token taxes,\n   * Not every ERC20 token is FOT token, so this field is optional\n   */\n  public readonly buyFeeBps?: BigNumber\n  public readonly sellFeeBps?: BigNumber\n\n  /**\n   *\n   * @param chainId {@link BaseCurrency#chainId}\n   * @param address The contract address on the chain on which this token lives\n   * @param decimals {@link BaseCurrency#decimals}\n   * @param symbol {@link BaseCurrency#symbol}\n   * @param name {@link BaseCurrency#name}\n   * @param bypassChecksum If true it only checks for length === 42, startsWith 0x and contains only hex characters\n   * @param buyFeeBps Buy fee tax for FOT tokens, in basis points\n   * @param sellFeeBps Sell fee tax for FOT tokens, in basis points\n   */\n  public constructor(\n    chainId: number,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string,\n    bypassChecksum?: boolean,\n    buyFeeBps?: BigNumber,\n    sellFeeBps?: BigNumber\n  ) {\n    super(chainId, decimals, symbol, name)\n    if (bypassChecksum) {\n      this.address = checkValidAddress(address)\n    } else {\n      this.address = validateAndParseAddress(address)\n    }\n    if (buyFeeBps) {\n      invariant(buyFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    if (sellFeeBps) {\n      invariant(sellFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    this.buyFeeBps = buyFeeBps\n    this.sellFeeBps = sellFeeBps\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address.toLowerCase() === other.address.toLowerCase()\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address.toLowerCase() !== other.address.toLowerCase(), 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n","import { Token } from './token'\n\n/**\n * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped\n */\nexport const WETH9: { [chainId: number]: Token } = {\n  [1]: new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'),\n  [3]: new Token(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  [4]: new Token(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  [5]: new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [42]: new Token(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\n\n  [10]: new Token(10, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  [69]: new Token(69, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  [11155420]: new Token(11155420, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n\n  [42161]: new Token(42161, '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', 18, 'WETH', 'Wrapped Ether'),\n  [421611]: new Token(421611, '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681', 18, 'WETH', 'Wrapped Ether'),\n  [421614]: new Token(421614, '0x980B62Da83eFf3D4576C647993b0c1D7faf17c73', 18, 'WETH', 'Wrapped Ether'),\n\n  [8453]: new Token(8453, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n\n  [56]: new Token(56, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB'),\n  [137]: new Token(137, '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270', 18, 'WMATIC', 'Wrapped MATIC'),\n  [43114]: new Token(43114, '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7', 18, 'WAVAX', 'Wrapped AVAX')\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { NativeCurrency } from './nativeCurrency'\nimport { Token } from './token'\nimport { WETH9 } from './weth9'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency, CurrencyAmount, Percent, Price } from '../entities'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n"],"names":["ChainId","SUPPORTED_CHAINS","MAINNET","OPTIMISM","OPTIMISM_GOERLI","OPTIMISM_SEPOLIA","ARBITRUM_ONE","ARBITRUM_GOERLI","ARBITRUM_SEPOLIA","POLYGON","POLYGON_MUMBAI","GOERLI","SEPOLIA","CELO_ALFAJORES","CELO","BNB","AVALANCHE","BASE","BASE_GOERLI","ZORA","ZORA_SEPOLIA","ROOTSTOCK","BLAST","NativeCurrencyName","DEFAULT_NETWORKS","constructSameAddressMap","address","additionalNetworks","concat","reduce","memo","chainId","UNI_ADDRESSES","UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS","V2_FACTORY_ADDRESS","V2_FACTORY_ADDRESSES","V2_ROUTER_ADDRESS","V2_ROUTER_ADDRESSES","DEFAULT_ADDRESSES","v3CoreFactoryAddress","multicallAddress","quoterAddress","v3MigratorAddress","nonfungiblePositionManagerAddress","MAINNET_ADDRESSES","v1MixedRouteQuoterAddress","GOERLI_ADDRESSES","OPTIMISM_ADDRESSES","ARBITRUM_ONE_ADDRESSES","tickLensAddress","POLYGON_ADDRESSES","CELO_ADDRESSES","BNB_ADDRESSES","swapRouter02Address","OPTIMISM_GOERLI_ADDRESSES","OPTIMISM_SEPOLIA_ADDRESSES","ARBITRUM_GOERLI_ADDRESSES","ARBITRUM_SEPOLIA_ADDRESSES","SEPOLIA_ADDRESSES","AVALANCHE_ADDRESSES","BASE_ADDRESSES","BASE_GOERLI_ADDRESSES","ZORA_ADDRESSES","ZORA_SEPOLIA_ADDRESSES","ROOTSTOCK_ADDRESSES","BLAST_ADDRESSES","CHAIN_TO_ADDRESSES_MAP","V3_CORE_FACTORY_ADDRESSES","V3_MIGRATOR_ADDRESSES","MULTICALL_ADDRESSES","GOVERNANCE_ALPHA_V0_ADDRESSES","GOVERNANCE_ALPHA_V1_ADDRESSES","GOVERNANCE_BRAVO_ADDRESSES","TIMELOCK_ADDRESSES","MERKLE_DISTRIBUTOR_ADDRESS","ARGENT_WALLET_DETECTOR_ADDRESS","QUOTER_ADDRESSES","NONFUNGIBLE_POSITION_MANAGER_ADDRESSES","ENS_REGISTRAR_ADDRESSES","SOCKS_CONTROLLER_ADDRESSES","TICK_LENS_ADDRESSES","MIXED_ROUTE_QUOTER_V1_ADDRESSES","SWAP_ROUTER_02_ADDRESSES","includes","id","TradeType","Rounding","MaxUint256","JSBI","BigInt","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","Error","invert","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","invariant","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","lessThanOrEqual","decimalScale","exponentiate","decimals","fromRawAmount","rawAmount","fromFractionalAmount","equals","added","subtracted","multiplied","divided","toExact","isToken","wrapped","ONE_HUNDRED","toPercent","fraction","Percent","Price","baseCurrency","quoteCurrency","args","length","result","quoteAmount","baseAmount","scalar","quote","currencyAmount","adjustedForDecimals","BaseCurrency","symbol","name","isSafeInteger","NativeCurrency","validateAndParseAddress","getAddress","error","startsWith0xLen42HexRegex","checkValidAddress","test","Token","bypassChecksum","buyFeeBps","sellFeeBps","gte","BigNumber","from","toLowerCase","sortsBefore","WETH9","Ether","onChain","_etherCache","isNative","weth9","computePriceImpact","midPrice","inputAmount","outputAmount","quotedOutputAmount","priceImpact","sortedInsert","items","maxSize","comparator","push","isFull","lo","hi","mid","splice","pop","MAX_SAFE_INTEGER","ZERO","ONE","TWO","sqrt","value","greaterThanOrEqual","Math","floor","toNumber","z","x"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"sdk-core.esm.js","sources":["../src/chains.ts","../src/addresses.ts","../src/constants.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/price.ts","../src/entities/baseCurrency.ts","../src/entities/nativeCurrency.ts","../src/utils/validateAndParseAddress.ts","../src/entities/token.ts","../src/entities/weth9.ts","../src/entities/ether.ts","../src/utils/computePriceImpact.ts","../src/utils/sortedInsert.ts","../src/utils/sqrt.ts"],"sourcesContent":["export enum ChainId {\n  MAINNET = 1,\n  GOERLI = 5,\n  SEPOLIA = 11155111,\n  OPTIMISM = 10,\n  OPTIMISM_GOERLI = 420,\n  OPTIMISM_SEPOLIA = 11155420,\n  ARBITRUM_ONE = 42161,\n  ARBITRUM_GOERLI = 421613,\n  ARBITRUM_SEPOLIA = 421614,\n  POLYGON = 137,\n  POLYGON_MUMBAI = 80001,\n  CELO = 42220,\n  CELO_ALFAJORES = 44787,\n  GNOSIS = 100,\n  MOONBEAM = 1284,\n  BNB = 56,\n  AVALANCHE = 43114,\n  BASE_GOERLI = 84531,\n  BASE = 8453,\n  ZORA = 7777777,\n  ZORA_SEPOLIA = 999999999,\n  ROOTSTOCK = 30,\n  BLAST = 81457\n}\n\nexport const SUPPORTED_CHAINS = [\n  ChainId.MAINNET,\n  ChainId.OPTIMISM,\n  ChainId.OPTIMISM_GOERLI,\n  ChainId.OPTIMISM_SEPOLIA,\n  ChainId.ARBITRUM_ONE,\n  ChainId.ARBITRUM_GOERLI,\n  ChainId.ARBITRUM_SEPOLIA,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.GOERLI,\n  ChainId.SEPOLIA,\n  ChainId.CELO_ALFAJORES,\n  ChainId.CELO,\n  ChainId.BNB,\n  ChainId.AVALANCHE,\n  ChainId.BASE,\n  ChainId.BASE_GOERLI,\n  ChainId.ZORA,\n  ChainId.ZORA_SEPOLIA,\n  ChainId.ROOTSTOCK,\n  ChainId.BLAST\n] as const\nexport type SupportedChainsType = typeof SUPPORTED_CHAINS[number]\n\nexport enum NativeCurrencyName {\n  // Strings match input for CLI\n  ETHER = 'ETH',\n  MATIC = 'MATIC',\n  CELO = 'CELO',\n  GNOSIS = 'XDAI',\n  MOONBEAM = 'GLMR',\n  BNB = 'BNB',\n  AVAX = 'AVAX',\n  ROOTSTOCK = 'RBTC'\n}\n","import { ChainId, SUPPORTED_CHAINS, SupportedChainsType } from './chains'\n\ntype AddressMap = { [chainId: number]: string }\n\ntype ChainAddresses = {\n  v3CoreFactoryAddress: string\n  multicallAddress: string\n  quoterAddress: string\n  v3MigratorAddress?: string\n  nonfungiblePositionManagerAddress?: string\n  tickLensAddress?: string\n  swapRouter02Address?: string\n  v1MixedRouteQuoterAddress?: string\n}\n\nconst DEFAULT_NETWORKS = [ChainId.MAINNET, ChainId.GOERLI, ChainId.SEPOLIA]\n\nfunction constructSameAddressMap(address: string, additionalNetworks: ChainId[] = []): AddressMap {\n  return DEFAULT_NETWORKS.concat(additionalNetworks).reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = address\n    return memo\n  }, {})\n}\n\nexport const UNI_ADDRESSES: AddressMap = constructSameAddressMap('0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984', [\n  ChainId.OPTIMISM,\n  ChainId.ARBITRUM_ONE,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.SEPOLIA\n])\n\nexport const UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS = '0x8B799381ac40b838BBA4131ffB26197C432AFe78'\n\n/**\n * @deprecated use V2_FACTORY_ADDRESSES instead\n */\nexport const V2_FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\nexport const V2_FACTORY_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n  [ChainId.GOERLI]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n  [ChainId.SEPOLIA]: '0xB7f907f7A9eBC822a80BD25E224be42Ce0A698A0',\n  [ChainId.OPTIMISM]: '0x0c3c1c532F1e39EdF36BE9Fe0bE1410313E074Bf',\n  [ChainId.ARBITRUM_ONE]: '0xf1D7CC64Fb4452F05c498126312eBE29f30Fbcf9',\n  [ChainId.AVALANCHE]: '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C',\n  [ChainId.BASE]: '0x8909dc15e40173ff4699343b6eb8132c65e18ec6',\n  [ChainId.BNB]: '0x8909Dc15e40173Ff4699343b6eB8132c65e18eC6',\n  [ChainId.POLYGON]: '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C',\n  [ChainId.CELO]: '0x79a530c8e2fA8748B7B40dd3629C0520c2cCf03f',\n  [ChainId.BLAST]: '0x5C346464d33F90bABaf70dB6388507CC889C1070'\n}\n/**\n * @deprecated use V2_ROUTER_ADDRESSES instead\n */\nexport const V2_ROUTER_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D'\nexport const V2_ROUTER_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\n  [ChainId.GOERLI]: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\n  [ChainId.ARBITRUM_ONE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.OPTIMISM]: '0x4a7b5da61326a6379179b40d00f57e5bbdc962c2',\n  [ChainId.BASE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.AVALANCHE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.BNB]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.POLYGON]: '0xedf6066a2b290c185783862c7f4776a2c8077ad1',\n  [ChainId.BLAST]: '0xBB66Eb1c5e875933D44DAe661dbD80e5D9B03035'\n}\n\n// Networks that share most of the same addresses i.e. Mainnet, Goerli, Optimism, Arbitrum, Polygon\nconst DEFAULT_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x1F98431c8aD98523631AE4a59f267346ea31F984',\n  multicallAddress: '0x1F98415757620B543A52E61c46B32eB19261F984',\n  quoterAddress: '0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6',\n  v3MigratorAddress: '0xA5644E29708357803b5A882D272c41cC0dF92B34',\n  nonfungiblePositionManagerAddress: '0xC36442b4a4522E871399CD717aBDD847Ab11FE88'\n}\nconst MAINNET_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  v1MixedRouteQuoterAddress: '0x84E44095eeBfEC7793Cd7d5b57B7e401D7f1cA2E'\n}\nconst GOERLI_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  v1MixedRouteQuoterAddress: '0xBa60b6e6fF25488308789E6e0A65D838be34194e'\n}\n\nconst OPTIMISM_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\nconst ARBITRUM_ONE_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  multicallAddress: '0xadF885960B47eA2CD9B55E6DAc6B42b7Cb2806dB',\n  tickLensAddress: '0xbfd8137f7d1516D3ea5cA83523914859ec47F573'\n}\nconst POLYGON_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\n\n// celo v3 addresses\nconst CELO_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xAfE208a311B21f13EF87E33A90049fC17A7acDEc',\n  multicallAddress: '0x633987602DE5C4F337e3DbF265303A1080324204',\n  quoterAddress: '0x82825d0554fA07f7FC52Ab63c961F330fdEFa8E8',\n  v3MigratorAddress: '0x3cFd4d48EDfDCC53D3f173F596f621064614C582',\n  nonfungiblePositionManagerAddress: '0x3d79EdAaBC0EaB6F08ED885C05Fc0B014290D95A',\n  tickLensAddress: '0x5f115D9113F88e0a0Db1b5033D90D4a9690AcD3D'\n}\n\n// BNB v3 addresses\nconst BNB_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7',\n  multicallAddress: '0x963Df249eD09c358A4819E39d9Cd5736c3087184',\n  quoterAddress: '0x78D78E420Da98ad378D7799bE8f4AF69033EB077',\n  v3MigratorAddress: '0x32681814957e0C13117ddc0c2aba232b5c9e760f',\n  nonfungiblePositionManagerAddress: '0x7b8A01B39D58278b5DE7e48c8449c9f4F5170613',\n  tickLensAddress: '0xD9270014D396281579760619CCf4c3af0501A47C',\n  swapRouter02Address: '0xB971eF87ede563556b2ED4b1C0b0019111Dd85d2'\n}\n\n// optimism goerli addresses\nconst OPTIMISM_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xB656dA17129e7EB733A557f4EBc57B76CFbB5d10',\n  multicallAddress: '0x07F2D8a2a02251B62af965f22fC4744A5f96BCCd',\n  quoterAddress: '0x9569CbA925c8ca2248772A9A4976A516743A246F',\n  v3MigratorAddress: '0xf6c55fBe84B1C8c3283533c53F51bC32F5C7Aba8',\n  nonfungiblePositionManagerAddress: '0x39Ca85Af2F383190cBf7d7c41ED9202D27426EF6',\n  tickLensAddress: '0xe6140Bd164b63E8BfCfc40D5dF952f83e171758e'\n}\n\n// optimism sepolia addresses\nconst OPTIMISM_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x8CE191193D15ea94e11d327b4c7ad8bbE520f6aF',\n  multicallAddress: '0x80e4e06841bb76AA9735E0448cB8d003C0EF009a',\n  quoterAddress: '0x0FBEa6cf957d95ee9313490050F6A0DA68039404',\n  v3MigratorAddress: '0xE7EcbAAaA54D007A00dbb6c1d2f150066D69dA07',\n  nonfungiblePositionManagerAddress: '0xdA75cEf1C93078e8b736FCA5D5a30adb97C8957d',\n  tickLensAddress: '0xCb7f54747F58F8944973cea5b8f4ac2209BadDC5',\n  swapRouter02Address: '0x94cC0AaC535CCDB3C01d6787D6413C739ae12bc4'\n}\n\n// arbitrum goerli v3 addresses\nconst ARBITRUM_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x4893376342d5D7b3e31d4184c08b265e5aB2A3f6',\n  multicallAddress: '0x8260CB40247290317a4c062F3542622367F206Ee',\n  quoterAddress: '0x1dd92b83591781D0C6d98d07391eea4b9a6008FA',\n  v3MigratorAddress: '0xA815919D2584Ac3F76ea9CB62E6Fd40a43BCe0C3',\n  nonfungiblePositionManagerAddress: '0x622e4726a167799826d1E1D150b076A7725f5D81',\n  tickLensAddress: '0xb52429333da969a0C79a60930a4Bf0020E5D1DE8'\n}\n\n// arbitrum sepolia v3 addresses\nconst ARBITRUM_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x248AB79Bbb9bC29bB72f7Cd42F17e054Fc40188e',\n  multicallAddress: '0x2B718b475e385eD29F56775a66aAB1F5cC6B2A0A',\n  quoterAddress: '0x2779a0CC1c3e0E44D2542EC3e79e3864Ae93Ef0B',\n  v3MigratorAddress: '0x398f43ef2c67B941147157DA1c5a868E906E043D',\n  nonfungiblePositionManagerAddress: '0x6b2937Bde17889EDCf8fbD8dE31C3C2a70Bc4d65',\n  tickLensAddress: '0x0fd18587734e5C2dcE2dccDcC7DD1EC89ba557d9',\n  swapRouter02Address: '0x101F443B4d1b059569D643917553c771E1b9663E'\n}\n\n// sepolia v3 addresses\nconst SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x11BAa8360DD2f9de11EA93501C2022E1260DC02f',\n  multicallAddress: '0x65Dec5354c0Ae5bf432135097c2bC68FA09ee210',\n  quoterAddress: '0xdA7377bE8BA41acA5f24B8C92C99290614d2ABf8',\n  v3MigratorAddress: '0xDf3e6435Cce912384476F1926ED4caca16785d83',\n  nonfungiblePositionManagerAddress: '0x3A525D8737bb0b483AbCCF6b387F1E6764C46DF6',\n  tickLensAddress: '0x45533a7407f33191E9278bc577E53B107A53Da36',\n  swapRouter02Address: '0x1b8DB7D581376e87d76936432411BdF47f9E524D'\n}\n\n// Avalanche v3 addresses\nconst AVALANCHE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x740b1c1de25031C31FF4fC9A62f554A55cdC1baD',\n  multicallAddress: '0x0139141Cd4Ee88dF3Cdb65881D411bAE271Ef0C2',\n  quoterAddress: '0xbe0F5544EC67e9B3b2D979aaA43f18Fd87E6257F',\n  v3MigratorAddress: '0x44f5f1f5E452ea8d29C890E8F6e893fC0f1f0f97',\n  nonfungiblePositionManagerAddress: '0x655C406EBFa14EE2006250925e54ec43AD184f8B',\n  tickLensAddress: '0xEB9fFC8bf81b4fFd11fb6A63a6B0f098c6e21950',\n  swapRouter02Address: '0xbb00FF08d01D300023C629E8fFfFcb65A5a578cE'\n}\n\nconst BASE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x33128a8fC17869897dcE68Ed026d694621f6FDfD',\n  multicallAddress: '0x091e99cb1C49331a94dD62755D168E941AbD0693',\n  quoterAddress: '0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a',\n  v3MigratorAddress: '0x23cF10b1ee3AdfCA73B0eF17C07F7577e7ACd2d7',\n  nonfungiblePositionManagerAddress: '0x03a520b32C04BF3bEEf7BEb72E919cf822Ed34f1',\n  tickLensAddress: '0x0CdeE061c75D43c82520eD998C23ac2991c9ac6d',\n  swapRouter02Address: '0x2626664c2603336E57B271c5C0b26F421741e481'\n}\n\n// Base Goerli v3 addresses\nconst BASE_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x9323c1d6D800ed51Bd7C6B216cfBec678B7d0BC2',\n  multicallAddress: '0xB206027a9E0E13F05eBEFa5D2402Bab3eA716439',\n  quoterAddress: '0xedf539058e28E5937dAef3f69cEd0b25fbE66Ae9',\n  v3MigratorAddress: '0x3efe5d02a04b7351D671Db7008ec6eBA9AD9e3aE',\n  nonfungiblePositionManagerAddress: '0x3c61369ef0D1D2AFa70d8feC2F31C5D6Ce134F30',\n  tickLensAddress: '0x1acB873Ee909D0c98adB18e4474943249F931b92',\n  swapRouter02Address: '0x8357227D4eDc78991Db6FDB9bD6ADE250536dE1d'\n}\n\nconst ZORA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x7145F8aeef1f6510E92164038E1B6F8cB2c42Cbb',\n  multicallAddress: '0xA51c76bEE6746cB487a7e9312E43e2b8f4A37C15',\n  quoterAddress: '0x11867e1b3348F3ce4FcC170BC5af3d23E07E64Df',\n  v3MigratorAddress: '0x048352d8dCF13686982C799da63fA6426a9D0b60',\n  nonfungiblePositionManagerAddress: '0xbC91e8DfA3fF18De43853372A3d7dfe585137D78',\n  tickLensAddress: '0x209AAda09D74Ad3B8D0E92910Eaf85D2357e3044',\n  swapRouter02Address: '0x7De04c96BE5159c3b5CeffC82aa176dc81281557'\n}\n\nconst ZORA_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x4324A677D74764f46f33ED447964252441aA8Db6',\n  multicallAddress: '0xA1E7e3A69671C4494EC59Dbd442de930a93F911A',\n  quoterAddress: '0xC195976fEF0985886E37036E2DF62bF371E12Df0',\n  v3MigratorAddress: '0x65ef259b31bf1d977c37e9434658694267674897',\n  nonfungiblePositionManagerAddress: '0xB8458EaAe43292e3c1F7994EFd016bd653d23c20',\n  tickLensAddress: '0x23C0F71877a1Fc4e20A78018f9831365c85f3064'\n}\n\nconst ROOTSTOCK_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xaF37EC98A00FD63689CF3060BF3B6784E00caD82',\n  multicallAddress: '0x996a9858cDfa45Ad68E47c9A30a7201E29c6a386',\n  quoterAddress: '0xb51727c996C68E60F598A923a5006853cd2fEB31',\n  v3MigratorAddress: '0x16678977CA4ec3DAD5efc7b15780295FE5f56162',\n  nonfungiblePositionManagerAddress: '0x9d9386c042F194B460Ec424a1e57ACDE25f5C4b1',\n  tickLensAddress: '0x55B9dF5bF68ADe972191a91980459f48ecA16afC',\n  swapRouter02Address: '0x0B14ff67f0014046b4b99057Aec4509640b3947A'\n}\n\nconst BLAST_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x792edAdE80af5fC680d96a2eD80A44247D2Cf6Fd',\n  multicallAddress: '0xdC7f370de7631cE9e2c2e1DCDA6B3B5744Cf4705',\n  quoterAddress: '0x6Cdcd65e03c1CEc3730AeeCd45bc140D57A25C77',\n  v3MigratorAddress: '0x15CA7043CD84C5D21Ae76Ba0A1A967d42c40ecE0',\n  nonfungiblePositionManagerAddress: '0xB218e4f7cF0533d4696fDfC419A0023D33345F28',\n  tickLensAddress: '0x2E95185bCdD928a3e984B7e2D6560Ab1b17d7274',\n  swapRouter02Address: '0x549FEB8c9bd4c12Ad2AB27022dA12492aC452B66'\n}\n\nexport const CHAIN_TO_ADDRESSES_MAP: Record<SupportedChainsType, ChainAddresses> = {\n  [ChainId.MAINNET]: MAINNET_ADDRESSES,\n  [ChainId.OPTIMISM]: OPTIMISM_ADDRESSES,\n  [ChainId.ARBITRUM_ONE]: ARBITRUM_ONE_ADDRESSES,\n  [ChainId.POLYGON]: POLYGON_ADDRESSES,\n  [ChainId.POLYGON_MUMBAI]: POLYGON_ADDRESSES,\n  [ChainId.GOERLI]: GOERLI_ADDRESSES,\n  [ChainId.CELO]: CELO_ADDRESSES,\n  [ChainId.CELO_ALFAJORES]: CELO_ADDRESSES,\n  [ChainId.BNB]: BNB_ADDRESSES,\n  [ChainId.OPTIMISM_GOERLI]: OPTIMISM_GOERLI_ADDRESSES,\n  [ChainId.OPTIMISM_SEPOLIA]: OPTIMISM_SEPOLIA_ADDRESSES,\n  [ChainId.ARBITRUM_GOERLI]: ARBITRUM_GOERLI_ADDRESSES,\n  [ChainId.ARBITRUM_SEPOLIA]: ARBITRUM_SEPOLIA_ADDRESSES,\n  [ChainId.SEPOLIA]: SEPOLIA_ADDRESSES,\n  [ChainId.AVALANCHE]: AVALANCHE_ADDRESSES,\n  [ChainId.BASE]: BASE_ADDRESSES,\n  [ChainId.BASE_GOERLI]: BASE_GOERLI_ADDRESSES,\n  [ChainId.ZORA]: ZORA_ADDRESSES,\n  [ChainId.ZORA_SEPOLIA]: ZORA_SEPOLIA_ADDRESSES,\n  [ChainId.ROOTSTOCK]: ROOTSTOCK_ADDRESSES,\n  [ChainId.BLAST]: BLAST_ADDRESSES\n}\n\n/* V3 Contract Addresses */\nexport const V3_CORE_FACTORY_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].v3CoreFactoryAddress\n    return memo\n  }, {})\n}\n\nexport const V3_MIGRATOR_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const v3MigratorAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v3MigratorAddress\n    if (v3MigratorAddress) {\n      memo[chainId] = v3MigratorAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const MULTICALL_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].multicallAddress\n    return memo\n  }, {})\n}\n\n/**\n * The oldest V0 governance address\n */\nexport const GOVERNANCE_ALPHA_V0_ADDRESSES: AddressMap = constructSameAddressMap(\n  '0x5e4be8Bc9637f0EAA1A755019e06A68ce081D58F'\n)\n/**\n * The older V1 governance address\n */\nexport const GOVERNANCE_ALPHA_V1_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0xC4e172459f1E7939D522503B81AFAaC1014CE6F6'\n}\n/**\n * The latest governor bravo that is currently admin of timelock\n */\nexport const GOVERNANCE_BRAVO_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x408ED6354d4973f66138C91495F2f2FCbd8724C3'\n}\n\nexport const TIMELOCK_ADDRESSES: AddressMap = constructSameAddressMap('0x1a9C8182C09F50C8318d769245beA52c32BE35BC')\n\nexport const MERKLE_DISTRIBUTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x090D4613473dEE047c3f2706764f49E0821D256e'\n}\n\nexport const ARGENT_WALLET_DETECTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xeca4B0bDBf7c55E9b7925919d03CbF8Dc82537E8'\n}\n\nexport const QUOTER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].quoterAddress\n    return memo\n  }, {})\n}\n\nexport const NONFUNGIBLE_POSITION_MANAGER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const nonfungiblePositionManagerAddress = CHAIN_TO_ADDRESSES_MAP[chainId].nonfungiblePositionManagerAddress\n    if (nonfungiblePositionManagerAddress) {\n      memo[chainId] = nonfungiblePositionManagerAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const ENS_REGISTRAR_ADDRESSES: AddressMap = {\n  ...constructSameAddressMap('0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e')\n}\n\nexport const SOCKS_CONTROLLER_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x65770b5283117639760beA3F867b69b3697a91dd'\n}\n\nexport const TICK_LENS_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const tickLensAddress = CHAIN_TO_ADDRESSES_MAP[chainId].tickLensAddress\n    if (tickLensAddress) {\n      memo[chainId] = tickLensAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const MIXED_ROUTE_QUOTER_V1_ADDRESSES: AddressMap = SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n  const v1MixedRouteQuoterAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v1MixedRouteQuoterAddress\n  if (v1MixedRouteQuoterAddress) {\n    memo[chainId] = v1MixedRouteQuoterAddress\n  }\n  return memo\n}, {})\n\nexport const SWAP_ROUTER_02_ADDRESSES = (chainId: number) => {\n  if (SUPPORTED_CHAINS.includes(chainId)) {\n    const id = chainId as SupportedChainsType\n    return CHAIN_TO_ADDRESSES_MAP[id].swapRouter02Address ?? '0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45'\n  }\n  return ''\n}\n","import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | string | number\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { Currency } from '../currency'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\nimport _Big from 'big.js'\n\nimport toFormat from 'toformat'\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n}\n","import JSBI from 'jsbi'\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Currency } from '../currency'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [{ baseAmount: CurrencyAmount<TBase>; quoteAmount: CurrencyAmount<TQuote> }]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { Token } from './token'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class BaseCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import { BaseCurrency } from './baseCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends BaseCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","import { getAddress } from '@ethersproject/address'\n\n/**\n * Validates an address and returns the parsed (checksummed) version of that address\n * @param address the unchecksummed hex address\n */\nexport function validateAndParseAddress(address: string): string {\n  try {\n    return getAddress(address)\n  } catch (error) {\n    throw new Error(`${address} is not a valid address.`)\n  }\n}\n\n// Checks a string starts with 0x, is 42 characters long and contains only hex characters after 0x\nconst startsWith0xLen42HexRegex = /^0x[0-9a-fA-F]{40}$/\n\n/**\n * Checks if an address is valid by checking 0x prefix, length === 42 and hex encoding.\n * @param address the unchecksummed hex address\n */\nexport function checkValidAddress(address: string): string {\n  if (startsWith0xLen42HexRegex.test(address)) {\n    return address\n  }\n\n  throw new Error(`${address} is not a valid address.`)\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport invariant from 'tiny-invariant'\nimport { checkValidAddress, validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { BaseCurrency } from './baseCurrency'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string\n\n  /**\n   * Relevant for fee-on-transfer (FOT) token taxes,\n   * Not every ERC20 token is FOT token, so this field is optional\n   */\n  public readonly buyFeeBps?: BigNumber\n  public readonly sellFeeBps?: BigNumber\n\n  /**\n   *\n   * @param chainId {@link BaseCurrency#chainId}\n   * @param address The contract address on the chain on which this token lives\n   * @param decimals {@link BaseCurrency#decimals}\n   * @param symbol {@link BaseCurrency#symbol}\n   * @param name {@link BaseCurrency#name}\n   * @param bypassChecksum If true it only checks for length === 42, startsWith 0x and contains only hex characters\n   * @param buyFeeBps Buy fee tax for FOT tokens, in basis points\n   * @param sellFeeBps Sell fee tax for FOT tokens, in basis points\n   */\n  public constructor(\n    chainId: number,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string,\n    bypassChecksum?: boolean,\n    buyFeeBps?: BigNumber,\n    sellFeeBps?: BigNumber\n  ) {\n    super(chainId, decimals, symbol, name)\n    if (bypassChecksum) {\n      this.address = checkValidAddress(address)\n    } else {\n      this.address = validateAndParseAddress(address)\n    }\n    if (buyFeeBps) {\n      invariant(buyFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    if (sellFeeBps) {\n      invariant(sellFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    this.buyFeeBps = buyFeeBps\n    this.sellFeeBps = sellFeeBps\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address.toLowerCase() === other.address.toLowerCase()\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address.toLowerCase() !== other.address.toLowerCase(), 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n","import { Token } from './token'\n\n/**\n * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped\n */\nexport const WETH9: { [chainId: number]: Token } = {\n  [1]: new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'),\n  [3]: new Token(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  [4]: new Token(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  [5]: new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [42]: new Token(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\n\n  [10]: new Token(10, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  [69]: new Token(69, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  [11155420]: new Token(11155420, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n\n  [42161]: new Token(42161, '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', 18, 'WETH', 'Wrapped Ether'),\n  [421611]: new Token(421611, '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681', 18, 'WETH', 'Wrapped Ether'),\n  [421614]: new Token(421614, '0x980B62Da83eFf3D4576C647993b0c1D7faf17c73', 18, 'WETH', 'Wrapped Ether'),\n\n  [8453]: new Token(8453, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n\n  [56]: new Token(56, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB'),\n  [137]: new Token(137, '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270', 18, 'WMATIC', 'Wrapped MATIC'),\n  [43114]: new Token(43114, '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7', 18, 'WAVAX', 'Wrapped AVAX'),\n  [11155111]: new Token(11155111, '0xb16F35c0Ae2912430DAc15764477E179D9B9EbEa', 18, 'WETH', 'Wrapped Ether')\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { NativeCurrency } from './nativeCurrency'\nimport { Token } from './token'\nimport { WETH9 } from './weth9'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency, CurrencyAmount, Percent, Price } from '../entities'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n"],"names":["ChainId","SUPPORTED_CHAINS","MAINNET","OPTIMISM","OPTIMISM_GOERLI","OPTIMISM_SEPOLIA","ARBITRUM_ONE","ARBITRUM_GOERLI","ARBITRUM_SEPOLIA","POLYGON","POLYGON_MUMBAI","GOERLI","SEPOLIA","CELO_ALFAJORES","CELO","BNB","AVALANCHE","BASE","BASE_GOERLI","ZORA","ZORA_SEPOLIA","ROOTSTOCK","BLAST","NativeCurrencyName","DEFAULT_NETWORKS","constructSameAddressMap","address","additionalNetworks","concat","reduce","memo","chainId","UNI_ADDRESSES","UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS","V2_FACTORY_ADDRESS","V2_FACTORY_ADDRESSES","V2_ROUTER_ADDRESS","V2_ROUTER_ADDRESSES","DEFAULT_ADDRESSES","v3CoreFactoryAddress","multicallAddress","quoterAddress","v3MigratorAddress","nonfungiblePositionManagerAddress","MAINNET_ADDRESSES","v1MixedRouteQuoterAddress","GOERLI_ADDRESSES","OPTIMISM_ADDRESSES","ARBITRUM_ONE_ADDRESSES","tickLensAddress","POLYGON_ADDRESSES","CELO_ADDRESSES","BNB_ADDRESSES","swapRouter02Address","OPTIMISM_GOERLI_ADDRESSES","OPTIMISM_SEPOLIA_ADDRESSES","ARBITRUM_GOERLI_ADDRESSES","ARBITRUM_SEPOLIA_ADDRESSES","SEPOLIA_ADDRESSES","AVALANCHE_ADDRESSES","BASE_ADDRESSES","BASE_GOERLI_ADDRESSES","ZORA_ADDRESSES","ZORA_SEPOLIA_ADDRESSES","ROOTSTOCK_ADDRESSES","BLAST_ADDRESSES","CHAIN_TO_ADDRESSES_MAP","V3_CORE_FACTORY_ADDRESSES","V3_MIGRATOR_ADDRESSES","MULTICALL_ADDRESSES","GOVERNANCE_ALPHA_V0_ADDRESSES","GOVERNANCE_ALPHA_V1_ADDRESSES","GOVERNANCE_BRAVO_ADDRESSES","TIMELOCK_ADDRESSES","MERKLE_DISTRIBUTOR_ADDRESS","ARGENT_WALLET_DETECTOR_ADDRESS","QUOTER_ADDRESSES","NONFUNGIBLE_POSITION_MANAGER_ADDRESSES","ENS_REGISTRAR_ADDRESSES","SOCKS_CONTROLLER_ADDRESSES","TICK_LENS_ADDRESSES","MIXED_ROUTE_QUOTER_V1_ADDRESSES","SWAP_ROUTER_02_ADDRESSES","includes","id","TradeType","Rounding","MaxUint256","JSBI","BigInt","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","Error","invert","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","invariant","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","lessThanOrEqual","decimalScale","exponentiate","decimals","fromRawAmount","rawAmount","fromFractionalAmount","equals","added","subtracted","multiplied","divided","toExact","isToken","wrapped","ONE_HUNDRED","toPercent","fraction","Percent","Price","baseCurrency","quoteCurrency","args","length","result","quoteAmount","baseAmount","scalar","quote","currencyAmount","adjustedForDecimals","BaseCurrency","symbol","name","isSafeInteger","NativeCurrency","validateAndParseAddress","getAddress","error","startsWith0xLen42HexRegex","checkValidAddress","test","Token","bypassChecksum","buyFeeBps","sellFeeBps","gte","BigNumber","from","toLowerCase","sortsBefore","WETH9","Ether","onChain","_etherCache","isNative","weth9","computePriceImpact","midPrice","inputAmount","outputAmount","quotedOutputAmount","priceImpact","sortedInsert","items","maxSize","comparator","push","isFull","lo","hi","mid","splice","pop","MAX_SAFE_INTEGER","ZERO","ONE","TWO","sqrt","value","greaterThanOrEqual","Math","floor","toNumber","z","x"],"mappings":"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"}
\ No newline at end of file
