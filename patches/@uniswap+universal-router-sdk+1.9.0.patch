diff --git a/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.development.js b/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.development.js
index bea5d8a..39cb6e3 100644
--- a/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.development.js
+++ b/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.development.js
@@ -207,8 +207,8 @@ var CHAIN_CONFIGS = (_CHAIN_CONFIGS = {}, _CHAIN_CONFIGS[1] = {
   weth: '0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6',
   creationBlock: 8940568
 }, _CHAIN_CONFIGS[11155111] = {
-  router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
-  weth: '0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14',
+  router: '0x1678413030D5f7719e17Ba37e77134268f9b8193',
+  weth: '0xb16F35c0Ae2912430DAc15764477E179D9B9EbEa',
   creationBlock: 3543575
 }, _CHAIN_CONFIGS[137] = {
   router: '0xec7BE89e9d109e7e3Fec59c222CF297125FEFda2',
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.development.js.map b/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.development.js.map
index 126a164..34374a8 100644
--- a/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.development.js.map
+++ b/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.development.js.map
@@ -1 +1 @@
-{"version":3,"file":"universal-router-sdk.cjs.development.js","sources":["../src/entities/Command.ts","../src/entities/NFTTrade.ts","../src/utils/routerCommands.ts","../src/utils/constants.ts","../src/utils/numbers.ts","../src/entities/protocols/uniswap.ts","../src/utils/inputTokens.ts","../src/swapRouter.ts","../src/entities/protocols/cryptopunk.ts","../src/entities/protocols/foundation.ts","../src/entities/protocols/looksRareV2.ts","../src/entities/protocols/nft20.ts","../src/entities/protocols/nftx.ts","../src/entities/protocols/seaport.ts","../src/entities/protocols/sudoswap.ts","../src/entities/protocols/x2y2.ts","../src/entities/protocols/unwrapWETH.ts","../src/utils/routerTradeAdapter.ts"],"sourcesContent":["import { RoutePlanner } from '../utils/routerCommands'\n\nexport type TradeConfig = {\n  allowRevert: boolean\n}\n\nexport enum RouterTradeType {\n  UniswapTrade = 'UniswapTrade',\n  NFTTrade = 'NFTTrade',\n  UnwrapWETH = 'UnwrapWETH',\n}\n\n// interface for entities that can be encoded as a Universal Router command\nexport interface Command {\n  tradeType: RouterTradeType\n  encode(planner: RoutePlanner, config: TradeConfig): void\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { SeaportData } from './protocols/seaport'\nimport { FoundationData } from './protocols/foundation'\nimport { NFTXData } from './protocols/nftx'\nimport { NFT20Data } from './protocols/nft20'\nimport { RoutePlanner } from '../utils/routerCommands'\nimport { Command, RouterTradeType, TradeConfig } from './Command'\nimport { SudoswapData } from './protocols/sudoswap'\nimport { CryptopunkData } from './protocols/cryptopunk'\nimport { X2Y2Data } from './protocols/x2y2'\nimport { ElementData } from './protocols/element-market'\nimport { LooksRareV2Data } from './protocols/looksRareV2'\n\nexport type SupportedProtocolsData =\n  | SeaportData\n  | FoundationData\n  | NFTXData\n  | LooksRareV2Data\n  | X2Y2Data\n  | CryptopunkData\n  | NFT20Data\n  | SudoswapData\n  | ElementData\n\nexport abstract class NFTTrade<T> implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.NFTTrade\n  readonly orders: T[]\n  readonly market: Market\n\n  constructor(market: Market, orders: T[]) {\n    invariant(orders.length > 0, 'no buy Items')\n    this.market = market\n    this.orders = orders\n  }\n\n  abstract encode(planner: RoutePlanner, config: TradeConfig): void\n\n  abstract getBuyItems(): BuyItem[]\n\n  // optional parameter for the markets that accept ERC20s not just ETH\n  abstract getTotalPrice(token?: string): BigNumber\n}\n\nexport type BuyItem = {\n  tokenAddress: string\n  tokenId: BigNumberish\n  tokenType: TokenType\n  amount?: BigNumberish // for 1155\n}\n\nexport enum Market {\n  Foundation = 'foundation',\n  LooksRareV2 = 'looksrareV2',\n  NFT20 = 'nft20',\n  NFTX = 'nftx',\n  Seaport = 'seaport',\n  Sudoswap = 'Sudoswap',\n  Cryptopunks = 'cryptopunks',\n  X2Y2 = 'x2y2',\n  Element = 'element',\n}\n\nexport enum TokenType {\n  ERC721 = 'ERC721',\n  ERC1155 = 'ERC1155',\n  Cryptopunk = 'Cryptopunk',\n}\n","import { defaultAbiCoder } from 'ethers/lib/utils'\n\n/**\n * CommandTypes\n * @description Flags that modify a command's execution\n * @enum {number}\n */\nexport enum CommandType {\n  V3_SWAP_EXACT_IN = 0x00,\n  V3_SWAP_EXACT_OUT = 0x01,\n  PERMIT2_TRANSFER_FROM = 0x02,\n  PERMIT2_PERMIT_BATCH = 0x03,\n  SWEEP = 0x04,\n  TRANSFER = 0x05,\n  PAY_PORTION = 0x06,\n\n  V2_SWAP_EXACT_IN = 0x08,\n  V2_SWAP_EXACT_OUT = 0x09,\n  PERMIT2_PERMIT = 0x0a,\n  WRAP_ETH = 0x0b,\n  UNWRAP_WETH = 0x0c,\n  PERMIT2_TRANSFER_FROM_BATCH = 0x0d,\n  BALANCE_CHECK_ERC20 = 0x0e,\n\n  // NFT-related command types\n  SEAPORT_V1_5 = 0x10,\n  LOOKS_RARE_V2 = 0x11,\n  NFTX = 0x12,\n  CRYPTOPUNKS = 0x13,\n  // 0x14\n  OWNER_CHECK_721 = 0x15,\n  OWNER_CHECK_1155 = 0x16,\n  SWEEP_ERC721 = 0x17,\n\n  X2Y2_721 = 0x18,\n  SUDOSWAP = 0x19,\n  NFT20 = 0x1a,\n  X2Y2_1155 = 0x1b,\n  FOUNDATION = 0x1c,\n  SWEEP_ERC1155 = 0x1d,\n  ELEMENT_MARKET = 0x1e,\n\n  SEAPORT_V1_4 = 0x20,\n  EXECUTE_SUB_PLAN = 0x21,\n  APPROVE_ERC20 = 0x22,\n}\n\nconst ALLOW_REVERT_FLAG = 0x80\n\nconst REVERTIBLE_COMMANDS = new Set<CommandType>([\n  CommandType.SEAPORT_V1_5,\n  CommandType.SEAPORT_V1_4,\n  CommandType.NFTX,\n  CommandType.LOOKS_RARE_V2,\n  CommandType.X2Y2_721,\n  CommandType.X2Y2_1155,\n  CommandType.FOUNDATION,\n  CommandType.SUDOSWAP,\n  CommandType.NFT20,\n  CommandType.EXECUTE_SUB_PLAN,\n  CommandType.CRYPTOPUNKS,\n  CommandType.ELEMENT_MARKET,\n])\n\nconst PERMIT_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce) details,address spender,uint256 sigDeadline)'\n\nconst PERMIT_BATCH_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce)[] details,address spender,uint256 sigDeadline)'\n\nconst PERMIT2_TRANSFER_FROM_STRUCT = '(address from,address to,uint160 amount,address token)'\nconst PERMIT2_TRANSFER_FROM_BATCH_STRUCT = PERMIT2_TRANSFER_FROM_STRUCT + '[]'\n\nconst ABI_DEFINITION: { [key in CommandType]: string[] } = {\n  // Batch Reverts\n  [CommandType.EXECUTE_SUB_PLAN]: ['bytes', 'bytes[]'],\n\n  // Permit2 Actions\n  [CommandType.PERMIT2_PERMIT]: [PERMIT_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_PERMIT_BATCH]: [PERMIT_BATCH_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_TRANSFER_FROM]: ['address', 'address', 'uint160'],\n  [CommandType.PERMIT2_TRANSFER_FROM_BATCH]: [PERMIT2_TRANSFER_FROM_BATCH_STRUCT],\n\n  // Uniswap Actions\n  [CommandType.V3_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V3_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V2_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n  [CommandType.V2_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n\n  // Token Actions and Checks\n  [CommandType.WRAP_ETH]: ['address', 'uint256'],\n  [CommandType.UNWRAP_WETH]: ['address', 'uint256'],\n  [CommandType.SWEEP]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC721]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.TRANSFER]: ['address', 'address', 'uint256'],\n  [CommandType.PAY_PORTION]: ['address', 'address', 'uint256'],\n  [CommandType.BALANCE_CHECK_ERC20]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_721]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.APPROVE_ERC20]: ['address', 'uint256'],\n\n  // NFT Markets\n  [CommandType.SEAPORT_V1_5]: ['uint256', 'bytes'],\n  [CommandType.SEAPORT_V1_4]: ['uint256', 'bytes'],\n  [CommandType.NFTX]: ['uint256', 'bytes'],\n  [CommandType.LOOKS_RARE_V2]: ['uint256', 'bytes'],\n  [CommandType.X2Y2_721]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.X2Y2_1155]: ['uint256', 'bytes', 'address', 'address', 'uint256', 'uint256'],\n  [CommandType.FOUNDATION]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.SUDOSWAP]: ['uint256', 'bytes'],\n  [CommandType.NFT20]: ['uint256', 'bytes'],\n  [CommandType.CRYPTOPUNKS]: ['uint256', 'address', 'uint256'],\n  [CommandType.ELEMENT_MARKET]: ['uint256', 'bytes'],\n}\n\nexport class RoutePlanner {\n  commands: string\n  inputs: string[]\n\n  constructor() {\n    this.commands = '0x'\n    this.inputs = []\n  }\n\n  addSubPlan(subplan: RoutePlanner): void {\n    this.addCommand(CommandType.EXECUTE_SUB_PLAN, [subplan.commands, subplan.inputs], true)\n  }\n\n  addCommand(type: CommandType, parameters: any[], allowRevert = false): void {\n    let command = createCommand(type, parameters)\n    this.inputs.push(command.encodedInput)\n    if (allowRevert) {\n      if (!REVERTIBLE_COMMANDS.has(command.type)) {\n        throw new Error(`command type: ${command.type} cannot be allowed to revert`)\n      }\n      command.type = command.type | ALLOW_REVERT_FLAG\n    }\n\n    this.commands = this.commands.concat(command.type.toString(16).padStart(2, '0'))\n  }\n}\n\nexport type RouterCommand = {\n  type: CommandType\n  encodedInput: string\n}\n\nexport function createCommand(type: CommandType, parameters: any[]): RouterCommand {\n  const encodedInput = defaultAbiCoder.encode(ABI_DEFINITION[type], parameters)\n  return { type, encodedInput }\n}\n","import { BigNumber } from 'ethers'\n\ntype ChainConfig = {\n  router: string\n  creationBlock: number\n  weth: string\n}\n\nconst WETH_NOT_SUPPORTED_ON_CHAIN = '0x0000000000000000000000000000000000000000'\n\nconst CHAIN_CONFIGS: { [key: number]: ChainConfig } = {\n  // mainnet\n  [1]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    creationBlock: 17143817,\n  },\n  // goerli\n  [5]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6',\n    creationBlock: 8940568,\n  },\n  // sepolia\n  [11155111]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14',\n    creationBlock: 3543575,\n  },\n  // polygon\n  [137]: {\n    router: '0xec7BE89e9d109e7e3Fec59c222CF297125FEFda2',\n    weth: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    creationBlock: 52210153,\n  },\n  //polygon mumbai\n  [80001]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',\n    creationBlock: 35176052,\n  },\n  //optimism\n  [10]: {\n    router: '0xCb1355ff08Ab38bBCE60111F1bb2B784bE25D7e8',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 114702266,\n  },\n  // optimism goerli\n  [420]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 8887728,\n  },\n  // arbitrum\n  [42161]: {\n    router: '0x5E325eDA8064b456f4781070C0738d849c824258',\n    weth: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n    creationBlock: 169472836,\n  },\n  // arbitrum goerli\n  [421613]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3',\n    creationBlock: 18815277,\n  },\n  // celo\n  [42220]: {\n    router: '0x643770e279d5d0733f21d6dc03a8efbabf3255b4',\n    weth: WETH_NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 21407637,\n  },\n  // celo alfajores\n  [44787]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: WETH_NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 17566658,\n  },\n  // binance smart chain\n  [56]: {\n    router: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',\n    weth: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    creationBlock: 35160263,\n  },\n  // avalanche\n  [43114]: {\n    router: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',\n    weth: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    creationBlock: 40237257,\n  },\n  // base goerli\n  [84531]: {\n    router: '0xd0872d928672ae2ff74bdb2f5130ac12229cafaf',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 6915289,\n  },\n  // base mainnet\n  [8453]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 9107268,\n  },\n  [81457]: {\n    router: '0x643770E279d5D0733F21d6DC03A8efbABf3255B4',\n    weth: '0x4300000000000000000000000000000000000004',\n    creationBlock: 1116444,\n  },\n}\n\nexport const UNIVERSAL_ROUTER_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].router\n}\n\nexport const UNIVERSAL_ROUTER_CREATION_BLOCK = (chainId: number): number => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].creationBlock\n}\n\nexport const WETH_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n\n  if (CHAIN_CONFIGS[chainId].weth == WETH_NOT_SUPPORTED_ON_CHAIN) throw new Error(`Chain ${chainId} does not have WETH`)\n\n  return CHAIN_CONFIGS[chainId].weth\n}\n\nexport const PERMIT2_ADDRESS = '0x000000000022D473030F116dDEE9F6B43aC78BA3'\n\nexport const CONTRACT_BALANCE = BigNumber.from(2).pow(255)\nexport const ETH_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const E_ETH_ADDRESS = '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee'\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const MAX_UINT256 = BigNumber.from(2).pow(256).sub(1)\nexport const MAX_UINT160 = BigNumber.from(2).pow(160).sub(1)\n\nexport const SENDER_AS_RECIPIENT = '0x0000000000000000000000000000000000000001'\nexport const ROUTER_AS_RECIPIENT = '0x0000000000000000000000000000000000000002'\n\nexport const OPENSEA_CONDUIT_SPENDER_ID = 0\nexport const SUDOSWAP_SPENDER_ID = 1\n","import { BigNumber } from 'ethers'\nimport JSBI from 'jsbi'\nimport bn from 'bignumber.js'\nimport { Percent } from '@uniswap/sdk-core'\nimport { toHex } from '@uniswap/v3-sdk'\n\nexport function expandTo18DecimalsBN(n: number): BigNumber {\n  // use bn intermediately to allow decimals in intermediate calculations\n  return BigNumber.from(new bn(n).times(new bn(10).pow(18)).toFixed())\n}\n\nexport function expandTo18Decimals(n: number): JSBI {\n  return JSBI.BigInt(BigNumber.from(n).mul(BigNumber.from(10).pow(18)).toString())\n}\n\nexport function encodeFeeBips(fee: Percent): string {\n  return toHex(fee.multiply(10_000).quotient)\n}\n","import { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { Trade as V2Trade, Pair } from '@uniswap/v2-sdk'\nimport { Trade as V3Trade, Pool, encodeRouteToPath } from '@uniswap/v3-sdk'\nimport {\n  Trade as RouterTrade,\n  MixedRouteTrade,\n  Protocol,\n  IRoute,\n  RouteV2,\n  RouteV3,\n  MixedRouteSDK,\n  MixedRoute,\n  SwapOptions as RouterSwapOptions,\n  getOutputOfPools,\n  encodeMixedRouteToPath,\n  partitionMixedRouteByProtocol,\n} from '@uniswap/router-sdk'\nimport { Permit2Permit } from '../../utils/inputTokens'\nimport { Currency, TradeType, CurrencyAmount, Percent } from '@uniswap/sdk-core'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { SENDER_AS_RECIPIENT, ROUTER_AS_RECIPIENT, CONTRACT_BALANCE, ETH_ADDRESS } from '../../utils/constants'\nimport { encodeFeeBips } from '../../utils/numbers'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type FlatFeeOptions = {\n  amount: BigNumberish\n  recipient: string\n}\n\n// the existing router permit object doesn't include enough data for permit2\n// so we extend swap options with the permit2 permit\n// when safe mode is enabled, the SDK will add an extra ETH sweep for security\n// when useRouterBalance is enabled the SDK will use the balance in the router for the swap\nexport type SwapOptions = Omit<RouterSwapOptions, 'inputTokenPermit'> & {\n  useRouterBalance?: boolean\n  inputTokenPermit?: Permit2Permit\n  flatFee?: FlatFeeOptions\n  safeMode?: boolean\n}\n\nconst REFUND_ETH_PRICE_IMPACT_THRESHOLD = new Percent(50, 100)\n\ninterface Swap<TInput extends Currency, TOutput extends Currency> {\n  route: IRoute<TInput, TOutput, Pair | Pool>\n  inputAmount: CurrencyAmount<TInput>\n  outputAmount: CurrencyAmount<TOutput>\n}\n\n// Wrapper for uniswap router-sdk trade entity to encode swaps for Universal Router\n// also translates trade objects from previous (v2, v3) SDKs\nexport class UniswapTrade implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UniswapTrade\n  readonly payerIsUser: boolean\n\n  constructor(public trade: RouterTrade<Currency, Currency, TradeType>, public options: SwapOptions) {\n    if (!!options.fee && !!options.flatFee) throw new Error('Only one fee option permitted')\n\n    if (this.inputRequiresWrap) this.payerIsUser = false\n    else if (this.options.useRouterBalance) this.payerIsUser = false\n    else this.payerIsUser = true\n  }\n\n  get inputRequiresWrap(): boolean {\n    return this.trade.inputAmount.currency.isNative\n  }\n\n  encode(planner: RoutePlanner, _config: TradeConfig): void {\n    // If the input currency is the native currency, we need to wrap it with the router as the recipient\n    if (this.inputRequiresWrap) {\n      // TODO: optimize if only one v2 pool we can directly send this to the pool\n      planner.addCommand(CommandType.WRAP_ETH, [\n        ROUTER_AS_RECIPIENT,\n        this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString(),\n      ])\n    }\n    // The overall recipient at the end of the trade, SENDER_AS_RECIPIENT uses the msg.sender\n    this.options.recipient = this.options.recipient ?? SENDER_AS_RECIPIENT\n\n    // flag for whether we want to perform slippage check on aggregate output of multiple routes\n    //   1. when there are >2 exact input trades. this is only a heuristic,\n    //      as it's still more gas-expensive even in this case, but has benefits\n    //      in that the reversion probability is lower\n    const performAggregatedSlippageCheck =\n      this.trade.tradeType === TradeType.EXACT_INPUT && this.trade.routes.length > 2\n    const outputIsNative = this.trade.outputAmount.currency.isNative\n    const routerMustCustody = performAggregatedSlippageCheck || outputIsNative || hasFeeOption(this.options)\n\n    for (const swap of this.trade.swaps) {\n      switch (swap.route.protocol) {\n        case Protocol.V2:\n          addV2Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        case Protocol.V3:\n          addV3Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        case Protocol.MIXED:\n          addMixedSwap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        default:\n          throw new Error('UNSUPPORTED_TRADE_PROTOCOL')\n      }\n    }\n\n    let minimumAmountOut: BigNumber = BigNumber.from(\n      this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString()\n    )\n\n    // The router custodies for 3 reasons: to unwrap, to take a fee, and/or to do a slippage check\n    if (routerMustCustody) {\n      // If there is a fee, that percentage is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.fee) {\n        const feeBips = encodeFeeBips(this.options.fee.fee)\n        planner.addCommand(CommandType.PAY_PORTION, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.fee.recipient,\n          feeBips,\n        ])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(minimumAmountOut.mul(feeBips).div(10000))\n        }\n      }\n\n      // If there is a flat fee, that absolute amount is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.flatFee) {\n        const feeAmount = this.options.flatFee.amount\n        if (minimumAmountOut.lt(feeAmount)) throw new Error('Flat fee amount greater than minimumAmountOut')\n\n        planner.addCommand(CommandType.TRANSFER, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.flatFee.recipient,\n          feeAmount,\n        ])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(feeAmount)\n        }\n      }\n\n      // The remaining tokens that need to be sent to the user after the fee is taken will be caught\n      // by this if-else clause.\n      if (outputIsNative) {\n        planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, minimumAmountOut])\n      } else {\n        planner.addCommand(CommandType.SWEEP, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.recipient,\n          minimumAmountOut,\n        ])\n      }\n    }\n\n    if (this.inputRequiresWrap && (this.trade.tradeType === TradeType.EXACT_OUTPUT || riskOfPartialFill(this.trade))) {\n      // for exactOutput swaps that take native currency as input\n      // we need to send back the change to the user\n      planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, 0])\n    }\n\n    if (this.options.safeMode) planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, this.options.recipient, 0])\n  }\n}\n\n// encode a uniswap v2 swap\nfunction addV2Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = new V2Trade(\n    route as RouteV2<TInput, TOutput>,\n    tradeType == TradeType.EXACT_INPUT ? inputAmount : outputAmount,\n    tradeType\n  )\n\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n      // if native, we have to unwrap so keep in the router for now\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a uniswap v3 swap\nfunction addV3Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = V3Trade.createUncheckedTrade({\n    route: route as RouteV3<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const path = encodeRouteToPath(route as RouteV3<TInput, TOutput>, trade.tradeType === TradeType.EXACT_OUTPUT)\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a mixed route swap, i.e. including both v2 and v3 pools\nfunction addMixedSwap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  swap: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const { route, inputAmount, outputAmount } = swap\n  const tradeRecipient = routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient\n\n  // single hop, so it can be reduced to plain v2 or v3 swap logic\n  if (route.pools.length === 1) {\n    if (route.pools[0] instanceof Pool) {\n      return addV3Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else if (route.pools[0] instanceof Pair) {\n      return addV2Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else {\n      throw new Error('Invalid route type')\n    }\n  }\n\n  const trade = MixedRouteTrade.createUncheckedTrade({\n    route: route as MixedRoute<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const amountIn = trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient.toString()\n  const amountOut = trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient.toString()\n\n  // logic from\n  // https://github.com/Uniswap/router-sdk/blob/d8eed164e6c79519983844ca8b6a3fc24ebcb8f8/src/swapRouter.ts#L276\n  const sections = partitionMixedRouteByProtocol(route as MixedRoute<TInput, TOutput>)\n  const isLastSectionInRoute = (i: number) => {\n    return i === sections.length - 1\n  }\n\n  let outputToken\n  let inputToken = route.input.wrapped\n\n  for (let i = 0; i < sections.length; i++) {\n    const section = sections[i]\n    /// Now, we get output of this section\n    outputToken = getOutputOfPools(section, inputToken)\n\n    const newRouteOriginal = new MixedRouteSDK(\n      [...section],\n      section[0].token0.equals(inputToken) ? section[0].token0 : section[0].token1,\n      outputToken\n    )\n    const newRoute = new MixedRoute(newRouteOriginal)\n\n    /// Previous output is now input\n    inputToken = outputToken\n\n    const mixedRouteIsAllV3 = (route: MixedRouteSDK<Currency, Currency>) => {\n      return route.pools.every((pool) => pool instanceof Pool)\n    }\n\n    if (mixedRouteIsAllV3(newRoute)) {\n      const path: string = encodeMixedRouteToPath(newRoute)\n\n      planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n        // if not last section: send tokens directly to the first v2 pair of the next section\n        // note: because of the partitioning function we can be sure that the next section is v2\n        isLastSectionInRoute(i) ? tradeRecipient : (sections[i + 1][0] as Pair).liquidityToken.address,\n        i == 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOut\n        path, // path\n        payerIsUser && i === 0, // payerIsUser\n      ])\n    } else {\n      planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n        isLastSectionInRoute(i) ? tradeRecipient : ROUTER_AS_RECIPIENT, // recipient\n        i === 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOutMin\n        newRoute.path.map((pool) => pool.address), // path\n        payerIsUser && i === 0,\n      ])\n    }\n  }\n}\n\n// if price impact is very high, there's a chance of hitting max/min prices resulting in a partial fill of the swap\nfunction riskOfPartialFill(trade: RouterTrade<Currency, Currency, TradeType>): boolean {\n  return trade.priceImpact.greaterThan(REFUND_ETH_PRICE_IMPACT_THRESHOLD)\n}\n\nfunction hasFeeOption(swapOptions: SwapOptions): boolean {\n  return !!swapOptions.fee || !!swapOptions.flatFee\n}\n","import invariant from 'tiny-invariant'\nimport { ethers } from 'ethers'\nimport { PermitSingle } from '@uniswap/permit2-sdk'\nimport { CommandType, RoutePlanner } from './routerCommands'\nimport { OPENSEA_CONDUIT_SPENDER_ID, ROUTER_AS_RECIPIENT, SUDOSWAP_SPENDER_ID } from './constants'\n\nexport interface Permit2Permit extends PermitSingle {\n  signature: string\n}\n\nexport type ApproveProtocol = {\n  token: string\n  protocol: string\n}\n\nexport type Permit2TransferFrom = {\n  token: string\n  amount: string\n  recipient?: string\n}\n\nexport type InputTokenOptions = {\n  approval?: ApproveProtocol\n  permit2Permit?: Permit2Permit\n  permit2TransferFrom?: Permit2TransferFrom\n}\n\nconst SIGNATURE_LENGTH = 65\nconst EIP_2098_SIGNATURE_LENGTH = 64\n\nexport function encodePermit(planner: RoutePlanner, permit2: Permit2Permit): void {\n  let signature = permit2.signature\n\n  const length = ethers.utils.arrayify(permit2.signature).length\n  // signature data provided for EIP-1271 may have length different from ECDSA signature\n  if (length === SIGNATURE_LENGTH || length === EIP_2098_SIGNATURE_LENGTH) {\n    // sanitizes signature to cover edge cases of malformed EIP-2098 sigs and v used as recovery id\n    signature = ethers.utils.joinSignature(ethers.utils.splitSignature(permit2.signature))\n  }\n\n  planner.addCommand(CommandType.PERMIT2_PERMIT, [permit2, signature])\n}\n\n// Handles the encoding of commands needed to gather input tokens for a trade\n// Approval: The router approving another address to take tokens.\n//   note: Only seaport and sudoswap support this action. Approvals are left open.\n// Permit: A Permit2 signature-based Permit to allow the router to access a user's tokens\n// Transfer: A Permit2 TransferFrom of tokens from a user to either the router or another address\nexport function encodeInputTokenOptions(planner: RoutePlanner, options: InputTokenOptions) {\n  // first ensure that all tokens provided for encoding are the same\n  if (!!options.approval && !!options.permit2Permit)\n    invariant(options.approval.token === options.permit2Permit.details.token, `inconsistent token`)\n  if (!!options.approval && !!options.permit2TransferFrom)\n    invariant(options.approval.token === options.permit2TransferFrom.token, `inconsistent token`)\n  if (!!options.permit2TransferFrom && !!options.permit2Permit)\n    invariant(options.permit2TransferFrom.token === options.permit2Permit.details.token, `inconsistent token`)\n\n  // if an options.approval is required, add it\n  if (!!options.approval) {\n    planner.addCommand(CommandType.APPROVE_ERC20, [\n      options.approval.token,\n      mapApprovalProtocol(options.approval.protocol),\n    ])\n  }\n\n  // if this order has a options.permit2Permit, encode it\n  if (!!options.permit2Permit) {\n    encodePermit(planner, options.permit2Permit)\n  }\n\n  if (!!options.permit2TransferFrom) {\n    planner.addCommand(CommandType.PERMIT2_TRANSFER_FROM, [\n      options.permit2TransferFrom.token,\n      options.permit2TransferFrom.recipient ? options.permit2TransferFrom.recipient : ROUTER_AS_RECIPIENT,\n      options.permit2TransferFrom.amount,\n    ])\n  }\n}\n\nfunction mapApprovalProtocol(protocolAddress: string): number {\n  switch (protocolAddress.toLowerCase()) {\n    case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc': // Seaport v1.5\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x2b2e8cda09bba9660dca5cb6233787738ad68329': // Sudoswap\n      return SUDOSWAP_SPENDER_ID\n    default:\n      throw new Error('unsupported protocol address')\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { abi } from '@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { MethodParameters } from '@uniswap/v3-sdk'\nimport { Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, TradeType } from '@uniswap/sdk-core'\nimport { Command, RouterTradeType } from './entities/Command'\nimport { Market, NFTTrade, SupportedProtocolsData } from './entities/NFTTrade'\nimport { UniswapTrade, SwapOptions } from './entities/protocols/uniswap'\nimport { UnwrapWETH } from './entities/protocols/unwrapWETH'\nimport { CommandType, RoutePlanner } from './utils/routerCommands'\nimport { encodePermit } from './utils/inputTokens'\nimport { ROUTER_AS_RECIPIENT, SENDER_AS_RECIPIENT, ETH_ADDRESS } from './utils/constants'\nimport { SeaportTrade } from './entities'\n\nexport type SwapRouterConfig = {\n  sender?: string // address\n  deadline?: BigNumberish\n}\n\ntype SupportedNFTTrade = NFTTrade<SupportedProtocolsData>\n\nexport abstract class SwapRouter {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  public static swapCallParameters(trades: Command[] | Command, config: SwapRouterConfig = {}): MethodParameters {\n    if (!Array.isArray(trades)) trades = [trades]\n\n    const nftTrades = trades.filter((trade, _, []) => trade.hasOwnProperty('market')) as SupportedNFTTrade[]\n    const allowRevert = nftTrades.length == 1 && nftTrades[0].orders.length == 1 ? false : true\n    const planner = new RoutePlanner()\n\n    // track value flow to require the right amount of native value\n    let currentNativeValueInRouter = BigNumber.from(0)\n    let transactionValue = BigNumber.from(0)\n\n    // tracks the input tokens (and ETH) used to buy NFTs to allow us to sweep\n    let nftInputTokens = new Set<string>()\n\n    for (const trade of trades) {\n      /**\n       * is NFTTrade\n       */\n      if (trade.tradeType == RouterTradeType.NFTTrade) {\n        const nftTrade = trade as SupportedNFTTrade\n        nftTrade.encode(planner, { allowRevert })\n        const tradePrice = nftTrade.getTotalPrice()\n\n        if (nftTrade.market == Market.Seaport) {\n          const seaportTrade = nftTrade as SeaportTrade\n          const seaportInputTokens = seaportTrade.getInputTokens()\n          seaportInputTokens.forEach((inputToken) => {\n            nftInputTokens.add(inputToken)\n          })\n        } else {\n          nftInputTokens.add(ETH_ADDRESS)\n        }\n\n        // send enough native value to contract for NFT purchase\n        if (currentNativeValueInRouter.lt(tradePrice)) {\n          transactionValue = transactionValue.add(tradePrice.sub(currentNativeValueInRouter))\n          currentNativeValueInRouter = BigNumber.from(0)\n        } else {\n          currentNativeValueInRouter = currentNativeValueInRouter.sub(tradePrice)\n        }\n        /**\n         * is UniswapTrade\n         */\n      } else if (trade.tradeType == RouterTradeType.UniswapTrade) {\n        const uniswapTrade = trade as UniswapTrade\n        const inputIsNative = uniswapTrade.trade.inputAmount.currency.isNative\n        const outputIsNative = uniswapTrade.trade.outputAmount.currency.isNative\n        const swapOptions = uniswapTrade.options\n\n        invariant(!(inputIsNative && !!swapOptions.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n        if (!!swapOptions.inputTokenPermit) {\n          encodePermit(planner, swapOptions.inputTokenPermit)\n        }\n\n        if (inputIsNative) {\n          transactionValue = transactionValue.add(\n            BigNumber.from(uniswapTrade.trade.maximumAmountIn(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        // track amount of native currency in the router\n        if (outputIsNative && swapOptions.recipient == ROUTER_AS_RECIPIENT) {\n          currentNativeValueInRouter = currentNativeValueInRouter.add(\n            BigNumber.from(uniswapTrade.trade.minimumAmountOut(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        uniswapTrade.encode(planner, { allowRevert: false })\n        /**\n         * is UnwrapWETH\n         */\n      } else if (trade.tradeType == RouterTradeType.UnwrapWETH) {\n        const UnwrapWETH = trade as UnwrapWETH\n        trade.encode(planner, { allowRevert: false })\n        currentNativeValueInRouter = currentNativeValueInRouter.add(UnwrapWETH.amount)\n        /**\n         * else\n         */\n      } else {\n        throw 'trade must be of instance: UniswapTrade or NFTTrade'\n      }\n    }\n\n    // TODO: matches current logic for now, but should eventually only sweep for multiple NFT trades\n    // or NFT trades with potential slippage (i.e. sudo).\n    // Note: NFTXV2 sends excess ETH to the caller (router), not the specified recipient\n    nftInputTokens.forEach((inputToken) => {\n      planner.addCommand(CommandType.SWEEP, [inputToken, SENDER_AS_RECIPIENT, 0])\n    })\n    return SwapRouter.encodePlan(planner, transactionValue, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * This version does not work correctly for Seaport ERC20->NFT purchases\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given swap.\n   * @param trades to produce call parameters for\n   */\n  public static swapNFTCallParameters(trades: SupportedNFTTrade[], config: SwapRouterConfig = {}): MethodParameters {\n    let planner = new RoutePlanner()\n    let totalPrice = BigNumber.from(0)\n\n    const allowRevert = trades.length == 1 && trades[0].orders.length == 1 ? false : true\n\n    for (const trade of trades) {\n      trade.encode(planner, { allowRevert })\n      totalPrice = totalPrice.add(trade.getTotalPrice())\n    }\n\n    planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, SENDER_AS_RECIPIENT, 0])\n    return SwapRouter.encodePlan(planner, totalPrice, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trades to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapERC20CallParameters(\n    trades: RouterTrade<Currency, Currency, TradeType>,\n    options: SwapOptions\n  ): MethodParameters {\n    // TODO: use permit if signature included in swapOptions\n    const planner = new RoutePlanner()\n\n    const trade: UniswapTrade = new UniswapTrade(trades, options)\n\n    const inputCurrency = trade.trade.inputAmount.currency\n    invariant(!(inputCurrency.isNative && !!options.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n    if (options.inputTokenPermit) {\n      encodePermit(planner, options.inputTokenPermit)\n    }\n\n    const nativeCurrencyValue = inputCurrency.isNative\n      ? BigNumber.from(trade.trade.maximumAmountIn(options.slippageTolerance).quotient.toString())\n      : BigNumber.from(0)\n\n    trade.encode(planner, { allowRevert: false })\n    return SwapRouter.encodePlan(planner, nativeCurrencyValue, {\n      deadline: options.deadlineOrPreviousBlockhash ? BigNumber.from(options.deadlineOrPreviousBlockhash) : undefined,\n    })\n  }\n\n  /**\n   * Encodes a planned route into a method name and parameters for the Router contract.\n   * @param planner the planned route\n   * @param nativeCurrencyValue the native currency value of the planned route\n   * @param config the router config\n   */\n  private static encodePlan(\n    planner: RoutePlanner,\n    nativeCurrencyValue: BigNumber,\n    config: SwapRouterConfig = {}\n  ): MethodParameters {\n    const { commands, inputs } = planner\n    const functionSignature = !!config.deadline ? 'execute(bytes,bytes[],uint256)' : 'execute(bytes,bytes[])'\n    const parameters = !!config.deadline ? [commands, inputs, config.deadline] : [commands, inputs]\n    const calldata = SwapRouter.INTERFACE.encodeFunctionData(functionSignature, parameters)\n    return { calldata, value: nativeCurrencyValue.toHexString() }\n  }\n}\n","import { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type CryptopunkData = {\n  tokenId: BigNumberish\n  recipient: string\n  value: BigNumberish\n}\n\nexport class CryptopunkTrade extends NFTTrade<CryptopunkData> {\n  public static CRYPTOPUNK_ADDRESS: string = '0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb'\n\n  constructor(orders: CryptopunkData[]) {\n    super(Market.Cryptopunks, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      planner.addCommand(CommandType.CRYPTOPUNKS, [item.tokenId, item.recipient, item.value], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: CryptopunkTrade.CRYPTOPUNK_ADDRESS,\n        tokenId: item.tokenId,\n        tokenType: TokenType.Cryptopunk,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/Foundation.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type FoundationData = {\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n  referrer: string // address\n}\n\nexport class FoundationTrade extends NFTTrade<FoundationData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: FoundationData[]) {\n    super(Market.Foundation, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const calldata = FoundationTrade.INTERFACE.encodeFunctionData('buyV2', [\n        item.tokenAddress,\n        item.tokenId,\n        item.price,\n        item.referrer,\n      ])\n      planner.addCommand(\n        CommandType.FOUNDATION,\n        [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: TokenType.ERC721,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/LooksRareV2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber } from 'ethers'\nimport { ZERO_ADDRESS } from '../../utils/constants'\n\nexport type MakerOrder = {\n  quoteType: number\n  globalNonce: string\n  subsetNonce: string\n  orderNonce: string\n  strategyId: number\n  collectionType: number\n  collection: string\n  currency: string\n  signer: string\n  startTime: number\n  endTime: number\n  price: string\n  itemIds: string[]\n  amounts: string[]\n  additionalParameters: string\n}\n\nexport type TakerOrder = {\n  recipient: string\n  additionalParameters: string\n}\n\nexport type MerkleProof = {\n  value: string\n  position: number\n}\n\nexport type MerkleTree = {\n  root: string\n  proof: MerkleProof[]\n}\n\nexport type LRV2APIOrder = MakerOrder & {\n  id: string\n  hash: string\n  signature: string\n  createdAt: string\n  merkleRoot?: string\n  merkleProof?: MerkleProof[]\n  status: string\n}\n\nexport type LooksRareV2Data = {\n  apiOrder: LRV2APIOrder\n  taker: string\n}\n\nexport class LooksRareV2Trade extends NFTTrade<LooksRareV2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n  private static ERC721_ORDER = 0\n\n  constructor(orders: LooksRareV2Data[]) {\n    super(Market.LooksRareV2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    const { takerBids, makerOrders, makerSignatures, totalValue, merkleTrees } = this.refactorAPIData(this.orders)\n\n    let calldata\n    if (this.orders.length == 1) {\n      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeTakerBid', [\n        takerBids[0],\n        makerOrders[0],\n        makerSignatures[0],\n        merkleTrees[0],\n        ZERO_ADDRESS, // affiliate\n      ])\n    } else {\n      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeMultipleTakerBids', [\n        takerBids,\n        makerOrders,\n        makerSignatures,\n        merkleTrees,\n        ZERO_ADDRESS, // affiliate\n        false, // isAtomic (we deal with this in allowRevert)\n      ])\n    }\n\n    planner.addCommand(CommandType.LOOKS_RARE_V2, [totalValue, calldata], config.allowRevert)\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      const tokenAddress = item.apiOrder.collection\n      const tokenType =\n        item.apiOrder.collectionType == LooksRareV2Trade.ERC721_ORDER ? TokenType.ERC721 : TokenType.ERC1155\n      for (const tokenId of item.apiOrder.itemIds)\n        buyItems.push({\n          tokenAddress,\n          tokenId,\n          tokenType,\n        })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.apiOrder.price)\n    }\n    return total\n  }\n\n  private refactorAPIData(orders: LooksRareV2Data[]): {\n    takerBids: TakerOrder[]\n    makerOrders: MakerOrder[]\n    makerSignatures: string[]\n    totalValue: BigNumber\n    merkleTrees: MerkleTree[]\n  } {\n    let takerBids: TakerOrder[] = []\n    let makerOrders: MakerOrder[] = []\n    let makerSignatures: string[] = []\n    let totalValue: BigNumber = BigNumber.from(0)\n    let merkleTrees: MerkleTree[] = []\n\n    orders.forEach((order) => {\n      makerOrders.push({ ...order.apiOrder })\n\n      makerSignatures.push(order.apiOrder.signature)\n\n      takerBids.push({\n        recipient: order.taker,\n        additionalParameters: '0x',\n      })\n\n      totalValue = totalValue.add(BigNumber.from(order.apiOrder.price))\n\n      merkleTrees.push({\n        root: order.apiOrder.merkleRoot ?? '0x0000000000000000000000000000000000000000000000000000000000000000',\n        proof: order.apiOrder.merkleProof ?? [],\n      })\n    })\n\n    return { takerBids, makerOrders, makerSignatures, totalValue, merkleTrees }\n  }\n}\n","import abi from '../../../abis/NFT20.json'\nimport { Interface } from '@ethersproject/abi'\nimport { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFT20Data = {\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  tokenAmounts: BigNumberish[]\n  recipient: string\n  fee: BigNumberish\n  isV3: boolean\n  value: BigNumberish\n}\n\nexport class NFT20Trade extends NFTTrade<NFT20Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFT20Data[]) {\n    super(Market.NFT20, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFT20Trade.INTERFACE.encodeFunctionData('ethForNft', [\n        order.tokenAddress,\n        order.tokenIds,\n        order.tokenAmounts,\n        order.recipient,\n        order.fee,\n        order.isV3,\n      ])\n      planner.addCommand(CommandType.NFT20, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const pool of this.orders) {\n      for (const tokenId of pool.tokenIds) {\n        buyItems.push({\n          tokenAddress: pool.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/NFTXZap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFTXData = {\n  recipient: string\n  vaultId: BigNumberish\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  value: BigNumber\n  swapCalldata: string\n}\n\nexport class NFTXTrade extends NFTTrade<NFTXData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFTXData[]) {\n    super(Market.NFTX, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFTXTrade.INTERFACE.encodeFunctionData('buyAndRedeem', [\n        order.vaultId,\n        order.tokenIds.length,\n        order.tokenIds,\n        order.swapCalldata,\n        order.recipient,\n      ])\n\n      planner.addCommand(CommandType.NFTX, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const tokenId of order.tokenIds) {\n        buyItems.push({\n          tokenAddress: order.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import { BigNumber, BigNumberish } from 'ethers'\nimport { Interface } from '@ethersproject/abi'\nimport abi from '../../../abis/Seaport.json'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { ETH_ADDRESS } from '../../utils/constants'\n\nexport type SeaportData = {\n  items: Order[]\n  recipient: string // address\n  protocolAddress: string\n  inputTokenProcessing?: InputTokenProcessing[]\n}\n\nexport type InputTokenProcessing = {\n  token: string\n  permit2Permit?: Permit2Permit\n  protocolApproval: boolean\n  permit2TransferFrom: boolean\n}\n\nexport type FulfillmentComponent = {\n  orderIndex: BigNumberish\n  itemIndex: BigNumberish\n}\n\nexport type OfferItem = {\n  itemType: BigNumberish // enum\n  token: string // address\n  identifierOrCriteria: BigNumberish\n  startAmount: BigNumberish\n  endAmount: BigNumberish\n}\n\nexport type ConsiderationItem = OfferItem & {\n  recipient: string\n}\n\nexport type Order = {\n  parameters: OrderParameters\n  signature: string\n}\n\ntype OrderParameters = {\n  offerer: string // address,\n  offer: OfferItem[]\n  consideration: ConsiderationItem[]\n  orderType: BigNumberish // enum\n  startTime: BigNumberish\n  endTime: BigNumberish\n  zoneHash: string // bytes32\n  zone: string // address\n  salt: BigNumberish\n  conduitKey: string // bytes32,\n  totalOriginalConsiderationItems: BigNumberish\n}\n\nexport type AdvancedOrder = Order & {\n  numerator: BigNumber // uint120\n  denominator: BigNumber // uint120\n  extraData: string // bytes\n}\n\nexport class SeaportTrade extends NFTTrade<SeaportData> {\n  public static INTERFACE: Interface = new Interface(abi)\n  public static OPENSEA_CONDUIT_KEY: string = '0x0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000'\n\n  constructor(orders: SeaportData[]) {\n    super(Market.Seaport, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      let advancedOrders: AdvancedOrder[] = []\n      let orderFulfillments: FulfillmentComponent[][] = order.items.map((_, index) => [\n        { orderIndex: index, itemIndex: 0 },\n      ])\n      let considerationFulFillments: FulfillmentComponent[][] = this.getConsiderationFulfillments(order.items)\n\n      for (const item of order.items) {\n        const { advancedOrder } = this.getAdvancedOrderParams(item)\n        advancedOrders.push(advancedOrder)\n      }\n\n      let calldata: string\n      if (advancedOrders.length == 1) {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAdvancedOrder', [\n          advancedOrders[0],\n          [],\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n        ])\n      } else {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAvailableAdvancedOrders', [\n          advancedOrders,\n          [],\n          orderFulfillments,\n          considerationFulFillments,\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n          100, // TODO: look into making this a better number\n        ])\n      }\n\n      if (!!order.inputTokenProcessing) {\n        for (const inputToken of order.inputTokenProcessing)\n          encodeInputTokenOptions(planner, {\n            approval: inputToken.protocolApproval\n              ? { token: inputToken.token, protocol: order.protocolAddress }\n              : undefined,\n            permit2Permit: inputToken.permit2Permit,\n            permit2TransferFrom: inputToken.permit2TransferFrom\n              ? { token: inputToken.token, amount: this.getTotalOrderPrice(order, inputToken.token).toString() }\n              : undefined,\n          })\n      }\n\n      planner.addCommand(\n        this.commandMap(order.protocolAddress),\n        [this.getTotalOrderPrice(order, ETH_ADDRESS).toString(), calldata],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const offer of item.parameters.offer) {\n          buyItems.push({\n            tokenAddress: offer.token,\n            tokenId: offer.identifierOrCriteria,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getInputTokens(): Set<string> {\n    let inputTokens = new Set<string>()\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const consideration of item.parameters.consideration) {\n          const token = consideration.token.toLowerCase()\n          inputTokens.add(token)\n        }\n      }\n    }\n    return inputTokens\n  }\n\n  getTotalOrderPrice(order: SeaportData, token: string = ETH_ADDRESS): BigNumber {\n    let totalOrderPrice = BigNumber.from(0)\n    for (const item of order.items) {\n      totalOrderPrice = totalOrderPrice.add(this.calculateValue(item.parameters.consideration, token))\n    }\n    return totalOrderPrice\n  }\n\n  getTotalPrice(token: string = ETH_ADDRESS): BigNumber {\n    let totalPrice = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        totalPrice = totalPrice.add(this.calculateValue(item.parameters.consideration, token))\n      }\n    }\n    return totalPrice\n  }\n\n  private commandMap(protocolAddress: string): CommandType {\n    switch (protocolAddress.toLowerCase()) {\n      case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc': // Seaport v1.5\n        return CommandType.SEAPORT_V1_5\n      case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n        return CommandType.SEAPORT_V1_4\n      default:\n        throw new Error('unsupported Seaport address')\n    }\n  }\n\n  private getConsiderationFulfillments(protocolDatas: Order[]): FulfillmentComponent[][] {\n    let considerationFulfillments: FulfillmentComponent[][] = []\n    const considerationRecipients: string[] = []\n\n    for (const i in protocolDatas) {\n      const protocolData = protocolDatas[i]\n\n      for (const j in protocolData.parameters.consideration) {\n        const item = protocolData.parameters.consideration[j]\n\n        if (considerationRecipients.findIndex((x) => x === item.recipient) === -1) {\n          considerationRecipients.push(item.recipient)\n        }\n\n        const recipientIndex = considerationRecipients.findIndex((x) => x === item.recipient)\n\n        if (!considerationFulfillments[recipientIndex]) {\n          considerationFulfillments.push([\n            {\n              orderIndex: i,\n              itemIndex: j,\n            },\n          ])\n        } else {\n          considerationFulfillments[recipientIndex].push({\n            orderIndex: i,\n            itemIndex: j,\n          })\n        }\n      }\n    }\n    return considerationFulfillments\n  }\n\n  private getAdvancedOrderParams(data: Order): { advancedOrder: AdvancedOrder } {\n    const advancedOrder = {\n      parameters: data.parameters,\n      numerator: BigNumber.from('1'),\n      denominator: BigNumber.from('1'),\n      signature: data.signature,\n      extraData: '0x00',\n    }\n    return { advancedOrder }\n  }\n\n  private calculateValue(considerations: ConsiderationItem[], token: string): BigNumber {\n    return considerations.reduce(\n      (amt: BigNumber, consideration: ConsiderationItem) =>\n        consideration.token.toLowerCase() == token.toLowerCase() ? amt.add(consideration.startAmount) : amt,\n      BigNumber.from(0)\n    )\n  }\n}\n","import abi from '../../../abis/Sudoswap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype PairSwap = {\n  swapInfo: {\n    pair: string // address\n    nftIds: BigNumberish[]\n  }\n  tokenAddress: string // address\n  maxCost: BigNumberish\n}\n\nexport type SudoswapData = {\n  swaps: PairSwap[]\n  nftRecipient: string\n  ethRecipient: string\n  deadline: BigNumberish\n}\n\nexport class SudoswapTrade extends NFTTrade<SudoswapData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: SudoswapData[]) {\n    super(Market.Sudoswap, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = SudoswapTrade.INTERFACE.encodeFunctionData('robustSwapETHForSpecificNFTs', [\n        order.swaps.map((swap) => {\n          return { swapInfo: swap.swapInfo, maxCost: swap.maxCost }\n        }),\n        order.ethRecipient,\n        order.nftRecipient,\n        order.deadline,\n      ])\n      const value = order.swaps.reduce((prevVal, swap) => {\n        return prevVal.add(swap.maxCost)\n      }, BigNumber.from(0))\n      planner.addCommand(CommandType.SUDOSWAP, [value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        for (const tokenId of swap.swapInfo.nftIds) {\n          buyItems.push({\n            tokenAddress: swap.tokenAddress,\n            tokenId,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        total = total.add(swap.maxCost)\n      }\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/X2Y2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype X2Y2PartialData = {\n  signedInput: string\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n}\n\nexport type X2Y2_721_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC721\n}\n\nexport type X2Y2_1155_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC1155\n  tokenAmount: BigNumberish\n}\n\nexport type X2Y2Data = X2Y2_721_Data | X2Y2_1155_Data\n\nexport class X2Y2Trade extends NFTTrade<X2Y2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: X2Y2Data[]) {\n    super(Market.X2Y2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const functionSelector = X2Y2Trade.INTERFACE.getSighash(X2Y2Trade.INTERFACE.getFunction('run'))\n      const calldata = functionSelector + item.signedInput.slice(2)\n\n      if (item.tokenType == TokenType.ERC721) {\n        planner.addCommand(\n          CommandType.X2Y2_721,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n          config.allowRevert\n        )\n      } else if (item.tokenType == TokenType.ERC1155) {\n        planner.addCommand(\n          CommandType.X2Y2_1155,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId, item.tokenAmount],\n          config.allowRevert\n        )\n      }\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: item.tokenType,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumberish } from 'ethers'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { ROUTER_AS_RECIPIENT, WETH_ADDRESS } from '../../utils/constants'\n\nexport class UnwrapWETH implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UnwrapWETH\n  readonly permit2Data: Permit2Permit\n  readonly wethAddress: string\n  readonly amount: BigNumberish\n\n  constructor(amount: BigNumberish, chainId: number, permit2?: Permit2Permit) {\n    this.wethAddress = WETH_ADDRESS(chainId)\n    this.amount = amount\n\n    if (!!permit2) {\n      invariant(\n        permit2.details.token.toLowerCase() === this.wethAddress.toLowerCase(),\n        `must be permitting WETH address: ${this.wethAddress}`\n      )\n      invariant(permit2.details.amount >= amount, `Did not permit enough WETH for unwrapWETH transaction`)\n      this.permit2Data = permit2\n    }\n  }\n\n  encode(planner: RoutePlanner, _: TradeConfig): void {\n    encodeInputTokenOptions(planner, {\n      permit2Permit: this.permit2Data,\n      permit2TransferFrom: {\n        token: this.wethAddress,\n        amount: this.amount.toString(),\n      },\n    })\n    planner.addCommand(CommandType.UNWRAP_WETH, [ROUTER_AS_RECIPIENT, this.amount])\n  }\n}\n","import { MixedRouteSDK, Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount, Ether, Token, TradeType } from '@uniswap/sdk-core'\nimport { Pair, Route as V2Route } from '@uniswap/v2-sdk'\nimport { Pool, Route as V3Route, FeeAmount } from '@uniswap/v3-sdk'\nimport { BigNumber } from 'ethers'\nimport { ETH_ADDRESS, E_ETH_ADDRESS } from './constants'\n\nexport type TokenInRoute = {\n  address: string\n  chainId: number\n  symbol: string\n  decimals: string\n  name?: string\n  buyFeeBps?: string\n  sellFeeBps?: string\n}\n\nexport enum PoolType {\n  V2Pool = 'v2-pool',\n  V3Pool = 'v3-pool',\n}\n\nexport type V2Reserve = {\n  token: TokenInRoute\n  quotient: string\n}\n\nexport type V2PoolInRoute = {\n  type: PoolType.V2Pool\n  address?: string\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  reserve0: V2Reserve\n  reserve1: V2Reserve\n  amountIn?: string\n  amountOut?: string\n}\n\nexport type V3PoolInRoute = {\n  type: PoolType.V3Pool\n  address?: string\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  sqrtRatioX96: string\n  liquidity: string\n  tickCurrent: string\n  fee: string\n  amountIn?: string\n  amountOut?: string\n}\n\nexport type PartialClassicQuote = {\n  // We need tokenIn/Out to support native currency\n  tokenIn: string\n  tokenOut: string\n  tradeType: TradeType\n  route: Array<(V3PoolInRoute | V2PoolInRoute)[]>\n}\n\ninterface RouteResult {\n  routev3: V3Route<Currency, Currency> | null\n  routev2: V2Route<Currency, Currency> | null\n  mixedRoute: MixedRouteSDK<Currency, Currency> | null\n  inputAmount: CurrencyAmount<Currency>\n  outputAmount: CurrencyAmount<Currency>\n}\n\nexport const isNativeCurrency = (address: string) =>\n  address.toLowerCase() === ETH_ADDRESS.toLowerCase() || address.toLowerCase() === E_ETH_ADDRESS.toLowerCase()\n\n// Helper class to convert routing-specific quote entities to RouterTrade entities\n// the returned RouterTrade can then be used to build the UniswapTrade entity in this package\nexport class RouterTradeAdapter {\n  // Generate a RouterTrade using fields from a classic quote response\n  static fromClassicQuote(quote: PartialClassicQuote) {\n    const { route, tokenIn, tokenOut } = quote\n\n    if (!route) throw new Error('Expected route to be present')\n    if (!route.length) throw new Error('Expected there to be at least one route')\n    if (route.some((r) => !r.length)) throw new Error('Expected all routes to have at least one pool')\n    const firstRoute = route[0]\n\n    const tokenInData = firstRoute[0].tokenIn\n    const tokenOutData = firstRoute[firstRoute.length - 1].tokenOut\n\n    if (!tokenInData || !tokenOutData) throw new Error('Expected both tokenIn and tokenOut to be present')\n    if (tokenInData.chainId !== tokenOutData.chainId)\n      throw new Error('Expected tokenIn and tokenOut to be have same chainId')\n\n    const parsedCurrencyIn = RouterTradeAdapter.toCurrency(isNativeCurrency(tokenIn), tokenInData)\n    const parsedCurrencyOut = RouterTradeAdapter.toCurrency(isNativeCurrency(tokenOut), tokenOutData)\n\n    const typedRoutes: RouteResult[] = route.map((subRoute) => {\n      const rawAmountIn = subRoute[0].amountIn\n      const rawAmountOut = subRoute[subRoute.length - 1].amountOut\n\n      if (!rawAmountIn || !rawAmountOut) {\n        throw new Error('Expected both raw amountIn and raw amountOut to be present')\n      }\n\n      const inputAmount = CurrencyAmount.fromRawAmount(parsedCurrencyIn, rawAmountIn)\n      const outputAmount = CurrencyAmount.fromRawAmount(parsedCurrencyOut, rawAmountOut)\n\n      const isOnlyV2 = RouterTradeAdapter.isVersionedRoute<V2PoolInRoute>(PoolType.V2Pool, subRoute)\n      const isOnlyV3 = RouterTradeAdapter.isVersionedRoute<V3PoolInRoute>(PoolType.V3Pool, subRoute)\n\n      return {\n        routev3: isOnlyV3\n          ? new V3Route(\n              (subRoute as V3PoolInRoute[]).map(RouterTradeAdapter.toPool),\n              parsedCurrencyIn,\n              parsedCurrencyOut\n            )\n          : null,\n        routev2: isOnlyV2\n          ? new V2Route(\n              (subRoute as V2PoolInRoute[]).map(RouterTradeAdapter.toPair),\n              parsedCurrencyIn,\n              parsedCurrencyOut\n            )\n          : null,\n        mixedRoute:\n          !isOnlyV3 && !isOnlyV2\n            ? new MixedRouteSDK(subRoute.map(RouterTradeAdapter.toPoolOrPair), parsedCurrencyIn, parsedCurrencyOut)\n            : null,\n        inputAmount,\n        outputAmount,\n      }\n    })\n\n    return new RouterTrade({\n      v2Routes: typedRoutes\n        .filter((route) => route.routev2)\n        .map((route) => ({\n          routev2: route.routev2 as V2Route<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      v3Routes: typedRoutes\n        .filter((route) => route.routev3)\n        .map((route) => ({\n          routev3: route.routev3 as V3Route<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      mixedRoutes: typedRoutes\n        .filter((route) => route.mixedRoute)\n        .map((route) => ({\n          mixedRoute: route.mixedRoute as MixedRouteSDK<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      tradeType: quote.tradeType,\n    })\n  }\n\n  private static toCurrency(isNative: boolean, token: TokenInRoute): Currency {\n    if (isNative) {\n      return Ether.onChain(token.chainId)\n    }\n    return this.toToken(token)\n  }\n\n  private static toPoolOrPair = (pool: V3PoolInRoute | V2PoolInRoute): Pool | Pair => {\n    return pool.type === PoolType.V3Pool ? RouterTradeAdapter.toPool(pool) : RouterTradeAdapter.toPair(pool)\n  }\n\n  private static toToken(token: TokenInRoute): Token {\n    const { chainId, address, decimals, symbol, buyFeeBps, sellFeeBps } = token\n    return new Token(\n      chainId,\n      address,\n      parseInt(decimals.toString()),\n      symbol,\n      /* name */ undefined,\n      false,\n      buyFeeBps ? BigNumber.from(buyFeeBps) : undefined,\n      sellFeeBps ? BigNumber.from(sellFeeBps) : undefined\n    )\n  }\n\n  private static toPool({ fee, sqrtRatioX96, liquidity, tickCurrent, tokenIn, tokenOut }: V3PoolInRoute): Pool {\n    return new Pool(\n      RouterTradeAdapter.toToken(tokenIn),\n      RouterTradeAdapter.toToken(tokenOut),\n      parseInt(fee) as FeeAmount,\n      sqrtRatioX96,\n      liquidity,\n      parseInt(tickCurrent)\n    )\n  }\n\n  private static toPair = ({ reserve0, reserve1 }: V2PoolInRoute): Pair => {\n    return new Pair(\n      CurrencyAmount.fromRawAmount(RouterTradeAdapter.toToken(reserve0.token), reserve0.quotient),\n      CurrencyAmount.fromRawAmount(RouterTradeAdapter.toToken(reserve1.token), reserve1.quotient)\n    )\n  }\n\n  private static isVersionedRoute<T extends V2PoolInRoute | V3PoolInRoute>(\n    type: PoolType,\n    route: (V3PoolInRoute | V2PoolInRoute)[]\n  ): route is T[] {\n    return route.every((pool) => pool.type === type)\n  }\n}\n"],"names":["RouterTradeType","NFTTrade","market","orders","length","invariant","Market","TokenType","CommandType","ALLOW_REVERT_FLAG","REVERTIBLE_COMMANDS","Set","SEAPORT_V1_5","SEAPORT_V1_4","NFTX","LOOKS_RARE_V2","X2Y2_721","X2Y2_1155","FOUNDATION","SUDOSWAP","NFT20","EXECUTE_SUB_PLAN","CRYPTOPUNKS","ELEMENT_MARKET","PERMIT_STRUCT","PERMIT_BATCH_STRUCT","PERMIT2_TRANSFER_FROM_STRUCT","PERMIT2_TRANSFER_FROM_BATCH_STRUCT","ABI_DEFINITION","PERMIT2_PERMIT","PERMIT2_PERMIT_BATCH","PERMIT2_TRANSFER_FROM","PERMIT2_TRANSFER_FROM_BATCH","V3_SWAP_EXACT_IN","V3_SWAP_EXACT_OUT","V2_SWAP_EXACT_IN","V2_SWAP_EXACT_OUT","WRAP_ETH","UNWRAP_WETH","SWEEP","SWEEP_ERC721","SWEEP_ERC1155","TRANSFER","PAY_PORTION","BALANCE_CHECK_ERC20","OWNER_CHECK_721","OWNER_CHECK_1155","APPROVE_ERC20","RoutePlanner","commands","inputs","addSubPlan","subplan","addCommand","type","parameters","allowRevert","command","createCommand","push","encodedInput","has","Error","concat","toString","padStart","defaultAbiCoder","encode","WETH_NOT_SUPPORTED_ON_CHAIN","CHAIN_CONFIGS","router","weth","creationBlock","UNIVERSAL_ROUTER_ADDRESS","chainId","UNIVERSAL_ROUTER_CREATION_BLOCK","WETH_ADDRESS","PERMIT2_ADDRESS","CONTRACT_BALANCE","BigNumber","from","pow","ETH_ADDRESS","E_ETH_ADDRESS","ZERO_ADDRESS","SENDER_AS_RECIPIENT","ROUTER_AS_RECIPIENT","OPENSEA_CONDUIT_SPENDER_ID","SUDOSWAP_SPENDER_ID","encodeFeeBips","fee","toHex","multiply","quotient","REFUND_ETH_PRICE_IMPACT_THRESHOLD","Percent","UniswapTrade","trade","options","flatFee","inputRequiresWrap","payerIsUser","useRouterBalance","planner","_config","maximumAmountIn","slippageTolerance","recipient","performAggregatedSlippageCheck","tradeType","TradeType","EXACT_INPUT","routes","outputIsNative","outputAmount","currency","isNative","routerMustCustody","hasFeeOption","swaps","swap","route","protocol","Protocol","V2","addV2Swap","V3","addV3Swap","MIXED","addMixedSwap","minimumAmountOut","feeBips","wrapped","address","EXACT_OUTPUT","sub","mul","div","feeAmount","amount","lt","riskOfPartialFill","safeMode","inputAmount","V2Trade","path","map","pool","V3Trade","createUncheckedTrade","encodeRouteToPath","tradeRecipient","pools","Pool","Pair","MixedRouteTrade","amountIn","amountOut","sections","partitionMixedRouteByProtocol","isLastSectionInRoute","i","outputToken","inputToken","input","section","getOutputOfPools","newRouteOriginal","MixedRouteSDK","token0","equals","token1","newRoute","MixedRoute","mixedRouteIsAllV3","every","encodeMixedRouteToPath","liquidityToken","priceImpact","greaterThan","swapOptions","SIGNATURE_LENGTH","EIP_2098_SIGNATURE_LENGTH","encodePermit","permit2","signature","ethers","utils","arrayify","joinSignature","splitSignature","encodeInputTokenOptions","approval","permit2Permit","token","details","permit2TransferFrom","mapApprovalProtocol","protocolAddress","toLowerCase","SwapRouter","swapCallParameters","trades","config","Array","isArray","nftTrades","filter","_","hasOwnProperty","currentNativeValueInRouter","transactionValue","nftInputTokens","nftTrade","tradePrice","getTotalPrice","Seaport","seaportTrade","seaportInputTokens","getInputTokens","forEach","add","uniswapTrade","inputIsNative","inputTokenPermit","UnwrapWETH","encodePlan","swapNFTCallParameters","totalPrice","swapERC20CallParameters","inputCurrency","nativeCurrencyValue","deadline","deadlineOrPreviousBlockhash","undefined","functionSignature","calldata","INTERFACE","encodeFunctionData","value","toHexString","Interface","abi","CryptopunkTrade","Cryptopunks","item","tokenId","getBuyItems","buyItems","tokenAddress","CRYPTOPUNK_ADDRESS","tokenType","Cryptopunk","total","FoundationTrade","Foundation","price","referrer","ERC721","LooksRareV2Trade","LooksRareV2","refactorAPIData","takerBids","makerOrders","makerSignatures","totalValue","merkleTrees","apiOrder","collection","collectionType","ERC721_ORDER","ERC1155","itemIds","order","taker","additionalParameters","root","merkleRoot","proof","merkleProof","NFT20Trade","tokenIds","tokenAmounts","isV3","NFTXTrade","vaultId","swapCalldata","SeaportTrade","advancedOrders","orderFulfillments","items","index","orderIndex","itemIndex","considerationFulFillments","getConsiderationFulfillments","getAdvancedOrderParams","advancedOrder","OPENSEA_CONDUIT_KEY","inputTokenProcessing","protocolApproval","getTotalOrderPrice","commandMap","offer","identifierOrCriteria","inputTokens","consideration","totalOrderPrice","calculateValue","protocolDatas","considerationFulfillments","considerationRecipients","protocolData","j","findIndex","x","recipientIndex","data","numerator","denominator","extraData","considerations","reduce","amt","startAmount","SudoswapTrade","Sudoswap","swapInfo","maxCost","ethRecipient","nftRecipient","prevVal","nftIds","X2Y2Trade","X2Y2","functionSelector","getSighash","getFunction","signedInput","slice","tokenAmount","wethAddress","permit2Data","PoolType","isNativeCurrency","RouterTradeAdapter","fromClassicQuote","quote","tokenIn","tokenOut","some","r","firstRoute","tokenInData","tokenOutData","parsedCurrencyIn","toCurrency","parsedCurrencyOut","typedRoutes","subRoute","rawAmountIn","rawAmountOut","CurrencyAmount","fromRawAmount","isOnlyV2","isVersionedRoute","V2Pool","isOnlyV3","V3Pool","routev3","V3Route","toPool","routev2","V2Route","toPair","mixedRoute","toPoolOrPair","RouterTrade","v2Routes","v3Routes","mixedRoutes","Ether","onChain","toToken","decimals","symbol","buyFeeBps","sellFeeBps","Token","parseInt","sqrtRatioX96","liquidity","tickCurrent","reserve0","reserve1"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"universal-router-sdk.cjs.development.js","sources":["../src/entities/Command.ts","../src/entities/NFTTrade.ts","../src/utils/routerCommands.ts","../src/utils/constants.ts","../src/utils/numbers.ts","../src/entities/protocols/uniswap.ts","../src/utils/inputTokens.ts","../src/swapRouter.ts","../src/entities/protocols/cryptopunk.ts","../src/entities/protocols/foundation.ts","../src/entities/protocols/looksRareV2.ts","../src/entities/protocols/nft20.ts","../src/entities/protocols/nftx.ts","../src/entities/protocols/seaport.ts","../src/entities/protocols/sudoswap.ts","../src/entities/protocols/x2y2.ts","../src/entities/protocols/unwrapWETH.ts","../src/utils/routerTradeAdapter.ts"],"sourcesContent":["import { RoutePlanner } from '../utils/routerCommands'\n\nexport type TradeConfig = {\n  allowRevert: boolean\n}\n\nexport enum RouterTradeType {\n  UniswapTrade = 'UniswapTrade',\n  NFTTrade = 'NFTTrade',\n  UnwrapWETH = 'UnwrapWETH',\n}\n\n// interface for entities that can be encoded as a Universal Router command\nexport interface Command {\n  tradeType: RouterTradeType\n  encode(planner: RoutePlanner, config: TradeConfig): void\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { SeaportData } from './protocols/seaport'\nimport { FoundationData } from './protocols/foundation'\nimport { NFTXData } from './protocols/nftx'\nimport { NFT20Data } from './protocols/nft20'\nimport { RoutePlanner } from '../utils/routerCommands'\nimport { Command, RouterTradeType, TradeConfig } from './Command'\nimport { SudoswapData } from './protocols/sudoswap'\nimport { CryptopunkData } from './protocols/cryptopunk'\nimport { X2Y2Data } from './protocols/x2y2'\nimport { ElementData } from './protocols/element-market'\nimport { LooksRareV2Data } from './protocols/looksRareV2'\n\nexport type SupportedProtocolsData =\n  | SeaportData\n  | FoundationData\n  | NFTXData\n  | LooksRareV2Data\n  | X2Y2Data\n  | CryptopunkData\n  | NFT20Data\n  | SudoswapData\n  | ElementData\n\nexport abstract class NFTTrade<T> implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.NFTTrade\n  readonly orders: T[]\n  readonly market: Market\n\n  constructor(market: Market, orders: T[]) {\n    invariant(orders.length > 0, 'no buy Items')\n    this.market = market\n    this.orders = orders\n  }\n\n  abstract encode(planner: RoutePlanner, config: TradeConfig): void\n\n  abstract getBuyItems(): BuyItem[]\n\n  // optional parameter for the markets that accept ERC20s not just ETH\n  abstract getTotalPrice(token?: string): BigNumber\n}\n\nexport type BuyItem = {\n  tokenAddress: string\n  tokenId: BigNumberish\n  tokenType: TokenType\n  amount?: BigNumberish // for 1155\n}\n\nexport enum Market {\n  Foundation = 'foundation',\n  LooksRareV2 = 'looksrareV2',\n  NFT20 = 'nft20',\n  NFTX = 'nftx',\n  Seaport = 'seaport',\n  Sudoswap = 'Sudoswap',\n  Cryptopunks = 'cryptopunks',\n  X2Y2 = 'x2y2',\n  Element = 'element',\n}\n\nexport enum TokenType {\n  ERC721 = 'ERC721',\n  ERC1155 = 'ERC1155',\n  Cryptopunk = 'Cryptopunk',\n}\n","import { defaultAbiCoder } from 'ethers/lib/utils'\n\n/**\n * CommandTypes\n * @description Flags that modify a command's execution\n * @enum {number}\n */\nexport enum CommandType {\n  V3_SWAP_EXACT_IN = 0x00,\n  V3_SWAP_EXACT_OUT = 0x01,\n  PERMIT2_TRANSFER_FROM = 0x02,\n  PERMIT2_PERMIT_BATCH = 0x03,\n  SWEEP = 0x04,\n  TRANSFER = 0x05,\n  PAY_PORTION = 0x06,\n\n  V2_SWAP_EXACT_IN = 0x08,\n  V2_SWAP_EXACT_OUT = 0x09,\n  PERMIT2_PERMIT = 0x0a,\n  WRAP_ETH = 0x0b,\n  UNWRAP_WETH = 0x0c,\n  PERMIT2_TRANSFER_FROM_BATCH = 0x0d,\n  BALANCE_CHECK_ERC20 = 0x0e,\n\n  // NFT-related command types\n  SEAPORT_V1_5 = 0x10,\n  LOOKS_RARE_V2 = 0x11,\n  NFTX = 0x12,\n  CRYPTOPUNKS = 0x13,\n  // 0x14\n  OWNER_CHECK_721 = 0x15,\n  OWNER_CHECK_1155 = 0x16,\n  SWEEP_ERC721 = 0x17,\n\n  X2Y2_721 = 0x18,\n  SUDOSWAP = 0x19,\n  NFT20 = 0x1a,\n  X2Y2_1155 = 0x1b,\n  FOUNDATION = 0x1c,\n  SWEEP_ERC1155 = 0x1d,\n  ELEMENT_MARKET = 0x1e,\n\n  SEAPORT_V1_4 = 0x20,\n  EXECUTE_SUB_PLAN = 0x21,\n  APPROVE_ERC20 = 0x22,\n}\n\nconst ALLOW_REVERT_FLAG = 0x80\n\nconst REVERTIBLE_COMMANDS = new Set<CommandType>([\n  CommandType.SEAPORT_V1_5,\n  CommandType.SEAPORT_V1_4,\n  CommandType.NFTX,\n  CommandType.LOOKS_RARE_V2,\n  CommandType.X2Y2_721,\n  CommandType.X2Y2_1155,\n  CommandType.FOUNDATION,\n  CommandType.SUDOSWAP,\n  CommandType.NFT20,\n  CommandType.EXECUTE_SUB_PLAN,\n  CommandType.CRYPTOPUNKS,\n  CommandType.ELEMENT_MARKET,\n])\n\nconst PERMIT_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce) details,address spender,uint256 sigDeadline)'\n\nconst PERMIT_BATCH_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce)[] details,address spender,uint256 sigDeadline)'\n\nconst PERMIT2_TRANSFER_FROM_STRUCT = '(address from,address to,uint160 amount,address token)'\nconst PERMIT2_TRANSFER_FROM_BATCH_STRUCT = PERMIT2_TRANSFER_FROM_STRUCT + '[]'\n\nconst ABI_DEFINITION: { [key in CommandType]: string[] } = {\n  // Batch Reverts\n  [CommandType.EXECUTE_SUB_PLAN]: ['bytes', 'bytes[]'],\n\n  // Permit2 Actions\n  [CommandType.PERMIT2_PERMIT]: [PERMIT_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_PERMIT_BATCH]: [PERMIT_BATCH_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_TRANSFER_FROM]: ['address', 'address', 'uint160'],\n  [CommandType.PERMIT2_TRANSFER_FROM_BATCH]: [PERMIT2_TRANSFER_FROM_BATCH_STRUCT],\n\n  // Uniswap Actions\n  [CommandType.V3_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V3_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V2_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n  [CommandType.V2_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n\n  // Token Actions and Checks\n  [CommandType.WRAP_ETH]: ['address', 'uint256'],\n  [CommandType.UNWRAP_WETH]: ['address', 'uint256'],\n  [CommandType.SWEEP]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC721]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.TRANSFER]: ['address', 'address', 'uint256'],\n  [CommandType.PAY_PORTION]: ['address', 'address', 'uint256'],\n  [CommandType.BALANCE_CHECK_ERC20]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_721]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.APPROVE_ERC20]: ['address', 'uint256'],\n\n  // NFT Markets\n  [CommandType.SEAPORT_V1_5]: ['uint256', 'bytes'],\n  [CommandType.SEAPORT_V1_4]: ['uint256', 'bytes'],\n  [CommandType.NFTX]: ['uint256', 'bytes'],\n  [CommandType.LOOKS_RARE_V2]: ['uint256', 'bytes'],\n  [CommandType.X2Y2_721]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.X2Y2_1155]: ['uint256', 'bytes', 'address', 'address', 'uint256', 'uint256'],\n  [CommandType.FOUNDATION]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.SUDOSWAP]: ['uint256', 'bytes'],\n  [CommandType.NFT20]: ['uint256', 'bytes'],\n  [CommandType.CRYPTOPUNKS]: ['uint256', 'address', 'uint256'],\n  [CommandType.ELEMENT_MARKET]: ['uint256', 'bytes'],\n}\n\nexport class RoutePlanner {\n  commands: string\n  inputs: string[]\n\n  constructor() {\n    this.commands = '0x'\n    this.inputs = []\n  }\n\n  addSubPlan(subplan: RoutePlanner): void {\n    this.addCommand(CommandType.EXECUTE_SUB_PLAN, [subplan.commands, subplan.inputs], true)\n  }\n\n  addCommand(type: CommandType, parameters: any[], allowRevert = false): void {\n    let command = createCommand(type, parameters)\n    this.inputs.push(command.encodedInput)\n    if (allowRevert) {\n      if (!REVERTIBLE_COMMANDS.has(command.type)) {\n        throw new Error(`command type: ${command.type} cannot be allowed to revert`)\n      }\n      command.type = command.type | ALLOW_REVERT_FLAG\n    }\n\n    this.commands = this.commands.concat(command.type.toString(16).padStart(2, '0'))\n  }\n}\n\nexport type RouterCommand = {\n  type: CommandType\n  encodedInput: string\n}\n\nexport function createCommand(type: CommandType, parameters: any[]): RouterCommand {\n  const encodedInput = defaultAbiCoder.encode(ABI_DEFINITION[type], parameters)\n  return { type, encodedInput }\n}\n","import { BigNumber } from 'ethers'\n\ntype ChainConfig = {\n  router: string\n  creationBlock: number\n  weth: string\n}\n\nconst WETH_NOT_SUPPORTED_ON_CHAIN = '0x0000000000000000000000000000000000000000'\n\nconst CHAIN_CONFIGS: { [key: number]: ChainConfig } = {\n  // mainnet\n  [1]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    creationBlock: 17143817,\n  },\n  // goerli\n  [5]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6',\n    creationBlock: 8940568,\n  },\n  // sepolia\n  [11155111]: {\n    router: '0x1678413030D5f7719e17Ba37e77134268f9b8193',\n    weth: '0xb16F35c0Ae2912430DAc15764477E179D9B9EbEa',\n    creationBlock: 3543575,\n  },\n  // polygon\n  [137]: {\n    router: '0xec7BE89e9d109e7e3Fec59c222CF297125FEFda2',\n    weth: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    creationBlock: 52210153,\n  },\n  //polygon mumbai\n  [80001]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',\n    creationBlock: 35176052,\n  },\n  //optimism\n  [10]: {\n    router: '0xCb1355ff08Ab38bBCE60111F1bb2B784bE25D7e8',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 114702266,\n  },\n  // optimism goerli\n  [420]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 8887728,\n  },\n  // arbitrum\n  [42161]: {\n    router: '0x5E325eDA8064b456f4781070C0738d849c824258',\n    weth: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n    creationBlock: 169472836,\n  },\n  // arbitrum goerli\n  [421613]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3',\n    creationBlock: 18815277,\n  },\n  // celo\n  [42220]: {\n    router: '0x643770e279d5d0733f21d6dc03a8efbabf3255b4',\n    weth: WETH_NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 21407637,\n  },\n  // celo alfajores\n  [44787]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: WETH_NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 17566658,\n  },\n  // binance smart chain\n  [56]: {\n    router: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',\n    weth: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    creationBlock: 35160263,\n  },\n  // avalanche\n  [43114]: {\n    router: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',\n    weth: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    creationBlock: 40237257,\n  },\n  // base goerli\n  [84531]: {\n    router: '0xd0872d928672ae2ff74bdb2f5130ac12229cafaf',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 6915289,\n  },\n  // base mainnet\n  [8453]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 9107268,\n  },\n  [81457]: {\n    router: '0x643770E279d5D0733F21d6DC03A8efbABf3255B4',\n    weth: '0x4300000000000000000000000000000000000004',\n    creationBlock: 1116444,\n  },\n}\n\nexport const UNIVERSAL_ROUTER_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].router\n}\n\nexport const UNIVERSAL_ROUTER_CREATION_BLOCK = (chainId: number): number => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].creationBlock\n}\n\nexport const WETH_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n\n  if (CHAIN_CONFIGS[chainId].weth == WETH_NOT_SUPPORTED_ON_CHAIN) throw new Error(`Chain ${chainId} does not have WETH`)\n\n  return CHAIN_CONFIGS[chainId].weth\n}\n\nexport const PERMIT2_ADDRESS = '0x000000000022D473030F116dDEE9F6B43aC78BA3'\n\nexport const CONTRACT_BALANCE = BigNumber.from(2).pow(255)\nexport const ETH_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const E_ETH_ADDRESS = '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee'\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const MAX_UINT256 = BigNumber.from(2).pow(256).sub(1)\nexport const MAX_UINT160 = BigNumber.from(2).pow(160).sub(1)\n\nexport const SENDER_AS_RECIPIENT = '0x0000000000000000000000000000000000000001'\nexport const ROUTER_AS_RECIPIENT = '0x0000000000000000000000000000000000000002'\n\nexport const OPENSEA_CONDUIT_SPENDER_ID = 0\nexport const SUDOSWAP_SPENDER_ID = 1\n","import { BigNumber } from 'ethers'\nimport JSBI from 'jsbi'\nimport bn from 'bignumber.js'\nimport { Percent } from '@uniswap/sdk-core'\nimport { toHex } from '@uniswap/v3-sdk'\n\nexport function expandTo18DecimalsBN(n: number): BigNumber {\n  // use bn intermediately to allow decimals in intermediate calculations\n  return BigNumber.from(new bn(n).times(new bn(10).pow(18)).toFixed())\n}\n\nexport function expandTo18Decimals(n: number): JSBI {\n  return JSBI.BigInt(BigNumber.from(n).mul(BigNumber.from(10).pow(18)).toString())\n}\n\nexport function encodeFeeBips(fee: Percent): string {\n  return toHex(fee.multiply(10_000).quotient)\n}\n","import { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { Trade as V2Trade, Pair } from '@uniswap/v2-sdk'\nimport { Trade as V3Trade, Pool, encodeRouteToPath } from '@uniswap/v3-sdk'\nimport {\n  Trade as RouterTrade,\n  MixedRouteTrade,\n  Protocol,\n  IRoute,\n  RouteV2,\n  RouteV3,\n  MixedRouteSDK,\n  MixedRoute,\n  SwapOptions as RouterSwapOptions,\n  getOutputOfPools,\n  encodeMixedRouteToPath,\n  partitionMixedRouteByProtocol,\n} from '@uniswap/router-sdk'\nimport { Permit2Permit } from '../../utils/inputTokens'\nimport { Currency, TradeType, CurrencyAmount, Percent } from '@uniswap/sdk-core'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { SENDER_AS_RECIPIENT, ROUTER_AS_RECIPIENT, CONTRACT_BALANCE, ETH_ADDRESS } from '../../utils/constants'\nimport { encodeFeeBips } from '../../utils/numbers'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type FlatFeeOptions = {\n  amount: BigNumberish\n  recipient: string\n}\n\n// the existing router permit object doesn't include enough data for permit2\n// so we extend swap options with the permit2 permit\n// when safe mode is enabled, the SDK will add an extra ETH sweep for security\n// when useRouterBalance is enabled the SDK will use the balance in the router for the swap\nexport type SwapOptions = Omit<RouterSwapOptions, 'inputTokenPermit'> & {\n  useRouterBalance?: boolean\n  inputTokenPermit?: Permit2Permit\n  flatFee?: FlatFeeOptions\n  safeMode?: boolean\n}\n\nconst REFUND_ETH_PRICE_IMPACT_THRESHOLD = new Percent(50, 100)\n\ninterface Swap<TInput extends Currency, TOutput extends Currency> {\n  route: IRoute<TInput, TOutput, Pair | Pool>\n  inputAmount: CurrencyAmount<TInput>\n  outputAmount: CurrencyAmount<TOutput>\n}\n\n// Wrapper for uniswap router-sdk trade entity to encode swaps for Universal Router\n// also translates trade objects from previous (v2, v3) SDKs\nexport class UniswapTrade implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UniswapTrade\n  readonly payerIsUser: boolean\n\n  constructor(public trade: RouterTrade<Currency, Currency, TradeType>, public options: SwapOptions) {\n    if (!!options.fee && !!options.flatFee) throw new Error('Only one fee option permitted')\n\n    if (this.inputRequiresWrap) this.payerIsUser = false\n    else if (this.options.useRouterBalance) this.payerIsUser = false\n    else this.payerIsUser = true\n  }\n\n  get inputRequiresWrap(): boolean {\n    return this.trade.inputAmount.currency.isNative\n  }\n\n  encode(planner: RoutePlanner, _config: TradeConfig): void {\n    // If the input currency is the native currency, we need to wrap it with the router as the recipient\n    if (this.inputRequiresWrap) {\n      // TODO: optimize if only one v2 pool we can directly send this to the pool\n      planner.addCommand(CommandType.WRAP_ETH, [\n        ROUTER_AS_RECIPIENT,\n        this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString(),\n      ])\n    }\n    // The overall recipient at the end of the trade, SENDER_AS_RECIPIENT uses the msg.sender\n    this.options.recipient = this.options.recipient ?? SENDER_AS_RECIPIENT\n\n    // flag for whether we want to perform slippage check on aggregate output of multiple routes\n    //   1. when there are >2 exact input trades. this is only a heuristic,\n    //      as it's still more gas-expensive even in this case, but has benefits\n    //      in that the reversion probability is lower\n    const performAggregatedSlippageCheck =\n      this.trade.tradeType === TradeType.EXACT_INPUT && this.trade.routes.length > 2\n    const outputIsNative = this.trade.outputAmount.currency.isNative\n    const routerMustCustody = performAggregatedSlippageCheck || outputIsNative || hasFeeOption(this.options)\n\n    for (const swap of this.trade.swaps) {\n      switch (swap.route.protocol) {\n        case Protocol.V2:\n          addV2Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        case Protocol.V3:\n          addV3Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        case Protocol.MIXED:\n          addMixedSwap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        default:\n          throw new Error('UNSUPPORTED_TRADE_PROTOCOL')\n      }\n    }\n\n    let minimumAmountOut: BigNumber = BigNumber.from(\n      this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString()\n    )\n\n    // The router custodies for 3 reasons: to unwrap, to take a fee, and/or to do a slippage check\n    if (routerMustCustody) {\n      // If there is a fee, that percentage is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.fee) {\n        const feeBips = encodeFeeBips(this.options.fee.fee)\n        planner.addCommand(CommandType.PAY_PORTION, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.fee.recipient,\n          feeBips,\n        ])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(minimumAmountOut.mul(feeBips).div(10000))\n        }\n      }\n\n      // If there is a flat fee, that absolute amount is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.flatFee) {\n        const feeAmount = this.options.flatFee.amount\n        if (minimumAmountOut.lt(feeAmount)) throw new Error('Flat fee amount greater than minimumAmountOut')\n\n        planner.addCommand(CommandType.TRANSFER, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.flatFee.recipient,\n          feeAmount,\n        ])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(feeAmount)\n        }\n      }\n\n      // The remaining tokens that need to be sent to the user after the fee is taken will be caught\n      // by this if-else clause.\n      if (outputIsNative) {\n        planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, minimumAmountOut])\n      } else {\n        planner.addCommand(CommandType.SWEEP, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.recipient,\n          minimumAmountOut,\n        ])\n      }\n    }\n\n    if (this.inputRequiresWrap && (this.trade.tradeType === TradeType.EXACT_OUTPUT || riskOfPartialFill(this.trade))) {\n      // for exactOutput swaps that take native currency as input\n      // we need to send back the change to the user\n      planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, 0])\n    }\n\n    if (this.options.safeMode) planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, this.options.recipient, 0])\n  }\n}\n\n// encode a uniswap v2 swap\nfunction addV2Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = new V2Trade(\n    route as RouteV2<TInput, TOutput>,\n    tradeType == TradeType.EXACT_INPUT ? inputAmount : outputAmount,\n    tradeType\n  )\n\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n      // if native, we have to unwrap so keep in the router for now\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a uniswap v3 swap\nfunction addV3Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = V3Trade.createUncheckedTrade({\n    route: route as RouteV3<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const path = encodeRouteToPath(route as RouteV3<TInput, TOutput>, trade.tradeType === TradeType.EXACT_OUTPUT)\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a mixed route swap, i.e. including both v2 and v3 pools\nfunction addMixedSwap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  swap: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const { route, inputAmount, outputAmount } = swap\n  const tradeRecipient = routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient\n\n  // single hop, so it can be reduced to plain v2 or v3 swap logic\n  if (route.pools.length === 1) {\n    if (route.pools[0] instanceof Pool) {\n      return addV3Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else if (route.pools[0] instanceof Pair) {\n      return addV2Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else {\n      throw new Error('Invalid route type')\n    }\n  }\n\n  const trade = MixedRouteTrade.createUncheckedTrade({\n    route: route as MixedRoute<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const amountIn = trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient.toString()\n  const amountOut = trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient.toString()\n\n  // logic from\n  // https://github.com/Uniswap/router-sdk/blob/d8eed164e6c79519983844ca8b6a3fc24ebcb8f8/src/swapRouter.ts#L276\n  const sections = partitionMixedRouteByProtocol(route as MixedRoute<TInput, TOutput>)\n  const isLastSectionInRoute = (i: number) => {\n    return i === sections.length - 1\n  }\n\n  let outputToken\n  let inputToken = route.input.wrapped\n\n  for (let i = 0; i < sections.length; i++) {\n    const section = sections[i]\n    /// Now, we get output of this section\n    outputToken = getOutputOfPools(section, inputToken)\n\n    const newRouteOriginal = new MixedRouteSDK(\n      [...section],\n      section[0].token0.equals(inputToken) ? section[0].token0 : section[0].token1,\n      outputToken\n    )\n    const newRoute = new MixedRoute(newRouteOriginal)\n\n    /// Previous output is now input\n    inputToken = outputToken\n\n    const mixedRouteIsAllV3 = (route: MixedRouteSDK<Currency, Currency>) => {\n      return route.pools.every((pool) => pool instanceof Pool)\n    }\n\n    if (mixedRouteIsAllV3(newRoute)) {\n      const path: string = encodeMixedRouteToPath(newRoute)\n\n      planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n        // if not last section: send tokens directly to the first v2 pair of the next section\n        // note: because of the partitioning function we can be sure that the next section is v2\n        isLastSectionInRoute(i) ? tradeRecipient : (sections[i + 1][0] as Pair).liquidityToken.address,\n        i == 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOut\n        path, // path\n        payerIsUser && i === 0, // payerIsUser\n      ])\n    } else {\n      planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n        isLastSectionInRoute(i) ? tradeRecipient : ROUTER_AS_RECIPIENT, // recipient\n        i === 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOutMin\n        newRoute.path.map((pool) => pool.address), // path\n        payerIsUser && i === 0,\n      ])\n    }\n  }\n}\n\n// if price impact is very high, there's a chance of hitting max/min prices resulting in a partial fill of the swap\nfunction riskOfPartialFill(trade: RouterTrade<Currency, Currency, TradeType>): boolean {\n  return trade.priceImpact.greaterThan(REFUND_ETH_PRICE_IMPACT_THRESHOLD)\n}\n\nfunction hasFeeOption(swapOptions: SwapOptions): boolean {\n  return !!swapOptions.fee || !!swapOptions.flatFee\n}\n","import invariant from 'tiny-invariant'\nimport { ethers } from 'ethers'\nimport { PermitSingle } from '@uniswap/permit2-sdk'\nimport { CommandType, RoutePlanner } from './routerCommands'\nimport { OPENSEA_CONDUIT_SPENDER_ID, ROUTER_AS_RECIPIENT, SUDOSWAP_SPENDER_ID } from './constants'\n\nexport interface Permit2Permit extends PermitSingle {\n  signature: string\n}\n\nexport type ApproveProtocol = {\n  token: string\n  protocol: string\n}\n\nexport type Permit2TransferFrom = {\n  token: string\n  amount: string\n  recipient?: string\n}\n\nexport type InputTokenOptions = {\n  approval?: ApproveProtocol\n  permit2Permit?: Permit2Permit\n  permit2TransferFrom?: Permit2TransferFrom\n}\n\nconst SIGNATURE_LENGTH = 65\nconst EIP_2098_SIGNATURE_LENGTH = 64\n\nexport function encodePermit(planner: RoutePlanner, permit2: Permit2Permit): void {\n  let signature = permit2.signature\n\n  const length = ethers.utils.arrayify(permit2.signature).length\n  // signature data provided for EIP-1271 may have length different from ECDSA signature\n  if (length === SIGNATURE_LENGTH || length === EIP_2098_SIGNATURE_LENGTH) {\n    // sanitizes signature to cover edge cases of malformed EIP-2098 sigs and v used as recovery id\n    signature = ethers.utils.joinSignature(ethers.utils.splitSignature(permit2.signature))\n  }\n\n  planner.addCommand(CommandType.PERMIT2_PERMIT, [permit2, signature])\n}\n\n// Handles the encoding of commands needed to gather input tokens for a trade\n// Approval: The router approving another address to take tokens.\n//   note: Only seaport and sudoswap support this action. Approvals are left open.\n// Permit: A Permit2 signature-based Permit to allow the router to access a user's tokens\n// Transfer: A Permit2 TransferFrom of tokens from a user to either the router or another address\nexport function encodeInputTokenOptions(planner: RoutePlanner, options: InputTokenOptions) {\n  // first ensure that all tokens provided for encoding are the same\n  if (!!options.approval && !!options.permit2Permit)\n    invariant(options.approval.token === options.permit2Permit.details.token, `inconsistent token`)\n  if (!!options.approval && !!options.permit2TransferFrom)\n    invariant(options.approval.token === options.permit2TransferFrom.token, `inconsistent token`)\n  if (!!options.permit2TransferFrom && !!options.permit2Permit)\n    invariant(options.permit2TransferFrom.token === options.permit2Permit.details.token, `inconsistent token`)\n\n  // if an options.approval is required, add it\n  if (!!options.approval) {\n    planner.addCommand(CommandType.APPROVE_ERC20, [\n      options.approval.token,\n      mapApprovalProtocol(options.approval.protocol),\n    ])\n  }\n\n  // if this order has a options.permit2Permit, encode it\n  if (!!options.permit2Permit) {\n    encodePermit(planner, options.permit2Permit)\n  }\n\n  if (!!options.permit2TransferFrom) {\n    planner.addCommand(CommandType.PERMIT2_TRANSFER_FROM, [\n      options.permit2TransferFrom.token,\n      options.permit2TransferFrom.recipient ? options.permit2TransferFrom.recipient : ROUTER_AS_RECIPIENT,\n      options.permit2TransferFrom.amount,\n    ])\n  }\n}\n\nfunction mapApprovalProtocol(protocolAddress: string): number {\n  switch (protocolAddress.toLowerCase()) {\n    case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc': // Seaport v1.5\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x2b2e8cda09bba9660dca5cb6233787738ad68329': // Sudoswap\n      return SUDOSWAP_SPENDER_ID\n    default:\n      throw new Error('unsupported protocol address')\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { abi } from '@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { MethodParameters } from '@uniswap/v3-sdk'\nimport { Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, TradeType } from '@uniswap/sdk-core'\nimport { Command, RouterTradeType } from './entities/Command'\nimport { Market, NFTTrade, SupportedProtocolsData } from './entities/NFTTrade'\nimport { UniswapTrade, SwapOptions } from './entities/protocols/uniswap'\nimport { UnwrapWETH } from './entities/protocols/unwrapWETH'\nimport { CommandType, RoutePlanner } from './utils/routerCommands'\nimport { encodePermit } from './utils/inputTokens'\nimport { ROUTER_AS_RECIPIENT, SENDER_AS_RECIPIENT, ETH_ADDRESS } from './utils/constants'\nimport { SeaportTrade } from './entities'\n\nexport type SwapRouterConfig = {\n  sender?: string // address\n  deadline?: BigNumberish\n}\n\ntype SupportedNFTTrade = NFTTrade<SupportedProtocolsData>\n\nexport abstract class SwapRouter {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  public static swapCallParameters(trades: Command[] | Command, config: SwapRouterConfig = {}): MethodParameters {\n    if (!Array.isArray(trades)) trades = [trades]\n\n    const nftTrades = trades.filter((trade, _, []) => trade.hasOwnProperty('market')) as SupportedNFTTrade[]\n    const allowRevert = nftTrades.length == 1 && nftTrades[0].orders.length == 1 ? false : true\n    const planner = new RoutePlanner()\n\n    // track value flow to require the right amount of native value\n    let currentNativeValueInRouter = BigNumber.from(0)\n    let transactionValue = BigNumber.from(0)\n\n    // tracks the input tokens (and ETH) used to buy NFTs to allow us to sweep\n    let nftInputTokens = new Set<string>()\n\n    for (const trade of trades) {\n      /**\n       * is NFTTrade\n       */\n      if (trade.tradeType == RouterTradeType.NFTTrade) {\n        const nftTrade = trade as SupportedNFTTrade\n        nftTrade.encode(planner, { allowRevert })\n        const tradePrice = nftTrade.getTotalPrice()\n\n        if (nftTrade.market == Market.Seaport) {\n          const seaportTrade = nftTrade as SeaportTrade\n          const seaportInputTokens = seaportTrade.getInputTokens()\n          seaportInputTokens.forEach((inputToken) => {\n            nftInputTokens.add(inputToken)\n          })\n        } else {\n          nftInputTokens.add(ETH_ADDRESS)\n        }\n\n        // send enough native value to contract for NFT purchase\n        if (currentNativeValueInRouter.lt(tradePrice)) {\n          transactionValue = transactionValue.add(tradePrice.sub(currentNativeValueInRouter))\n          currentNativeValueInRouter = BigNumber.from(0)\n        } else {\n          currentNativeValueInRouter = currentNativeValueInRouter.sub(tradePrice)\n        }\n        /**\n         * is UniswapTrade\n         */\n      } else if (trade.tradeType == RouterTradeType.UniswapTrade) {\n        const uniswapTrade = trade as UniswapTrade\n        const inputIsNative = uniswapTrade.trade.inputAmount.currency.isNative\n        const outputIsNative = uniswapTrade.trade.outputAmount.currency.isNative\n        const swapOptions = uniswapTrade.options\n\n        invariant(!(inputIsNative && !!swapOptions.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n        if (!!swapOptions.inputTokenPermit) {\n          encodePermit(planner, swapOptions.inputTokenPermit)\n        }\n\n        if (inputIsNative) {\n          transactionValue = transactionValue.add(\n            BigNumber.from(uniswapTrade.trade.maximumAmountIn(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        // track amount of native currency in the router\n        if (outputIsNative && swapOptions.recipient == ROUTER_AS_RECIPIENT) {\n          currentNativeValueInRouter = currentNativeValueInRouter.add(\n            BigNumber.from(uniswapTrade.trade.minimumAmountOut(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        uniswapTrade.encode(planner, { allowRevert: false })\n        /**\n         * is UnwrapWETH\n         */\n      } else if (trade.tradeType == RouterTradeType.UnwrapWETH) {\n        const UnwrapWETH = trade as UnwrapWETH\n        trade.encode(planner, { allowRevert: false })\n        currentNativeValueInRouter = currentNativeValueInRouter.add(UnwrapWETH.amount)\n        /**\n         * else\n         */\n      } else {\n        throw 'trade must be of instance: UniswapTrade or NFTTrade'\n      }\n    }\n\n    // TODO: matches current logic for now, but should eventually only sweep for multiple NFT trades\n    // or NFT trades with potential slippage (i.e. sudo).\n    // Note: NFTXV2 sends excess ETH to the caller (router), not the specified recipient\n    nftInputTokens.forEach((inputToken) => {\n      planner.addCommand(CommandType.SWEEP, [inputToken, SENDER_AS_RECIPIENT, 0])\n    })\n    return SwapRouter.encodePlan(planner, transactionValue, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * This version does not work correctly for Seaport ERC20->NFT purchases\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given swap.\n   * @param trades to produce call parameters for\n   */\n  public static swapNFTCallParameters(trades: SupportedNFTTrade[], config: SwapRouterConfig = {}): MethodParameters {\n    let planner = new RoutePlanner()\n    let totalPrice = BigNumber.from(0)\n\n    const allowRevert = trades.length == 1 && trades[0].orders.length == 1 ? false : true\n\n    for (const trade of trades) {\n      trade.encode(planner, { allowRevert })\n      totalPrice = totalPrice.add(trade.getTotalPrice())\n    }\n\n    planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, SENDER_AS_RECIPIENT, 0])\n    return SwapRouter.encodePlan(planner, totalPrice, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trades to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapERC20CallParameters(\n    trades: RouterTrade<Currency, Currency, TradeType>,\n    options: SwapOptions\n  ): MethodParameters {\n    // TODO: use permit if signature included in swapOptions\n    const planner = new RoutePlanner()\n\n    const trade: UniswapTrade = new UniswapTrade(trades, options)\n\n    const inputCurrency = trade.trade.inputAmount.currency\n    invariant(!(inputCurrency.isNative && !!options.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n    if (options.inputTokenPermit) {\n      encodePermit(planner, options.inputTokenPermit)\n    }\n\n    const nativeCurrencyValue = inputCurrency.isNative\n      ? BigNumber.from(trade.trade.maximumAmountIn(options.slippageTolerance).quotient.toString())\n      : BigNumber.from(0)\n\n    trade.encode(planner, { allowRevert: false })\n    return SwapRouter.encodePlan(planner, nativeCurrencyValue, {\n      deadline: options.deadlineOrPreviousBlockhash ? BigNumber.from(options.deadlineOrPreviousBlockhash) : undefined,\n    })\n  }\n\n  /**\n   * Encodes a planned route into a method name and parameters for the Router contract.\n   * @param planner the planned route\n   * @param nativeCurrencyValue the native currency value of the planned route\n   * @param config the router config\n   */\n  private static encodePlan(\n    planner: RoutePlanner,\n    nativeCurrencyValue: BigNumber,\n    config: SwapRouterConfig = {}\n  ): MethodParameters {\n    const { commands, inputs } = planner\n    const functionSignature = !!config.deadline ? 'execute(bytes,bytes[],uint256)' : 'execute(bytes,bytes[])'\n    const parameters = !!config.deadline ? [commands, inputs, config.deadline] : [commands, inputs]\n    const calldata = SwapRouter.INTERFACE.encodeFunctionData(functionSignature, parameters)\n    return { calldata, value: nativeCurrencyValue.toHexString() }\n  }\n}\n","import { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type CryptopunkData = {\n  tokenId: BigNumberish\n  recipient: string\n  value: BigNumberish\n}\n\nexport class CryptopunkTrade extends NFTTrade<CryptopunkData> {\n  public static CRYPTOPUNK_ADDRESS: string = '0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb'\n\n  constructor(orders: CryptopunkData[]) {\n    super(Market.Cryptopunks, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      planner.addCommand(CommandType.CRYPTOPUNKS, [item.tokenId, item.recipient, item.value], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: CryptopunkTrade.CRYPTOPUNK_ADDRESS,\n        tokenId: item.tokenId,\n        tokenType: TokenType.Cryptopunk,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/Foundation.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type FoundationData = {\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n  referrer: string // address\n}\n\nexport class FoundationTrade extends NFTTrade<FoundationData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: FoundationData[]) {\n    super(Market.Foundation, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const calldata = FoundationTrade.INTERFACE.encodeFunctionData('buyV2', [\n        item.tokenAddress,\n        item.tokenId,\n        item.price,\n        item.referrer,\n      ])\n      planner.addCommand(\n        CommandType.FOUNDATION,\n        [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: TokenType.ERC721,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/LooksRareV2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber } from 'ethers'\nimport { ZERO_ADDRESS } from '../../utils/constants'\n\nexport type MakerOrder = {\n  quoteType: number\n  globalNonce: string\n  subsetNonce: string\n  orderNonce: string\n  strategyId: number\n  collectionType: number\n  collection: string\n  currency: string\n  signer: string\n  startTime: number\n  endTime: number\n  price: string\n  itemIds: string[]\n  amounts: string[]\n  additionalParameters: string\n}\n\nexport type TakerOrder = {\n  recipient: string\n  additionalParameters: string\n}\n\nexport type MerkleProof = {\n  value: string\n  position: number\n}\n\nexport type MerkleTree = {\n  root: string\n  proof: MerkleProof[]\n}\n\nexport type LRV2APIOrder = MakerOrder & {\n  id: string\n  hash: string\n  signature: string\n  createdAt: string\n  merkleRoot?: string\n  merkleProof?: MerkleProof[]\n  status: string\n}\n\nexport type LooksRareV2Data = {\n  apiOrder: LRV2APIOrder\n  taker: string\n}\n\nexport class LooksRareV2Trade extends NFTTrade<LooksRareV2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n  private static ERC721_ORDER = 0\n\n  constructor(orders: LooksRareV2Data[]) {\n    super(Market.LooksRareV2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    const { takerBids, makerOrders, makerSignatures, totalValue, merkleTrees } = this.refactorAPIData(this.orders)\n\n    let calldata\n    if (this.orders.length == 1) {\n      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeTakerBid', [\n        takerBids[0],\n        makerOrders[0],\n        makerSignatures[0],\n        merkleTrees[0],\n        ZERO_ADDRESS, // affiliate\n      ])\n    } else {\n      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeMultipleTakerBids', [\n        takerBids,\n        makerOrders,\n        makerSignatures,\n        merkleTrees,\n        ZERO_ADDRESS, // affiliate\n        false, // isAtomic (we deal with this in allowRevert)\n      ])\n    }\n\n    planner.addCommand(CommandType.LOOKS_RARE_V2, [totalValue, calldata], config.allowRevert)\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      const tokenAddress = item.apiOrder.collection\n      const tokenType =\n        item.apiOrder.collectionType == LooksRareV2Trade.ERC721_ORDER ? TokenType.ERC721 : TokenType.ERC1155\n      for (const tokenId of item.apiOrder.itemIds)\n        buyItems.push({\n          tokenAddress,\n          tokenId,\n          tokenType,\n        })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.apiOrder.price)\n    }\n    return total\n  }\n\n  private refactorAPIData(orders: LooksRareV2Data[]): {\n    takerBids: TakerOrder[]\n    makerOrders: MakerOrder[]\n    makerSignatures: string[]\n    totalValue: BigNumber\n    merkleTrees: MerkleTree[]\n  } {\n    let takerBids: TakerOrder[] = []\n    let makerOrders: MakerOrder[] = []\n    let makerSignatures: string[] = []\n    let totalValue: BigNumber = BigNumber.from(0)\n    let merkleTrees: MerkleTree[] = []\n\n    orders.forEach((order) => {\n      makerOrders.push({ ...order.apiOrder })\n\n      makerSignatures.push(order.apiOrder.signature)\n\n      takerBids.push({\n        recipient: order.taker,\n        additionalParameters: '0x',\n      })\n\n      totalValue = totalValue.add(BigNumber.from(order.apiOrder.price))\n\n      merkleTrees.push({\n        root: order.apiOrder.merkleRoot ?? '0x0000000000000000000000000000000000000000000000000000000000000000',\n        proof: order.apiOrder.merkleProof ?? [],\n      })\n    })\n\n    return { takerBids, makerOrders, makerSignatures, totalValue, merkleTrees }\n  }\n}\n","import abi from '../../../abis/NFT20.json'\nimport { Interface } from '@ethersproject/abi'\nimport { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFT20Data = {\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  tokenAmounts: BigNumberish[]\n  recipient: string\n  fee: BigNumberish\n  isV3: boolean\n  value: BigNumberish\n}\n\nexport class NFT20Trade extends NFTTrade<NFT20Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFT20Data[]) {\n    super(Market.NFT20, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFT20Trade.INTERFACE.encodeFunctionData('ethForNft', [\n        order.tokenAddress,\n        order.tokenIds,\n        order.tokenAmounts,\n        order.recipient,\n        order.fee,\n        order.isV3,\n      ])\n      planner.addCommand(CommandType.NFT20, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const pool of this.orders) {\n      for (const tokenId of pool.tokenIds) {\n        buyItems.push({\n          tokenAddress: pool.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/NFTXZap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFTXData = {\n  recipient: string\n  vaultId: BigNumberish\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  value: BigNumber\n  swapCalldata: string\n}\n\nexport class NFTXTrade extends NFTTrade<NFTXData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFTXData[]) {\n    super(Market.NFTX, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFTXTrade.INTERFACE.encodeFunctionData('buyAndRedeem', [\n        order.vaultId,\n        order.tokenIds.length,\n        order.tokenIds,\n        order.swapCalldata,\n        order.recipient,\n      ])\n\n      planner.addCommand(CommandType.NFTX, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const tokenId of order.tokenIds) {\n        buyItems.push({\n          tokenAddress: order.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import { BigNumber, BigNumberish } from 'ethers'\nimport { Interface } from '@ethersproject/abi'\nimport abi from '../../../abis/Seaport.json'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { ETH_ADDRESS } from '../../utils/constants'\n\nexport type SeaportData = {\n  items: Order[]\n  recipient: string // address\n  protocolAddress: string\n  inputTokenProcessing?: InputTokenProcessing[]\n}\n\nexport type InputTokenProcessing = {\n  token: string\n  permit2Permit?: Permit2Permit\n  protocolApproval: boolean\n  permit2TransferFrom: boolean\n}\n\nexport type FulfillmentComponent = {\n  orderIndex: BigNumberish\n  itemIndex: BigNumberish\n}\n\nexport type OfferItem = {\n  itemType: BigNumberish // enum\n  token: string // address\n  identifierOrCriteria: BigNumberish\n  startAmount: BigNumberish\n  endAmount: BigNumberish\n}\n\nexport type ConsiderationItem = OfferItem & {\n  recipient: string\n}\n\nexport type Order = {\n  parameters: OrderParameters\n  signature: string\n}\n\ntype OrderParameters = {\n  offerer: string // address,\n  offer: OfferItem[]\n  consideration: ConsiderationItem[]\n  orderType: BigNumberish // enum\n  startTime: BigNumberish\n  endTime: BigNumberish\n  zoneHash: string // bytes32\n  zone: string // address\n  salt: BigNumberish\n  conduitKey: string // bytes32,\n  totalOriginalConsiderationItems: BigNumberish\n}\n\nexport type AdvancedOrder = Order & {\n  numerator: BigNumber // uint120\n  denominator: BigNumber // uint120\n  extraData: string // bytes\n}\n\nexport class SeaportTrade extends NFTTrade<SeaportData> {\n  public static INTERFACE: Interface = new Interface(abi)\n  public static OPENSEA_CONDUIT_KEY: string = '0x0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000'\n\n  constructor(orders: SeaportData[]) {\n    super(Market.Seaport, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      let advancedOrders: AdvancedOrder[] = []\n      let orderFulfillments: FulfillmentComponent[][] = order.items.map((_, index) => [\n        { orderIndex: index, itemIndex: 0 },\n      ])\n      let considerationFulFillments: FulfillmentComponent[][] = this.getConsiderationFulfillments(order.items)\n\n      for (const item of order.items) {\n        const { advancedOrder } = this.getAdvancedOrderParams(item)\n        advancedOrders.push(advancedOrder)\n      }\n\n      let calldata: string\n      if (advancedOrders.length == 1) {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAdvancedOrder', [\n          advancedOrders[0],\n          [],\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n        ])\n      } else {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAvailableAdvancedOrders', [\n          advancedOrders,\n          [],\n          orderFulfillments,\n          considerationFulFillments,\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n          100, // TODO: look into making this a better number\n        ])\n      }\n\n      if (!!order.inputTokenProcessing) {\n        for (const inputToken of order.inputTokenProcessing)\n          encodeInputTokenOptions(planner, {\n            approval: inputToken.protocolApproval\n              ? { token: inputToken.token, protocol: order.protocolAddress }\n              : undefined,\n            permit2Permit: inputToken.permit2Permit,\n            permit2TransferFrom: inputToken.permit2TransferFrom\n              ? { token: inputToken.token, amount: this.getTotalOrderPrice(order, inputToken.token).toString() }\n              : undefined,\n          })\n      }\n\n      planner.addCommand(\n        this.commandMap(order.protocolAddress),\n        [this.getTotalOrderPrice(order, ETH_ADDRESS).toString(), calldata],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const offer of item.parameters.offer) {\n          buyItems.push({\n            tokenAddress: offer.token,\n            tokenId: offer.identifierOrCriteria,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getInputTokens(): Set<string> {\n    let inputTokens = new Set<string>()\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const consideration of item.parameters.consideration) {\n          const token = consideration.token.toLowerCase()\n          inputTokens.add(token)\n        }\n      }\n    }\n    return inputTokens\n  }\n\n  getTotalOrderPrice(order: SeaportData, token: string = ETH_ADDRESS): BigNumber {\n    let totalOrderPrice = BigNumber.from(0)\n    for (const item of order.items) {\n      totalOrderPrice = totalOrderPrice.add(this.calculateValue(item.parameters.consideration, token))\n    }\n    return totalOrderPrice\n  }\n\n  getTotalPrice(token: string = ETH_ADDRESS): BigNumber {\n    let totalPrice = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        totalPrice = totalPrice.add(this.calculateValue(item.parameters.consideration, token))\n      }\n    }\n    return totalPrice\n  }\n\n  private commandMap(protocolAddress: string): CommandType {\n    switch (protocolAddress.toLowerCase()) {\n      case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc': // Seaport v1.5\n        return CommandType.SEAPORT_V1_5\n      case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n        return CommandType.SEAPORT_V1_4\n      default:\n        throw new Error('unsupported Seaport address')\n    }\n  }\n\n  private getConsiderationFulfillments(protocolDatas: Order[]): FulfillmentComponent[][] {\n    let considerationFulfillments: FulfillmentComponent[][] = []\n    const considerationRecipients: string[] = []\n\n    for (const i in protocolDatas) {\n      const protocolData = protocolDatas[i]\n\n      for (const j in protocolData.parameters.consideration) {\n        const item = protocolData.parameters.consideration[j]\n\n        if (considerationRecipients.findIndex((x) => x === item.recipient) === -1) {\n          considerationRecipients.push(item.recipient)\n        }\n\n        const recipientIndex = considerationRecipients.findIndex((x) => x === item.recipient)\n\n        if (!considerationFulfillments[recipientIndex]) {\n          considerationFulfillments.push([\n            {\n              orderIndex: i,\n              itemIndex: j,\n            },\n          ])\n        } else {\n          considerationFulfillments[recipientIndex].push({\n            orderIndex: i,\n            itemIndex: j,\n          })\n        }\n      }\n    }\n    return considerationFulfillments\n  }\n\n  private getAdvancedOrderParams(data: Order): { advancedOrder: AdvancedOrder } {\n    const advancedOrder = {\n      parameters: data.parameters,\n      numerator: BigNumber.from('1'),\n      denominator: BigNumber.from('1'),\n      signature: data.signature,\n      extraData: '0x00',\n    }\n    return { advancedOrder }\n  }\n\n  private calculateValue(considerations: ConsiderationItem[], token: string): BigNumber {\n    return considerations.reduce(\n      (amt: BigNumber, consideration: ConsiderationItem) =>\n        consideration.token.toLowerCase() == token.toLowerCase() ? amt.add(consideration.startAmount) : amt,\n      BigNumber.from(0)\n    )\n  }\n}\n","import abi from '../../../abis/Sudoswap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype PairSwap = {\n  swapInfo: {\n    pair: string // address\n    nftIds: BigNumberish[]\n  }\n  tokenAddress: string // address\n  maxCost: BigNumberish\n}\n\nexport type SudoswapData = {\n  swaps: PairSwap[]\n  nftRecipient: string\n  ethRecipient: string\n  deadline: BigNumberish\n}\n\nexport class SudoswapTrade extends NFTTrade<SudoswapData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: SudoswapData[]) {\n    super(Market.Sudoswap, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = SudoswapTrade.INTERFACE.encodeFunctionData('robustSwapETHForSpecificNFTs', [\n        order.swaps.map((swap) => {\n          return { swapInfo: swap.swapInfo, maxCost: swap.maxCost }\n        }),\n        order.ethRecipient,\n        order.nftRecipient,\n        order.deadline,\n      ])\n      const value = order.swaps.reduce((prevVal, swap) => {\n        return prevVal.add(swap.maxCost)\n      }, BigNumber.from(0))\n      planner.addCommand(CommandType.SUDOSWAP, [value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        for (const tokenId of swap.swapInfo.nftIds) {\n          buyItems.push({\n            tokenAddress: swap.tokenAddress,\n            tokenId,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        total = total.add(swap.maxCost)\n      }\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/X2Y2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype X2Y2PartialData = {\n  signedInput: string\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n}\n\nexport type X2Y2_721_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC721\n}\n\nexport type X2Y2_1155_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC1155\n  tokenAmount: BigNumberish\n}\n\nexport type X2Y2Data = X2Y2_721_Data | X2Y2_1155_Data\n\nexport class X2Y2Trade extends NFTTrade<X2Y2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: X2Y2Data[]) {\n    super(Market.X2Y2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const functionSelector = X2Y2Trade.INTERFACE.getSighash(X2Y2Trade.INTERFACE.getFunction('run'))\n      const calldata = functionSelector + item.signedInput.slice(2)\n\n      if (item.tokenType == TokenType.ERC721) {\n        planner.addCommand(\n          CommandType.X2Y2_721,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n          config.allowRevert\n        )\n      } else if (item.tokenType == TokenType.ERC1155) {\n        planner.addCommand(\n          CommandType.X2Y2_1155,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId, item.tokenAmount],\n          config.allowRevert\n        )\n      }\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: item.tokenType,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumberish } from 'ethers'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { ROUTER_AS_RECIPIENT, WETH_ADDRESS } from '../../utils/constants'\n\nexport class UnwrapWETH implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UnwrapWETH\n  readonly permit2Data: Permit2Permit\n  readonly wethAddress: string\n  readonly amount: BigNumberish\n\n  constructor(amount: BigNumberish, chainId: number, permit2?: Permit2Permit) {\n    this.wethAddress = WETH_ADDRESS(chainId)\n    this.amount = amount\n\n    if (!!permit2) {\n      invariant(\n        permit2.details.token.toLowerCase() === this.wethAddress.toLowerCase(),\n        `must be permitting WETH address: ${this.wethAddress}`\n      )\n      invariant(permit2.details.amount >= amount, `Did not permit enough WETH for unwrapWETH transaction`)\n      this.permit2Data = permit2\n    }\n  }\n\n  encode(planner: RoutePlanner, _: TradeConfig): void {\n    encodeInputTokenOptions(planner, {\n      permit2Permit: this.permit2Data,\n      permit2TransferFrom: {\n        token: this.wethAddress,\n        amount: this.amount.toString(),\n      },\n    })\n    planner.addCommand(CommandType.UNWRAP_WETH, [ROUTER_AS_RECIPIENT, this.amount])\n  }\n}\n","import { MixedRouteSDK, Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount, Ether, Token, TradeType } from '@uniswap/sdk-core'\nimport { Pair, Route as V2Route } from '@uniswap/v2-sdk'\nimport { Pool, Route as V3Route, FeeAmount } from '@uniswap/v3-sdk'\nimport { BigNumber } from 'ethers'\nimport { ETH_ADDRESS, E_ETH_ADDRESS } from './constants'\n\nexport type TokenInRoute = {\n  address: string\n  chainId: number\n  symbol: string\n  decimals: string\n  name?: string\n  buyFeeBps?: string\n  sellFeeBps?: string\n}\n\nexport enum PoolType {\n  V2Pool = 'v2-pool',\n  V3Pool = 'v3-pool',\n}\n\nexport type V2Reserve = {\n  token: TokenInRoute\n  quotient: string\n}\n\nexport type V2PoolInRoute = {\n  type: PoolType.V2Pool\n  address?: string\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  reserve0: V2Reserve\n  reserve1: V2Reserve\n  amountIn?: string\n  amountOut?: string\n}\n\nexport type V3PoolInRoute = {\n  type: PoolType.V3Pool\n  address?: string\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  sqrtRatioX96: string\n  liquidity: string\n  tickCurrent: string\n  fee: string\n  amountIn?: string\n  amountOut?: string\n}\n\nexport type PartialClassicQuote = {\n  // We need tokenIn/Out to support native currency\n  tokenIn: string\n  tokenOut: string\n  tradeType: TradeType\n  route: Array<(V3PoolInRoute | V2PoolInRoute)[]>\n}\n\ninterface RouteResult {\n  routev3: V3Route<Currency, Currency> | null\n  routev2: V2Route<Currency, Currency> | null\n  mixedRoute: MixedRouteSDK<Currency, Currency> | null\n  inputAmount: CurrencyAmount<Currency>\n  outputAmount: CurrencyAmount<Currency>\n}\n\nexport const isNativeCurrency = (address: string) =>\n  address.toLowerCase() === ETH_ADDRESS.toLowerCase() || address.toLowerCase() === E_ETH_ADDRESS.toLowerCase()\n\n// Helper class to convert routing-specific quote entities to RouterTrade entities\n// the returned RouterTrade can then be used to build the UniswapTrade entity in this package\nexport class RouterTradeAdapter {\n  // Generate a RouterTrade using fields from a classic quote response\n  static fromClassicQuote(quote: PartialClassicQuote) {\n    const { route, tokenIn, tokenOut } = quote\n\n    if (!route) throw new Error('Expected route to be present')\n    if (!route.length) throw new Error('Expected there to be at least one route')\n    if (route.some((r) => !r.length)) throw new Error('Expected all routes to have at least one pool')\n    const firstRoute = route[0]\n\n    const tokenInData = firstRoute[0].tokenIn\n    const tokenOutData = firstRoute[firstRoute.length - 1].tokenOut\n\n    if (!tokenInData || !tokenOutData) throw new Error('Expected both tokenIn and tokenOut to be present')\n    if (tokenInData.chainId !== tokenOutData.chainId)\n      throw new Error('Expected tokenIn and tokenOut to be have same chainId')\n\n    const parsedCurrencyIn = RouterTradeAdapter.toCurrency(isNativeCurrency(tokenIn), tokenInData)\n    const parsedCurrencyOut = RouterTradeAdapter.toCurrency(isNativeCurrency(tokenOut), tokenOutData)\n\n    const typedRoutes: RouteResult[] = route.map((subRoute) => {\n      const rawAmountIn = subRoute[0].amountIn\n      const rawAmountOut = subRoute[subRoute.length - 1].amountOut\n\n      if (!rawAmountIn || !rawAmountOut) {\n        throw new Error('Expected both raw amountIn and raw amountOut to be present')\n      }\n\n      const inputAmount = CurrencyAmount.fromRawAmount(parsedCurrencyIn, rawAmountIn)\n      const outputAmount = CurrencyAmount.fromRawAmount(parsedCurrencyOut, rawAmountOut)\n\n      const isOnlyV2 = RouterTradeAdapter.isVersionedRoute<V2PoolInRoute>(PoolType.V2Pool, subRoute)\n      const isOnlyV3 = RouterTradeAdapter.isVersionedRoute<V3PoolInRoute>(PoolType.V3Pool, subRoute)\n\n      return {\n        routev3: isOnlyV3\n          ? new V3Route(\n              (subRoute as V3PoolInRoute[]).map(RouterTradeAdapter.toPool),\n              parsedCurrencyIn,\n              parsedCurrencyOut\n            )\n          : null,\n        routev2: isOnlyV2\n          ? new V2Route(\n              (subRoute as V2PoolInRoute[]).map(RouterTradeAdapter.toPair),\n              parsedCurrencyIn,\n              parsedCurrencyOut\n            )\n          : null,\n        mixedRoute:\n          !isOnlyV3 && !isOnlyV2\n            ? new MixedRouteSDK(subRoute.map(RouterTradeAdapter.toPoolOrPair), parsedCurrencyIn, parsedCurrencyOut)\n            : null,\n        inputAmount,\n        outputAmount,\n      }\n    })\n\n    return new RouterTrade({\n      v2Routes: typedRoutes\n        .filter((route) => route.routev2)\n        .map((route) => ({\n          routev2: route.routev2 as V2Route<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      v3Routes: typedRoutes\n        .filter((route) => route.routev3)\n        .map((route) => ({\n          routev3: route.routev3 as V3Route<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      mixedRoutes: typedRoutes\n        .filter((route) => route.mixedRoute)\n        .map((route) => ({\n          mixedRoute: route.mixedRoute as MixedRouteSDK<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      tradeType: quote.tradeType,\n    })\n  }\n\n  private static toCurrency(isNative: boolean, token: TokenInRoute): Currency {\n    if (isNative) {\n      return Ether.onChain(token.chainId)\n    }\n    return this.toToken(token)\n  }\n\n  private static toPoolOrPair = (pool: V3PoolInRoute | V2PoolInRoute): Pool | Pair => {\n    return pool.type === PoolType.V3Pool ? RouterTradeAdapter.toPool(pool) : RouterTradeAdapter.toPair(pool)\n  }\n\n  private static toToken(token: TokenInRoute): Token {\n    const { chainId, address, decimals, symbol, buyFeeBps, sellFeeBps } = token\n    return new Token(\n      chainId,\n      address,\n      parseInt(decimals.toString()),\n      symbol,\n      /* name */ undefined,\n      false,\n      buyFeeBps ? BigNumber.from(buyFeeBps) : undefined,\n      sellFeeBps ? BigNumber.from(sellFeeBps) : undefined\n    )\n  }\n\n  private static toPool({ fee, sqrtRatioX96, liquidity, tickCurrent, tokenIn, tokenOut }: V3PoolInRoute): Pool {\n    return new Pool(\n      RouterTradeAdapter.toToken(tokenIn),\n      RouterTradeAdapter.toToken(tokenOut),\n      parseInt(fee) as FeeAmount,\n      sqrtRatioX96,\n      liquidity,\n      parseInt(tickCurrent)\n    )\n  }\n\n  private static toPair = ({ reserve0, reserve1 }: V2PoolInRoute): Pair => {\n    return new Pair(\n      CurrencyAmount.fromRawAmount(RouterTradeAdapter.toToken(reserve0.token), reserve0.quotient),\n      CurrencyAmount.fromRawAmount(RouterTradeAdapter.toToken(reserve1.token), reserve1.quotient)\n    )\n  }\n\n  private static isVersionedRoute<T extends V2PoolInRoute | V3PoolInRoute>(\n    type: PoolType,\n    route: (V3PoolInRoute | V2PoolInRoute)[]\n  ): route is T[] {\n    return route.every((pool) => pool.type === type)\n  }\n}\n"],"names":["RouterTradeType","NFTTrade","market","orders","length","invariant","Market","TokenType","CommandType","ALLOW_REVERT_FLAG","REVERTIBLE_COMMANDS","Set","SEAPORT_V1_5","SEAPORT_V1_4","NFTX","LOOKS_RARE_V2","X2Y2_721","X2Y2_1155","FOUNDATION","SUDOSWAP","NFT20","EXECUTE_SUB_PLAN","CRYPTOPUNKS","ELEMENT_MARKET","PERMIT_STRUCT","PERMIT_BATCH_STRUCT","PERMIT2_TRANSFER_FROM_STRUCT","PERMIT2_TRANSFER_FROM_BATCH_STRUCT","ABI_DEFINITION","PERMIT2_PERMIT","PERMIT2_PERMIT_BATCH","PERMIT2_TRANSFER_FROM","PERMIT2_TRANSFER_FROM_BATCH","V3_SWAP_EXACT_IN","V3_SWAP_EXACT_OUT","V2_SWAP_EXACT_IN","V2_SWAP_EXACT_OUT","WRAP_ETH","UNWRAP_WETH","SWEEP","SWEEP_ERC721","SWEEP_ERC1155","TRANSFER","PAY_PORTION","BALANCE_CHECK_ERC20","OWNER_CHECK_721","OWNER_CHECK_1155","APPROVE_ERC20","RoutePlanner","commands","inputs","addSubPlan","subplan","addCommand","type","parameters","allowRevert","command","createCommand","push","encodedInput","has","Error","concat","toString","padStart","defaultAbiCoder","encode","WETH_NOT_SUPPORTED_ON_CHAIN","CHAIN_CONFIGS","router","weth","creationBlock","UNIVERSAL_ROUTER_ADDRESS","chainId","UNIVERSAL_ROUTER_CREATION_BLOCK","WETH_ADDRESS","PERMIT2_ADDRESS","CONTRACT_BALANCE","BigNumber","from","pow","ETH_ADDRESS","E_ETH_ADDRESS","ZERO_ADDRESS","SENDER_AS_RECIPIENT","ROUTER_AS_RECIPIENT","OPENSEA_CONDUIT_SPENDER_ID","SUDOSWAP_SPENDER_ID","encodeFeeBips","fee","toHex","multiply","quotient","REFUND_ETH_PRICE_IMPACT_THRESHOLD","Percent","UniswapTrade","trade","options","flatFee","inputRequiresWrap","payerIsUser","useRouterBalance","planner","_config","maximumAmountIn","slippageTolerance","recipient","performAggregatedSlippageCheck","tradeType","TradeType","EXACT_INPUT","routes","outputIsNative","outputAmount","currency","isNative","routerMustCustody","hasFeeOption","swaps","swap","route","protocol","Protocol","V2","addV2Swap","V3","addV3Swap","MIXED","addMixedSwap","minimumAmountOut","feeBips","wrapped","address","EXACT_OUTPUT","sub","mul","div","feeAmount","amount","lt","riskOfPartialFill","safeMode","inputAmount","V2Trade","path","map","pool","V3Trade","createUncheckedTrade","encodeRouteToPath","tradeRecipient","pools","Pool","Pair","MixedRouteTrade","amountIn","amountOut","sections","partitionMixedRouteByProtocol","isLastSectionInRoute","i","outputToken","inputToken","input","section","getOutputOfPools","newRouteOriginal","MixedRouteSDK","token0","equals","token1","newRoute","MixedRoute","mixedRouteIsAllV3","every","encodeMixedRouteToPath","liquidityToken","priceImpact","greaterThan","swapOptions","SIGNATURE_LENGTH","EIP_2098_SIGNATURE_LENGTH","encodePermit","permit2","signature","ethers","utils","arrayify","joinSignature","splitSignature","encodeInputTokenOptions","approval","permit2Permit","token","details","permit2TransferFrom","mapApprovalProtocol","protocolAddress","toLowerCase","SwapRouter","swapCallParameters","trades","config","Array","isArray","nftTrades","filter","_","hasOwnProperty","currentNativeValueInRouter","transactionValue","nftInputTokens","nftTrade","tradePrice","getTotalPrice","Seaport","seaportTrade","seaportInputTokens","getInputTokens","forEach","add","uniswapTrade","inputIsNative","inputTokenPermit","UnwrapWETH","encodePlan","swapNFTCallParameters","totalPrice","swapERC20CallParameters","inputCurrency","nativeCurrencyValue","deadline","deadlineOrPreviousBlockhash","undefined","functionSignature","calldata","INTERFACE","encodeFunctionData","value","toHexString","Interface","abi","CryptopunkTrade","Cryptopunks","item","tokenId","getBuyItems","buyItems","tokenAddress","CRYPTOPUNK_ADDRESS","tokenType","Cryptopunk","total","FoundationTrade","Foundation","price","referrer","ERC721","LooksRareV2Trade","LooksRareV2","refactorAPIData","takerBids","makerOrders","makerSignatures","totalValue","merkleTrees","apiOrder","collection","collectionType","ERC721_ORDER","ERC1155","itemIds","order","taker","additionalParameters","root","merkleRoot","proof","merkleProof","NFT20Trade","tokenIds","tokenAmounts","isV3","NFTXTrade","vaultId","swapCalldata","SeaportTrade","advancedOrders","orderFulfillments","items","index","orderIndex","itemIndex","considerationFulFillments","getConsiderationFulfillments","getAdvancedOrderParams","advancedOrder","OPENSEA_CONDUIT_KEY","inputTokenProcessing","protocolApproval","getTotalOrderPrice","commandMap","offer","identifierOrCriteria","inputTokens","consideration","totalOrderPrice","calculateValue","protocolDatas","considerationFulfillments","considerationRecipients","protocolData","j","findIndex","x","recipientIndex","data","numerator","denominator","extraData","considerations","reduce","amt","startAmount","SudoswapTrade","Sudoswap","swapInfo","maxCost","ethRecipient","nftRecipient","prevVal","nftIds","X2Y2Trade","X2Y2","functionSelector","getSighash","getFunction","signedInput","slice","tokenAmount","wethAddress","permit2Data","PoolType","isNativeCurrency","RouterTradeAdapter","fromClassicQuote","quote","tokenIn","tokenOut","some","r","firstRoute","tokenInData","tokenOutData","parsedCurrencyIn","toCurrency","parsedCurrencyOut","typedRoutes","subRoute","rawAmountIn","rawAmountOut","CurrencyAmount","fromRawAmount","isOnlyV2","isVersionedRoute","V2Pool","isOnlyV3","V3Pool","routev3","V3Route","toPool","routev2","V2Route","toPair","mixedRoute","toPoolOrPair","RouterTrade","v2Routes","v3Routes","mixedRoutes","Ether","onChain","toToken","decimals","symbol","buyFeeBps","sellFeeBps","Token","parseInt","sqrtRatioX96","liquidity","tickCurrent","reserve0","reserve1"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.production.min.js b/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.production.min.js
index f361eb1..5203398 100644
--- a/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.production.min.js
+++ b/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.production.min.js
@@ -1,2 +1,2 @@
-"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e,t,n=(e=require("tiny-invariant"))&&"object"==typeof e&&"default"in e?e.default:e,a=require("@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json"),r=require("@ethersproject/abi"),i=require("ethers"),p=require("ethers/lib/utils"),s=require("@uniswap/v2-sdk"),y=require("@uniswap/v3-sdk"),u=require("@uniswap/router-sdk"),o=require("@uniswap/sdk-core");function d(){return(d=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function m(e,t){var n,a;e.prototype=Object.create(t.prototype),e.prototype.constructor=e,n=e,a=t,(Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e})(n,a)}function l(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,a=new Array(t);n<t;n++)a[n]=e[n];return a}function T(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(n)return(n=n.call(e)).next.bind(n);if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return l(e,void 0);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?l(e,void 0):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var a=0;return function(){return a>=e.length?{done:!0}:{done:!1,value:e[a++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}require("jsbi"),require("bignumber.js"),(t=exports.RouterTradeType||(exports.RouterTradeType={})).UniswapTrade="UniswapTrade",t.NFTTrade="NFTTrade",t.UnwrapWETH="UnwrapWETH";var c,f,b,v,C=function(e,t){this.tradeType=exports.RouterTradeType.NFTTrade,t.length>0||n(!1),this.market=e,this.orders=t};(c=exports.Market||(exports.Market={})).Foundation="foundation",c.LooksRareV2="looksrareV2",c.NFT20="nft20",c.NFTX="nftx",c.Seaport="seaport",c.Sudoswap="Sudoswap",c.Cryptopunks="cryptopunks",c.X2Y2="x2y2",c.Element="element",(f=exports.TokenType||(exports.TokenType={})).ERC721="ERC721",f.ERC1155="ERC1155",f.Cryptopunk="Cryptopunk",(v=exports.CommandType||(exports.CommandType={}))[v.V3_SWAP_EXACT_IN=0]="V3_SWAP_EXACT_IN",v[v.V3_SWAP_EXACT_OUT=1]="V3_SWAP_EXACT_OUT",v[v.PERMIT2_TRANSFER_FROM=2]="PERMIT2_TRANSFER_FROM",v[v.PERMIT2_PERMIT_BATCH=3]="PERMIT2_PERMIT_BATCH",v[v.SWEEP=4]="SWEEP",v[v.TRANSFER=5]="TRANSFER",v[v.PAY_PORTION=6]="PAY_PORTION",v[v.V2_SWAP_EXACT_IN=8]="V2_SWAP_EXACT_IN",v[v.V2_SWAP_EXACT_OUT=9]="V2_SWAP_EXACT_OUT",v[v.PERMIT2_PERMIT=10]="PERMIT2_PERMIT",v[v.WRAP_ETH=11]="WRAP_ETH",v[v.UNWRAP_WETH=12]="UNWRAP_WETH",v[v.PERMIT2_TRANSFER_FROM_BATCH=13]="PERMIT2_TRANSFER_FROM_BATCH",v[v.BALANCE_CHECK_ERC20=14]="BALANCE_CHECK_ERC20",v[v.SEAPORT_V1_5=16]="SEAPORT_V1_5",v[v.LOOKS_RARE_V2=17]="LOOKS_RARE_V2",v[v.NFTX=18]="NFTX",v[v.CRYPTOPUNKS=19]="CRYPTOPUNKS",v[v.OWNER_CHECK_721=21]="OWNER_CHECK_721",v[v.OWNER_CHECK_1155=22]="OWNER_CHECK_1155",v[v.SWEEP_ERC721=23]="SWEEP_ERC721",v[v.X2Y2_721=24]="X2Y2_721",v[v.SUDOSWAP=25]="SUDOSWAP",v[v.NFT20=26]="NFT20",v[v.X2Y2_1155=27]="X2Y2_1155",v[v.FOUNDATION=28]="FOUNDATION",v[v.SWEEP_ERC1155=29]="SWEEP_ERC1155",v[v.ELEMENT_MARKET=30]="ELEMENT_MARKET",v[v.SEAPORT_V1_4=32]="SEAPORT_V1_4",v[v.EXECUTE_SUB_PLAN=33]="EXECUTE_SUB_PLAN",v[v.APPROVE_ERC20=34]="APPROVE_ERC20";var A,x=new Set([exports.CommandType.SEAPORT_V1_5,exports.CommandType.SEAPORT_V1_4,exports.CommandType.NFTX,exports.CommandType.LOOKS_RARE_V2,exports.CommandType.X2Y2_721,exports.CommandType.X2Y2_1155,exports.CommandType.FOUNDATION,exports.CommandType.SUDOSWAP,exports.CommandType.NFT20,exports.CommandType.EXECUTE_SUB_PLAN,exports.CommandType.CRYPTOPUNKS,exports.CommandType.ELEMENT_MARKET]),R=((b={})[exports.CommandType.EXECUTE_SUB_PLAN]=["bytes","bytes[]"],b[exports.CommandType.PERMIT2_PERMIT]=["((address token,uint160 amount,uint48 expiration,uint48 nonce) details,address spender,uint256 sigDeadline)","bytes"],b[exports.CommandType.PERMIT2_PERMIT_BATCH]=["((address token,uint160 amount,uint48 expiration,uint48 nonce)[] details,address spender,uint256 sigDeadline)","bytes"],b[exports.CommandType.PERMIT2_TRANSFER_FROM]=["address","address","uint160"],b[exports.CommandType.PERMIT2_TRANSFER_FROM_BATCH]=["(address from,address to,uint160 amount,address token)[]"],b[exports.CommandType.V3_SWAP_EXACT_IN]=["address","uint256","uint256","bytes","bool"],b[exports.CommandType.V3_SWAP_EXACT_OUT]=["address","uint256","uint256","bytes","bool"],b[exports.CommandType.V2_SWAP_EXACT_IN]=["address","uint256","uint256","address[]","bool"],b[exports.CommandType.V2_SWAP_EXACT_OUT]=["address","uint256","uint256","address[]","bool"],b[exports.CommandType.WRAP_ETH]=["address","uint256"],b[exports.CommandType.UNWRAP_WETH]=["address","uint256"],b[exports.CommandType.SWEEP]=["address","address","uint256"],b[exports.CommandType.SWEEP_ERC721]=["address","address","uint256"],b[exports.CommandType.SWEEP_ERC1155]=["address","address","uint256","uint256"],b[exports.CommandType.TRANSFER]=["address","address","uint256"],b[exports.CommandType.PAY_PORTION]=["address","address","uint256"],b[exports.CommandType.BALANCE_CHECK_ERC20]=["address","address","uint256"],b[exports.CommandType.OWNER_CHECK_721]=["address","address","uint256"],b[exports.CommandType.OWNER_CHECK_1155]=["address","address","uint256","uint256"],b[exports.CommandType.APPROVE_ERC20]=["address","uint256"],b[exports.CommandType.SEAPORT_V1_5]=["uint256","bytes"],b[exports.CommandType.SEAPORT_V1_4]=["uint256","bytes"],b[exports.CommandType.NFTX]=["uint256","bytes"],b[exports.CommandType.LOOKS_RARE_V2]=["uint256","bytes"],b[exports.CommandType.X2Y2_721]=["uint256","bytes","address","address","uint256"],b[exports.CommandType.X2Y2_1155]=["uint256","bytes","address","address","uint256","uint256"],b[exports.CommandType.FOUNDATION]=["uint256","bytes","address","address","uint256"],b[exports.CommandType.SUDOSWAP]=["uint256","bytes"],b[exports.CommandType.NFT20]=["uint256","bytes"],b[exports.CommandType.CRYPTOPUNKS]=["uint256","address","uint256"],b[exports.CommandType.ELEMENT_MARKET]=["uint256","bytes"],b),I=function(){function e(){this.commands="0x",this.inputs=[]}var t=e.prototype;return t.addSubPlan=function(e){this.addCommand(exports.CommandType.EXECUTE_SUB_PLAN,[e.commands,e.inputs],!0)},t.addCommand=function(e,t,n){void 0===n&&(n=!1);var a=function(e,t){return{type:e,encodedInput:p.defaultAbiCoder.encode(R[e],t)}}(e,t);if(this.inputs.push(a.encodedInput),n){if(!x.has(a.type))throw new Error("command type: "+a.type+" cannot be allowed to revert");a.type=128|a.type}this.commands=this.commands.concat(a.type.toString(16).padStart(2,"0"))},e}(),S=((A={})[1]={router:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",weth:"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",creationBlock:17143817},A[5]={router:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",weth:"0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6",creationBlock:8940568},A[11155111]={router:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",weth:"0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14",creationBlock:3543575},A[137]={router:"0xec7BE89e9d109e7e3Fec59c222CF297125FEFda2",weth:"0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270",creationBlock:52210153},A[80001]={router:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",weth:"0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889",creationBlock:35176052},A[10]={router:"0xCb1355ff08Ab38bBCE60111F1bb2B784bE25D7e8",weth:"0x4200000000000000000000000000000000000006",creationBlock:114702266},A[420]={router:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",weth:"0x4200000000000000000000000000000000000006",creationBlock:8887728},A[42161]={router:"0x5E325eDA8064b456f4781070C0738d849c824258",weth:"0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",creationBlock:169472836},A[421613]={router:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",weth:"0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3",creationBlock:18815277},A[42220]={router:"0x643770e279d5d0733f21d6dc03a8efbabf3255b4",weth:"0x0000000000000000000000000000000000000000",creationBlock:21407637},A[44787]={router:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",weth:"0x0000000000000000000000000000000000000000",creationBlock:17566658},A[56]={router:"0x4Dae2f939ACf50408e13d58534Ff8c2776d45265",weth:"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c",creationBlock:35160263},A[43114]={router:"0x4Dae2f939ACf50408e13d58534Ff8c2776d45265",weth:"0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",creationBlock:40237257},A[84531]={router:"0xd0872d928672ae2ff74bdb2f5130ac12229cafaf",weth:"0x4200000000000000000000000000000000000006",creationBlock:6915289},A[8453]={router:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",weth:"0x4200000000000000000000000000000000000006",creationBlock:9107268},A[81457]={router:"0x643770E279d5D0733F21d6DC03A8efbABf3255B4",weth:"0x4300000000000000000000000000000000000004",creationBlock:1116444},A),M=function(e){if(!(e in S))throw new Error("Universal Router not deployed on chain "+e);if("0x0000000000000000000000000000000000000000"==S[e].weth)throw new Error("Chain "+e+" does not have WETH");return S[e].weth},_=i.BigNumber.from(2).pow(255),k="0x0000000000000000000000000000000000000000",w="0x0000000000000000000000000000000000000000",P="0x0000000000000000000000000000000000000001",E="0x0000000000000000000000000000000000000002",h=new o.Percent(50,100),O=function(){function e(e,t){if(this.trade=e,this.options=t,this.tradeType=exports.RouterTradeType.UniswapTrade,t.fee&&t.flatFee)throw new Error("Only one fee option permitted");this.payerIsUser=!this.inputRequiresWrap&&!this.options.useRouterBalance}var t,n;return e.prototype.encode=function(e,t){var n;this.inputRequiresWrap&&e.addCommand(exports.CommandType.WRAP_ETH,[E,this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString()]),this.options.recipient=null!=(n=this.options.recipient)?n:P;for(var a,r,p=this.trade.outputAmount.currency.isNative,s=this.trade.tradeType===o.TradeType.EXACT_INPUT&&this.trade.routes.length>2||p||!!(a=this.options).fee||!!a.flatFee,d=T(this.trade.swaps);!(r=d()).done;){var m=r.value;switch(m.route.protocol){case u.Protocol.V2:F(e,m,this.trade.tradeType,this.options,this.payerIsUser,s);break;case u.Protocol.V3:N(e,m,this.trade.tradeType,this.options,this.payerIsUser,s);break;case u.Protocol.MIXED:g(e,m,this.trade.tradeType,this.options,this.payerIsUser,s);break;default:throw new Error("UNSUPPORTED_TRADE_PROTOCOL")}}var l=i.BigNumber.from(this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString());if(s){if(this.options.fee){var c=y.toHex(this.options.fee.fee.multiply(1e4).quotient);e.addCommand(exports.CommandType.PAY_PORTION,[this.trade.outputAmount.currency.wrapped.address,this.options.fee.recipient,c]),this.trade.tradeType===o.TradeType.EXACT_OUTPUT&&(l=l.sub(l.mul(c).div(1e4)))}if(this.options.flatFee){var f=this.options.flatFee.amount;if(l.lt(f))throw new Error("Flat fee amount greater than minimumAmountOut");e.addCommand(exports.CommandType.TRANSFER,[this.trade.outputAmount.currency.wrapped.address,this.options.flatFee.recipient,f]),this.trade.tradeType===o.TradeType.EXACT_OUTPUT&&(l=l.sub(f))}p?e.addCommand(exports.CommandType.UNWRAP_WETH,[this.options.recipient,l]):e.addCommand(exports.CommandType.SWEEP,[this.trade.outputAmount.currency.wrapped.address,this.options.recipient,l])}this.inputRequiresWrap&&(this.trade.tradeType===o.TradeType.EXACT_OUTPUT||this.trade.priceImpact.greaterThan(h))&&e.addCommand(exports.CommandType.UNWRAP_WETH,[this.options.recipient,0]),this.options.safeMode&&e.addCommand(exports.CommandType.SWEEP,[k,this.options.recipient,0])},t=e,(n=[{key:"inputRequiresWrap",get:function(){return this.trade.inputAmount.currency.isNative}}])&&function(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function F(e,t,n,a,r,i){var p=t.route,y=new s.Trade(p,n==o.TradeType.EXACT_INPUT?t.inputAmount:t.outputAmount,n);n==o.TradeType.EXACT_INPUT?e.addCommand(exports.CommandType.V2_SWAP_EXACT_IN,[i?E:a.recipient,y.maximumAmountIn(a.slippageTolerance).quotient.toString(),y.minimumAmountOut(a.slippageTolerance).quotient.toString(),p.path.map((function(e){return e.address})),r]):n==o.TradeType.EXACT_OUTPUT&&e.addCommand(exports.CommandType.V2_SWAP_EXACT_OUT,[i?E:a.recipient,y.minimumAmountOut(a.slippageTolerance).quotient.toString(),y.maximumAmountIn(a.slippageTolerance).quotient.toString(),p.path.map((function(e){return e.address})),r])}function N(e,t,n,a,r,i){var p=t.route,s=y.Trade.createUncheckedTrade({route:p,inputAmount:t.inputAmount,outputAmount:t.outputAmount,tradeType:n}),u=y.encodeRouteToPath(p,s.tradeType===o.TradeType.EXACT_OUTPUT);n==o.TradeType.EXACT_INPUT?e.addCommand(exports.CommandType.V3_SWAP_EXACT_IN,[i?E:a.recipient,s.maximumAmountIn(a.slippageTolerance).quotient.toString(),s.minimumAmountOut(a.slippageTolerance).quotient.toString(),u,r]):n==o.TradeType.EXACT_OUTPUT&&e.addCommand(exports.CommandType.V3_SWAP_EXACT_OUT,[i?E:a.recipient,s.minimumAmountOut(a.slippageTolerance).quotient.toString(),s.maximumAmountIn(a.slippageTolerance).quotient.toString(),u,r])}function g(e,t,n,a,r,i){var p=t.route,o=t.inputAmount,d=t.outputAmount,m=i?E:a.recipient;if(1===p.pools.length){if(p.pools[0]instanceof y.Pool)return N(e,t,n,a,r,i);if(p.pools[0]instanceof s.Pair)return F(e,t,n,a,r,i);throw new Error("Invalid route type")}for(var l,T=u.MixedRouteTrade.createUncheckedTrade({route:p,inputAmount:o,outputAmount:d,tradeType:n}),c=T.maximumAmountIn(a.slippageTolerance,o).quotient.toString(),f=T.minimumAmountOut(a.slippageTolerance,d).quotient.toString(),b=u.partitionMixedRouteByProtocol(p),v=function(e){return e===b.length-1},C=p.input.wrapped,A=0;A<b.length;A++){var x=b[A];l=u.getOutputOfPools(x,C);var R=new u.MixedRouteSDK([].concat(x),x[0].token0.equals(C)?x[0].token0:x[0].token1,l),I=new u.MixedRoute(R);if(C=l,function(e){return e.pools.every((function(e){return e instanceof y.Pool}))}(I)){var S=u.encodeMixedRouteToPath(I);e.addCommand(exports.CommandType.V3_SWAP_EXACT_IN,[v(A)?m:b[A+1][0].liquidityToken.address,0==A?c:_,v(A)?f:0,S,r&&0===A])}else e.addCommand(exports.CommandType.V2_SWAP_EXACT_IN,[v(A)?m:E,0===A?c:_,v(A)?f:0,I.path.map((function(e){return e.address})),r&&0===A])}}function B(e,t){var n=t.signature,a=i.ethers.utils.arrayify(t.signature).length;65!==a&&64!==a||(n=i.ethers.utils.joinSignature(i.ethers.utils.splitSignature(t.signature))),e.addCommand(exports.CommandType.PERMIT2_PERMIT,[t,n])}function V(e,t){t.approval&&t.permit2Permit&&t.approval.token!==t.permit2Permit.details.token&&n(!1),t.approval&&t.permit2TransferFrom&&t.approval.token!==t.permit2TransferFrom.token&&n(!1),t.permit2TransferFrom&&t.permit2Permit&&t.permit2TransferFrom.token!==t.permit2Permit.details.token&&n(!1),t.approval&&e.addCommand(exports.CommandType.APPROVE_ERC20,[t.approval.token,L(t.approval.protocol)]),t.permit2Permit&&B(e,t.permit2Permit),t.permit2TransferFrom&&e.addCommand(exports.CommandType.PERMIT2_TRANSFER_FROM,[t.permit2TransferFrom.token,t.permit2TransferFrom.recipient?t.permit2TransferFrom.recipient:E,t.permit2TransferFrom.amount])}function L(e){switch(e.toLowerCase()){case"0x00000000000000adc04c56bf30ac9d3c0aaf14dc":case"0x00000000000001ad428e4906ae43d8f9852d0dd6":return 0;case"0x2b2e8cda09bba9660dca5cb6233787738ad68329":return 1;default:throw new Error("unsupported protocol address")}}var D=function(){function e(){}return e.swapCallParameters=function(t,a){void 0===a&&(a={}),Array.isArray(t)||(t=[t]);for(var r,p=t.filter((function(e,t,n){return e.hasOwnProperty("market")})),s=1!=p.length||1!=p[0].orders.length,y=new I,u=i.BigNumber.from(0),o=i.BigNumber.from(0),d=new Set,m=T(t);!(r=m()).done;){var l=r.value;if(l.tradeType==exports.RouterTradeType.NFTTrade){var c=l;c.encode(y,{allowRevert:s});var f=c.getTotalPrice();c.market==exports.Market.Seaport?c.getInputTokens().forEach((function(e){d.add(e)})):d.add(k),u.lt(f)?(o=o.add(f.sub(u)),u=i.BigNumber.from(0)):u=u.sub(f)}else if(l.tradeType==exports.RouterTradeType.UniswapTrade){var b=l,v=b.trade.inputAmount.currency.isNative,C=b.trade.outputAmount.currency.isNative,A=b.options;v&&A.inputTokenPermit&&n(!1),A.inputTokenPermit&&B(y,A.inputTokenPermit),v&&(o=o.add(i.BigNumber.from(b.trade.maximumAmountIn(A.slippageTolerance).quotient.toString()))),C&&A.recipient==E&&(u=u.add(i.BigNumber.from(b.trade.minimumAmountOut(A.slippageTolerance).quotient.toString()))),b.encode(y,{allowRevert:!1})}else{if(l.tradeType!=exports.RouterTradeType.UnwrapWETH)throw"trade must be of instance: UniswapTrade or NFTTrade";var x=l;l.encode(y,{allowRevert:!1}),u=u.add(x.amount)}}return d.forEach((function(e){y.addCommand(exports.CommandType.SWEEP,[e,P,0])})),e.encodePlan(y,o,a)},e.swapNFTCallParameters=function(t,n){void 0===n&&(n={});for(var a,r=new I,p=i.BigNumber.from(0),s=1!=t.length||1!=t[0].orders.length,y=T(t);!(a=y()).done;){var u=a.value;u.encode(r,{allowRevert:s}),p=p.add(u.getTotalPrice())}return r.addCommand(exports.CommandType.SWEEP,[k,P,0]),e.encodePlan(r,p,n)},e.swapERC20CallParameters=function(t,a){var r=new I,p=new O(t,a),s=p.trade.inputAmount.currency;s.isNative&&a.inputTokenPermit&&n(!1),a.inputTokenPermit&&B(r,a.inputTokenPermit);var y=i.BigNumber.from(s.isNative?p.trade.maximumAmountIn(a.slippageTolerance).quotient.toString():0);return p.encode(r,{allowRevert:!1}),e.encodePlan(r,y,{deadline:a.deadlineOrPreviousBlockhash?i.BigNumber.from(a.deadlineOrPreviousBlockhash):void 0})},e.encodePlan=function(t,n,a){void 0===a&&(a={});var r=t.commands,i=t.inputs;return{calldata:e.INTERFACE.encodeFunctionData(a.deadline?"execute(bytes,bytes[],uint256)":"execute(bytes,bytes[])",a.deadline?[r,i,a.deadline]:[r,i]),value:n.toHexString()}},e}();D.INTERFACE=new r.Interface(a.abi);var U=function(e){function t(t){return e.call(this,exports.Market.Cryptopunks,t)||this}m(t,e);var n=t.prototype;return n.encode=function(e,t){for(var n,a=T(this.orders);!(n=a()).done;){var r=n.value;e.addCommand(exports.CommandType.CRYPTOPUNKS,[r.tokenId,r.recipient,r.value],t.allowRevert)}},n.getBuyItems=function(){for(var e,n=[],a=T(this.orders);!(e=a()).done;)n.push({tokenAddress:t.CRYPTOPUNK_ADDRESS,tokenId:e.value.tokenId,tokenType:exports.TokenType.Cryptopunk});return n},n.getTotalPrice=function(){for(var e,t=i.BigNumber.from(0),n=T(this.orders);!(e=n()).done;)t=t.add(e.value.value);return t},t}(C);U.CRYPTOPUNK_ADDRESS="0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb";var H=[{inputs:[{internalType:"address payable",name:"treasury",type:"address"},{internalType:"address",name:"feth",type:"address"},{internalType:"address",name:"royaltyRegistry",type:"address"},{internalType:"uint256",name:"duration",type:"uint256"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[],name:"FoundationTreasuryNode_Address_Is_Not_A_Contract",type:"error"},{inputs:[],name:"FoundationTreasuryNode_Caller_Not_Admin",type:"error"},{inputs:[{internalType:"uint256",name:"buyPrice",type:"uint256"}],name:"NFTMarketBuyPrice_Cannot_Buy_At_Lower_Price",type:"error"},{inputs:[],name:"NFTMarketBuyPrice_Cannot_Buy_Unset_Price",type:"error"},{inputs:[],name:"NFTMarketBuyPrice_Cannot_Cancel_Unset_Price",type:"error"},{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"NFTMarketBuyPrice_Only_Owner_Can_Cancel_Price",type:"error"},{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"NFTMarketBuyPrice_Only_Owner_Can_Set_Price",type:"error"},{inputs:[],name:"NFTMarketBuyPrice_Price_Already_Set",type:"error"},{inputs:[],name:"NFTMarketBuyPrice_Price_Too_High",type:"error"},{inputs:[{internalType:"address",name:"seller",type:"address"}],name:"NFTMarketBuyPrice_Seller_Mismatch",type:"error"},{inputs:[],name:"NFTMarketCore_FETH_Address_Is_Not_A_Contract",type:"error"},{inputs:[],name:"NFTMarketCore_Only_FETH_Can_Transfer_ETH",type:"error"},{inputs:[],name:"NFTMarketCore_Seller_Not_Found",type:"error"},{inputs:[],name:"NFTMarketFees_Address_Does_Not_Support_IRoyaltyRegistry",type:"error"},{inputs:[],name:"NFTMarketOffer_Cannot_Be_Made_While_In_Auction",type:"error"},{inputs:[{internalType:"uint256",name:"currentOfferAmount",type:"uint256"}],name:"NFTMarketOffer_Offer_Below_Min_Amount",type:"error"},{inputs:[{internalType:"uint256",name:"expiry",type:"uint256"}],name:"NFTMarketOffer_Offer_Expired",type:"error"},{inputs:[{internalType:"address",name:"currentOfferFrom",type:"address"}],name:"NFTMarketOffer_Offer_From_Does_Not_Match",type:"error"},{inputs:[{internalType:"uint256",name:"minOfferAmount",type:"uint256"}],name:"NFTMarketOffer_Offer_Must_Be_At_Least_Min_Amount",type:"error"},{inputs:[],name:"NFTMarketOffer_Provided_Contract_And_TokenId_Count_Must_Match",type:"error"},{inputs:[],name:"NFTMarketOffer_Reason_Required",type:"error"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],name:"NFTMarketReserveAuction_Already_Listed",type:"error"},{inputs:[{internalType:"uint256",name:"minAmount",type:"uint256"}],name:"NFTMarketReserveAuction_Bid_Must_Be_At_Least_Min_Amount",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Cannot_Admin_Cancel_Without_Reason",type:"error"},{inputs:[{internalType:"uint256",name:"reservePrice",type:"uint256"}],name:"NFTMarketReserveAuction_Cannot_Bid_Lower_Than_Reserve_Price",type:"error"},{inputs:[{internalType:"uint256",name:"endTime",type:"uint256"}],name:"NFTMarketReserveAuction_Cannot_Bid_On_Ended_Auction",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Cannot_Bid_On_Nonexistent_Auction",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Cannot_Cancel_Nonexistent_Auction",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Cannot_Finalize_Already_Settled_Auction",type:"error"},{inputs:[{internalType:"uint256",name:"endTime",type:"uint256"}],name:"NFTMarketReserveAuction_Cannot_Finalize_Auction_In_Progress",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Cannot_Rebid_Over_Outstanding_Bid",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Cannot_Update_Auction_In_Progress",type:"error"},{inputs:[{internalType:"uint256",name:"maxDuration",type:"uint256"}],name:"NFTMarketReserveAuction_Exceeds_Max_Duration",type:"error"},{inputs:[{internalType:"uint256",name:"extensionDuration",type:"uint256"}],name:"NFTMarketReserveAuction_Less_Than_Extension_Duration",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Must_Set_Non_Zero_Reserve_Price",type:"error"},{inputs:[{internalType:"address",name:"seller",type:"address"}],name:"NFTMarketReserveAuction_Not_Matching_Seller",type:"error"},{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"NFTMarketReserveAuction_Only_Owner_Can_Update_Auction",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Price_Already_Set",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Too_Much_Value_Provided",type:"error"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!0,internalType:"address",name:"seller",type:"address"},{indexed:!1,internalType:"address",name:"buyer",type:"address"},{indexed:!1,internalType:"uint256",name:"protocolFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"creatorFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"sellerRev",type:"uint256"}],name:"BuyPriceAccepted",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"}],name:"BuyPriceCanceled",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"}],name:"BuyPriceInvalidated",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!0,internalType:"address",name:"seller",type:"address"},{indexed:!1,internalType:"uint256",name:"price",type:"uint256"}],name:"BuyPriceSet",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!1,internalType:"address",name:"buyReferrer",type:"address"},{indexed:!1,internalType:"uint256",name:"buyReferrerProtocolFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"buyReferrerSellerFee",type:"uint256"}],name:"BuyReferralPaid",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!0,internalType:"address",name:"buyer",type:"address"},{indexed:!1,internalType:"address",name:"seller",type:"address"},{indexed:!1,internalType:"uint256",name:"protocolFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"creatorFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"sellerRev",type:"uint256"}],name:"OfferAccepted",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!1,internalType:"string",name:"reason",type:"string"}],name:"OfferCanceledByAdmin",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"}],name:"OfferInvalidated",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!0,internalType:"address",name:"buyer",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"expiration",type:"uint256"}],name:"OfferMade",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"auctionId",type:"uint256"},{indexed:!0,internalType:"address",name:"bidder",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"endTime",type:"uint256"}],name:"ReserveAuctionBidPlaced",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"auctionId",type:"uint256"}],name:"ReserveAuctionCanceled",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"auctionId",type:"uint256"},{indexed:!1,internalType:"string",name:"reason",type:"string"}],name:"ReserveAuctionCanceledByAdmin",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"seller",type:"address"},{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"duration",type:"uint256"},{indexed:!1,internalType:"uint256",name:"extensionDuration",type:"uint256"},{indexed:!1,internalType:"uint256",name:"reservePrice",type:"uint256"},{indexed:!1,internalType:"uint256",name:"auctionId",type:"uint256"}],name:"ReserveAuctionCreated",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"auctionId",type:"uint256"},{indexed:!0,internalType:"address",name:"seller",type:"address"},{indexed:!0,internalType:"address",name:"bidder",type:"address"},{indexed:!1,internalType:"uint256",name:"protocolFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"creatorFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"sellerRev",type:"uint256"}],name:"ReserveAuctionFinalized",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"auctionId",type:"uint256"}],name:"ReserveAuctionInvalidated",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"auctionId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"reservePrice",type:"uint256"}],name:"ReserveAuctionUpdated",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"WithdrawalToFETH",type:"event"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"address",name:"offerFrom",type:"address"},{internalType:"uint256",name:"minAmount",type:"uint256"}],name:"acceptOffer",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address[]",name:"nftContracts",type:"address[]"},{internalType:"uint256[]",name:"tokenIds",type:"uint256[]"},{internalType:"string",name:"reason",type:"string"}],name:"adminCancelOffers",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"},{internalType:"string",name:"reason",type:"string"}],name:"adminCancelReserveAuction",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint256",name:"maxPrice",type:"uint256"}],name:"buy",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint256",name:"maxPrice",type:"uint256"},{internalType:"address payable",name:"referrer",type:"address"}],name:"buyV2",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"cancelBuyPrice",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],name:"cancelReserveAuction",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint256",name:"reservePrice",type:"uint256"}],name:"createReserveAuction",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],name:"finalizeReserveAuction",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getBuyPrice",outputs:[{internalType:"address",name:"seller",type:"address"},{internalType:"uint256",name:"price",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"}],name:"getFeesAndRecipients",outputs:[{internalType:"uint256",name:"protocolFee",type:"uint256"},{internalType:"uint256",name:"creatorRev",type:"uint256"},{internalType:"address payable[]",name:"creatorRecipients",type:"address[]"},{internalType:"uint256[]",name:"creatorShares",type:"uint256[]"},{internalType:"uint256",name:"sellerRev",type:"uint256"},{internalType:"address payable",name:"owner",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"getFethAddress",outputs:[{internalType:"address",name:"fethAddress",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"getFoundationTreasury",outputs:[{internalType:"address payable",name:"treasuryAddress",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getImmutableRoyalties",outputs:[{internalType:"address payable[]",name:"recipients",type:"address[]"},{internalType:"uint256[]",name:"splitPerRecipientInBasisPoints",type:"uint256[]"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],name:"getMinBidAmount",outputs:[{internalType:"uint256",name:"minimum",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getMinOfferAmount",outputs:[{internalType:"uint256",name:"minimum",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"address payable",name:"creator",type:"address"}],name:"getMutableRoyalties",outputs:[{internalType:"address payable[]",name:"recipients",type:"address[]"},{internalType:"uint256[]",name:"splitPerRecipientInBasisPoints",type:"uint256[]"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getOffer",outputs:[{internalType:"address",name:"buyer",type:"address"},{internalType:"uint256",name:"expiration",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getOfferReferrer",outputs:[{internalType:"address payable",name:"referrer",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],name:"getReserveAuction",outputs:[{components:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"address payable",name:"seller",type:"address"},{internalType:"uint256",name:"duration",type:"uint256"},{internalType:"uint256",name:"extensionDuration",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"address payable",name:"bidder",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],internalType:"struct NFTMarketReserveAuction.ReserveAuction",name:"auction",type:"tuple"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],name:"getReserveAuctionBidReferrer",outputs:[{internalType:"address payable",name:"referrer",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getReserveAuctionIdFor",outputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getRoyaltyRegistry",outputs:[{internalType:"address",name:"registry",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getTokenCreator",outputs:[{internalType:"address payable",name:"creator",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"makeOffer",outputs:[{internalType:"uint256",name:"expiration",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"referrer",type:"address"}],name:"makeOfferV2",outputs:[{internalType:"uint256",name:"expiration",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],name:"placeBid",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"referrer",type:"address"}],name:"placeBidV2",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"}],name:"setBuyPrice",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"},{internalType:"uint256",name:"reservePrice",type:"uint256"}],name:"updateReserveAuction",outputs:[],stateMutability:"nonpayable",type:"function"},{stateMutability:"payable",type:"receive"}],W=function(e){function t(t){return e.call(this,exports.Market.Foundation,t)||this}m(t,e);var n=t.prototype;return n.encode=function(e,n){for(var a,r=T(this.orders);!(a=r()).done;){var i=a.value,p=t.INTERFACE.encodeFunctionData("buyV2",[i.tokenAddress,i.tokenId,i.price,i.referrer]);e.addCommand(exports.CommandType.FOUNDATION,[i.price,p,i.recipient,i.tokenAddress,i.tokenId],n.allowRevert)}},n.getBuyItems=function(){for(var e,t=[],n=T(this.orders);!(e=n()).done;){var a=e.value;t.push({tokenAddress:a.tokenAddress,tokenId:a.tokenId,tokenType:exports.TokenType.ERC721})}return t},n.getTotalPrice=function(){for(var e,t=i.BigNumber.from(0),n=T(this.orders);!(e=n()).done;)t=t.add(e.value.price);return t},t}(C);W.INTERFACE=new r.Interface(H);var X=[{inputs:[{internalType:"address",name:"_owner",type:"address"},{internalType:"address",name:"_protocolFeeRecipient",type:"address"},{internalType:"address",name:"_transferManager",type:"address"},{internalType:"address",name:"_weth",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[],name:"CallerInvalid",type:"error"},{inputs:[],name:"ChainIdInvalid",type:"error"},{inputs:[],name:"CreatorFeeBpTooHigh",type:"error"},{inputs:[],name:"CurrencyInvalid",type:"error"},{inputs:[],name:"ERC20TransferFromFail",type:"error"},{inputs:[],name:"LengthsInvalid",type:"error"},{inputs:[],name:"MerkleProofInvalid",type:"error"},{inputs:[{internalType:"uint256",name:"length",type:"uint256"}],name:"MerkleProofTooLarge",type:"error"},{inputs:[],name:"NewGasLimitETHTransferTooLow",type:"error"},{inputs:[],name:"NewProtocolFeeRecipientCannotBeNullAddress",type:"error"},{inputs:[],name:"NoOngoingTransferInProgress",type:"error"},{inputs:[],name:"NoSelectorForStrategy",type:"error"},{inputs:[],name:"NoncesInvalid",type:"error"},{inputs:[],name:"NotAContract",type:"error"},{inputs:[],name:"NotAffiliateController",type:"error"},{inputs:[],name:"NotOwner",type:"error"},{inputs:[],name:"NotV2Strategy",type:"error"},{inputs:[],name:"NullSignerAddress",type:"error"},{inputs:[],name:"OutsideOfTimeRange",type:"error"},{inputs:[],name:"PercentageTooHigh",type:"error"},{inputs:[],name:"QuoteTypeInvalid",type:"error"},{inputs:[],name:"ReentrancyFail",type:"error"},{inputs:[],name:"RenouncementNotInProgress",type:"error"},{inputs:[],name:"SameDomainSeparator",type:"error"},{inputs:[],name:"SignatureEOAInvalid",type:"error"},{inputs:[],name:"SignatureERC1271Invalid",type:"error"},{inputs:[{internalType:"uint256",name:"length",type:"uint256"}],name:"SignatureLengthInvalid",type:"error"},{inputs:[],name:"SignatureParameterSInvalid",type:"error"},{inputs:[{internalType:"uint8",name:"v",type:"uint8"}],name:"SignatureParameterVInvalid",type:"error"},{inputs:[],name:"StrategyHasNoSelector",type:"error"},{inputs:[{internalType:"uint256",name:"strategyId",type:"uint256"}],name:"StrategyNotAvailable",type:"error"},{inputs:[],name:"StrategyNotUsed",type:"error"},{inputs:[],name:"StrategyProtocolFeeTooHigh",type:"error"},{inputs:[],name:"TransferAlreadyInProgress",type:"error"},{inputs:[],name:"TransferNotInProgress",type:"error"},{inputs:[],name:"WrongPotentialOwner",type:"error"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"affiliate",type:"address"},{indexed:!1,internalType:"address",name:"currency",type:"address"},{indexed:!1,internalType:"uint256",name:"affiliateFee",type:"uint256"}],name:"AffiliatePayment",type:"event"},{anonymous:!1,inputs:[],name:"CancelOwnershipTransfer",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"currency",type:"address"},{indexed:!1,internalType:"bool",name:"isAllowed",type:"bool"}],name:"CurrencyStatusUpdated",type:"event"},{anonymous:!1,inputs:[],name:"InitiateOwnershipRenouncement",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"previousOwner",type:"address"},{indexed:!1,internalType:"address",name:"potentialOwner",type:"address"}],name:"InitiateOwnershipTransfer",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"affiliateController",type:"address"}],name:"NewAffiliateController",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"bool",name:"isActive",type:"bool"}],name:"NewAffiliateProgramStatus",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"affiliate",type:"address"},{indexed:!1,internalType:"uint256",name:"rate",type:"uint256"}],name:"NewAffiliateRate",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256",name:"bidNonce",type:"uint256"},{indexed:!1,internalType:"uint256",name:"askNonce",type:"uint256"}],name:"NewBidAskNonces",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"creatorFeeManager",type:"address"}],name:"NewCreatorFeeManager",type:"event"},{anonymous:!1,inputs:[],name:"NewDomainSeparator",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"gasLimitETHTransfer",type:"uint256"}],name:"NewGasLimitETHTransfer",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"maxCreatorFeeBp",type:"uint256"}],name:"NewMaxCreatorFeeBp",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"newOwner",type:"address"}],name:"NewOwner",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"protocolFeeRecipient",type:"address"}],name:"NewProtocolFeeRecipient",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"strategyId",type:"uint256"},{indexed:!1,internalType:"uint16",name:"standardProtocolFeeBp",type:"uint16"},{indexed:!1,internalType:"uint16",name:"minTotalFeeBp",type:"uint16"},{indexed:!1,internalType:"uint16",name:"maxProtocolFeeBp",type:"uint16"},{indexed:!1,internalType:"bytes4",name:"selector",type:"bytes4"},{indexed:!1,internalType:"bool",name:"isMakerBid",type:"bool"},{indexed:!1,internalType:"address",name:"implementation",type:"address"}],name:"NewStrategy",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256[]",name:"orderNonces",type:"uint256[]"}],name:"OrderNoncesCancelled",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"strategyId",type:"uint256"},{indexed:!1,internalType:"bool",name:"isActive",type:"bool"},{indexed:!1,internalType:"uint16",name:"standardProtocolFeeBp",type:"uint16"},{indexed:!1,internalType:"uint16",name:"minTotalFeeBp",type:"uint16"}],name:"StrategyUpdated",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256[]",name:"subsetNonces",type:"uint256[]"}],name:"SubsetNoncesCancelled",type:"event"},{anonymous:!1,inputs:[{components:[{internalType:"bytes32",name:"orderHash",type:"bytes32"},{internalType:"uint256",name:"orderNonce",type:"uint256"},{internalType:"bool",name:"isNonceInvalidated",type:"bool"}],indexed:!1,internalType:"struct ILooksRareProtocol.NonceInvalidationParameters",name:"nonceInvalidationParameters",type:"tuple"},{indexed:!1,internalType:"address",name:"askUser",type:"address"},{indexed:!1,internalType:"address",name:"bidUser",type:"address"},{indexed:!1,internalType:"uint256",name:"strategyId",type:"uint256"},{indexed:!1,internalType:"address",name:"currency",type:"address"},{indexed:!1,internalType:"address",name:"collection",type:"address"},{indexed:!1,internalType:"uint256[]",name:"itemIds",type:"uint256[]"},{indexed:!1,internalType:"uint256[]",name:"amounts",type:"uint256[]"},{indexed:!1,internalType:"address[2]",name:"feeRecipients",type:"address[2]"},{indexed:!1,internalType:"uint256[3]",name:"feeAmounts",type:"uint256[3]"}],name:"TakerAsk",type:"event"},{anonymous:!1,inputs:[{components:[{internalType:"bytes32",name:"orderHash",type:"bytes32"},{internalType:"uint256",name:"orderNonce",type:"uint256"},{internalType:"bool",name:"isNonceInvalidated",type:"bool"}],indexed:!1,internalType:"struct ILooksRareProtocol.NonceInvalidationParameters",name:"nonceInvalidationParameters",type:"tuple"},{indexed:!1,internalType:"address",name:"bidUser",type:"address"},{indexed:!1,internalType:"address",name:"bidRecipient",type:"address"},{indexed:!1,internalType:"uint256",name:"strategyId",type:"uint256"},{indexed:!1,internalType:"address",name:"currency",type:"address"},{indexed:!1,internalType:"address",name:"collection",type:"address"},{indexed:!1,internalType:"uint256[]",name:"itemIds",type:"uint256[]"},{indexed:!1,internalType:"uint256[]",name:"amounts",type:"uint256[]"},{indexed:!1,internalType:"address[2]",name:"feeRecipients",type:"address[2]"},{indexed:!1,internalType:"uint256[3]",name:"feeAmounts",type:"uint256[3]"}],name:"TakerBid",type:"event"},{inputs:[],name:"MAGIC_VALUE_ORDER_NONCE_EXECUTED",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[],name:"WETH",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint16",name:"standardProtocolFeeBp",type:"uint16"},{internalType:"uint16",name:"minTotalFeeBp",type:"uint16"},{internalType:"uint16",name:"maxProtocolFeeBp",type:"uint16"},{internalType:"bytes4",name:"selector",type:"bytes4"},{internalType:"bool",name:"isMakerBid",type:"bool"},{internalType:"address",name:"implementation",type:"address"}],name:"addStrategy",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"affiliateController",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"affiliateRates",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256[]",name:"orderNonces",type:"uint256[]"}],name:"cancelOrderNonces",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"cancelOwnershipTransfer",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256[]",name:"subsetNonces",type:"uint256[]"}],name:"cancelSubsetNonces",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"chainId",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"confirmOwnershipRenouncement",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"confirmOwnershipTransfer",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"creatorFeeManager",outputs:[{internalType:"contract ICreatorFeeManager",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"domainSeparator",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"address",name:"recipient",type:"address"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Taker[]",name:"takerBids",type:"tuple[]"},{components:[{internalType:"enum QuoteType",name:"quoteType",type:"uint8"},{internalType:"uint256",name:"globalNonce",type:"uint256"},{internalType:"uint256",name:"subsetNonce",type:"uint256"},{internalType:"uint256",name:"orderNonce",type:"uint256"},{internalType:"uint256",name:"strategyId",type:"uint256"},{internalType:"enum CollectionType",name:"collectionType",type:"uint8"},{internalType:"address",name:"collection",type:"address"},{internalType:"address",name:"currency",type:"address"},{internalType:"address",name:"signer",type:"address"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"uint256[]",name:"itemIds",type:"uint256[]"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Maker[]",name:"makerAsks",type:"tuple[]"},{internalType:"bytes[]",name:"makerSignatures",type:"bytes[]"},{components:[{internalType:"bytes32",name:"root",type:"bytes32"},{components:[{internalType:"bytes32",name:"value",type:"bytes32"},{internalType:"enum OrderStructs.MerkleTreeNodePosition",name:"position",type:"uint8"}],internalType:"struct OrderStructs.MerkleTreeNode[]",name:"proof",type:"tuple[]"}],internalType:"struct OrderStructs.MerkleTree[]",name:"merkleTrees",type:"tuple[]"},{internalType:"address",name:"affiliate",type:"address"},{internalType:"bool",name:"isAtomic",type:"bool"}],name:"executeMultipleTakerBids",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{components:[{internalType:"address",name:"recipient",type:"address"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Taker",name:"takerAsk",type:"tuple"},{components:[{internalType:"enum QuoteType",name:"quoteType",type:"uint8"},{internalType:"uint256",name:"globalNonce",type:"uint256"},{internalType:"uint256",name:"subsetNonce",type:"uint256"},{internalType:"uint256",name:"orderNonce",type:"uint256"},{internalType:"uint256",name:"strategyId",type:"uint256"},{internalType:"enum CollectionType",name:"collectionType",type:"uint8"},{internalType:"address",name:"collection",type:"address"},{internalType:"address",name:"currency",type:"address"},{internalType:"address",name:"signer",type:"address"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"uint256[]",name:"itemIds",type:"uint256[]"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Maker",name:"makerBid",type:"tuple"},{internalType:"bytes",name:"makerSignature",type:"bytes"},{components:[{internalType:"bytes32",name:"root",type:"bytes32"},{components:[{internalType:"bytes32",name:"value",type:"bytes32"},{internalType:"enum OrderStructs.MerkleTreeNodePosition",name:"position",type:"uint8"}],internalType:"struct OrderStructs.MerkleTreeNode[]",name:"proof",type:"tuple[]"}],internalType:"struct OrderStructs.MerkleTree",name:"merkleTree",type:"tuple"},{internalType:"address",name:"affiliate",type:"address"}],name:"executeTakerAsk",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"address",name:"recipient",type:"address"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Taker",name:"takerBid",type:"tuple"},{components:[{internalType:"enum QuoteType",name:"quoteType",type:"uint8"},{internalType:"uint256",name:"globalNonce",type:"uint256"},{internalType:"uint256",name:"subsetNonce",type:"uint256"},{internalType:"uint256",name:"orderNonce",type:"uint256"},{internalType:"uint256",name:"strategyId",type:"uint256"},{internalType:"enum CollectionType",name:"collectionType",type:"uint8"},{internalType:"address",name:"collection",type:"address"},{internalType:"address",name:"currency",type:"address"},{internalType:"address",name:"signer",type:"address"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"uint256[]",name:"itemIds",type:"uint256[]"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Maker",name:"makerAsk",type:"tuple"},{internalType:"bytes",name:"makerSignature",type:"bytes"},{components:[{internalType:"bytes32",name:"root",type:"bytes32"},{components:[{internalType:"bytes32",name:"value",type:"bytes32"},{internalType:"enum OrderStructs.MerkleTreeNodePosition",name:"position",type:"uint8"}],internalType:"struct OrderStructs.MerkleTreeNode[]",name:"proof",type:"tuple[]"}],internalType:"struct OrderStructs.MerkleTree",name:"merkleTree",type:"tuple"},{internalType:"address",name:"affiliate",type:"address"}],name:"executeTakerBid",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"bytes32",name:"root",type:"bytes32"},{internalType:"uint256",name:"proofLength",type:"uint256"}],name:"hashBatchOrder",outputs:[{internalType:"bytes32",name:"batchOrderHash",type:"bytes32"}],stateMutability:"pure",type:"function"},{inputs:[{internalType:"bool",name:"bid",type:"bool"},{internalType:"bool",name:"ask",type:"bool"}],name:"incrementBidAskNonces",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"initiateOwnershipRenouncement",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"newPotentialOwner",type:"address"}],name:"initiateOwnershipTransfer",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"isAffiliateProgramActive",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"isCurrencyAllowed",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"maxCreatorFeeBp",outputs:[{internalType:"uint16",name:"",type:"uint16"}],stateMutability:"view",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"ownershipStatus",outputs:[{internalType:"enum IOwnableTwoSteps.Status",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"potentialOwner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"protocolFeeRecipient",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"address",name:"recipient",type:"address"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Taker",name:"takerBid",type:"tuple"},{components:[{internalType:"enum QuoteType",name:"quoteType",type:"uint8"},{internalType:"uint256",name:"globalNonce",type:"uint256"},{internalType:"uint256",name:"subsetNonce",type:"uint256"},{internalType:"uint256",name:"orderNonce",type:"uint256"},{internalType:"uint256",name:"strategyId",type:"uint256"},{internalType:"enum CollectionType",name:"collectionType",type:"uint8"},{internalType:"address",name:"collection",type:"address"},{internalType:"address",name:"currency",type:"address"},{internalType:"address",name:"signer",type:"address"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"uint256[]",name:"itemIds",type:"uint256[]"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Maker",name:"makerAsk",type:"tuple"},{internalType:"address",name:"sender",type:"address"},{internalType:"bytes32",name:"orderHash",type:"bytes32"}],name:"restrictedExecuteTakerBid",outputs:[{internalType:"uint256",name:"protocolFeeAmount",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"strategyInfo",outputs:[{internalType:"bool",name:"isActive",type:"bool"},{internalType:"uint16",name:"standardProtocolFeeBp",type:"uint16"},{internalType:"uint16",name:"minTotalFeeBp",type:"uint16"},{internalType:"uint16",name:"maxProtocolFeeBp",type:"uint16"},{internalType:"bytes4",name:"selector",type:"bytes4"},{internalType:"bool",name:"isMakerBid",type:"bool"},{internalType:"address",name:"implementation",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"transferManager",outputs:[{internalType:"contract TransferManager",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"newAffiliateController",type:"address"}],name:"updateAffiliateController",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bool",name:"isActive",type:"bool"}],name:"updateAffiliateProgramStatus",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"affiliate",type:"address"},{internalType:"uint256",name:"bp",type:"uint256"}],name:"updateAffiliateRate",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"newCreatorFeeManager",type:"address"}],name:"updateCreatorFeeManager",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"currency",type:"address"},{internalType:"bool",name:"isAllowed",type:"bool"}],name:"updateCurrencyStatus",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"updateDomainSeparator",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"newGasLimitETHTransfer",type:"uint256"}],name:"updateETHGasLimitForTransfer",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint16",name:"newMaxCreatorFeeBp",type:"uint16"}],name:"updateMaxCreatorFeeBp",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"newProtocolFeeRecipient",type:"address"}],name:"updateProtocolFeeRecipient",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"strategyId",type:"uint256"},{internalType:"bool",name:"isActive",type:"bool"},{internalType:"uint16",name:"newStandardProtocolFee",type:"uint16"},{internalType:"uint16",name:"newMinTotalFee",type:"uint16"}],name:"updateStrategy",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"userBidAskNonces",outputs:[{internalType:"uint256",name:"bidNonce",type:"uint256"},{internalType:"uint256",name:"askNonce",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"}],name:"userOrderNonce",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"}],name:"userSubsetNonce",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"}],K=function(e){function t(t){return e.call(this,exports.Market.LooksRareV2,t)||this}m(t,e);var n=t.prototype;return n.encode=function(e,n){var a,r=this.refactorAPIData(this.orders),i=r.takerBids,p=r.makerOrders,s=r.makerSignatures,y=r.totalValue,u=r.merkleTrees;a=1==this.orders.length?t.INTERFACE.encodeFunctionData("executeTakerBid",[i[0],p[0],s[0],u[0],w]):t.INTERFACE.encodeFunctionData("executeMultipleTakerBids",[i,p,s,u,w,!1]),e.addCommand(exports.CommandType.LOOKS_RARE_V2,[y,a],n.allowRevert)},n.getBuyItems=function(){for(var e,n=[],a=T(this.orders);!(e=a()).done;)for(var r,i=e.value,p=i.apiOrder.collection,s=i.apiOrder.collectionType==t.ERC721_ORDER?exports.TokenType.ERC721:exports.TokenType.ERC1155,y=T(i.apiOrder.itemIds);!(r=y()).done;)n.push({tokenAddress:p,tokenId:r.value,tokenType:s});return n},n.getTotalPrice=function(){for(var e,t=i.BigNumber.from(0),n=T(this.orders);!(e=n()).done;)t=t.add(e.value.apiOrder.price);return t},n.refactorAPIData=function(e){var t=[],n=[],a=[],r=i.BigNumber.from(0),p=[];return e.forEach((function(e){var s,y;n.push(d({},e.apiOrder)),a.push(e.apiOrder.signature),t.push({recipient:e.taker,additionalParameters:"0x"}),r=r.add(i.BigNumber.from(e.apiOrder.price)),p.push({root:null!=(s=e.apiOrder.merkleRoot)?s:"0x0000000000000000000000000000000000000000000000000000000000000000",proof:null!=(y=e.apiOrder.merkleProof)?y:[]})})),{takerBids:t,makerOrders:n,makerSignatures:a,totalValue:r,merkleTrees:p}},t}(C);K.INTERFACE=new r.Interface(X),K.ERC721_ORDER=0;var q=[{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},{inputs:[],name:"ETH",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"NFT20",outputs:[{internalType:"contract INFT20Factory",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"UNIV2",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"UNIV3",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"WETH",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"_nft",type:"address"},{internalType:"uint256[]",name:"_toIds",type:"uint256[]"},{internalType:"uint256[]",name:"_toAmounts",type:"uint256[]"},{internalType:"address",name:"_receipient",type:"address"},{internalType:"uint24",name:"_fee",type:"uint24"},{internalType:"bool",name:"isV3",type:"bool"}],name:"ethForNft",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"_nft",type:"address"},{internalType:"uint256[]",name:"_ids",type:"uint256[]"},{internalType:"uint256[]",name:"_amounts",type:"uint256[]"},{internalType:"bool",name:"isErc721",type:"bool"},{internalType:"uint24",name:"_fee",type:"uint24"},{internalType:"bool",name:"isV3",type:"bool"}],name:"nftForEth",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"tokenAddress",type:"address"},{internalType:"uint256",name:"tokenAmount",type:"uint256"},{internalType:"address",name:"sendTo",type:"address"}],name:"recoverERC20",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"_registry",type:"address"}],name:"setNFT20",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"withdrawEth",outputs:[],stateMutability:"payable",type:"function"},{stateMutability:"payable",type:"receive"}],z=function(e){function t(t){return e.call(this,exports.Market.NFT20,t)||this}m(t,e);var n=t.prototype;return n.encode=function(e,n){for(var a,r=T(this.orders);!(a=r()).done;){var i=a.value,p=t.INTERFACE.encodeFunctionData("ethForNft",[i.tokenAddress,i.tokenIds,i.tokenAmounts,i.recipient,i.fee,i.isV3]);e.addCommand(exports.CommandType.NFT20,[i.value,p],n.allowRevert)}},n.getBuyItems=function(){for(var e,t=[],n=T(this.orders);!(e=n()).done;)for(var a,r=e.value,i=T(r.tokenIds);!(a=i()).done;)t.push({tokenAddress:r.tokenAddress,tokenId:a.value,tokenType:exports.TokenType.ERC721});return t},n.getTotalPrice=function(){for(var e,t=i.BigNumber.from(0),n=T(this.orders);!(e=n()).done;)t=t.add(e.value.value);return t},t}(C);z.INTERFACE=new r.Interface(q);var Y=[{inputs:[{internalType:"address",name:"_nftxFactory",type:"address"},{internalType:"address",name:"_WETH",type:"address"},{internalType:"address payable",name:"_swapTarget",type:"address"},{internalType:"uint256",name:"_dustThreshold",type:"uint256"}],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"count",type:"uint256"},{indexed:!1,internalType:"uint256",name:"ethSpent",type:"uint256"},{indexed:!1,internalType:"address",name:"to",type:"address"}],name:"Buy",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"ethAmount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"vTokenAmount",type:"uint256"},{indexed:!1,internalType:"address",name:"to",type:"address"}],name:"DustReturned",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"count",type:"uint256"},{indexed:!1,internalType:"uint256",name:"ethReceived",type:"uint256"},{indexed:!1,internalType:"address",name:"to",type:"address"}],name:"Sell",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"count",type:"uint256"},{indexed:!1,internalType:"uint256",name:"ethSpent",type:"uint256"},{indexed:!1,internalType:"address",name:"to",type:"address"}],name:"Swap",type:"event"},{inputs:[],name:"WETH",outputs:[{internalType:"contract IWETH",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"vaultId",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256[]",name:"specificIds",type:"uint256[]"},{internalType:"bytes",name:"swapCallData",type:"bytes"},{internalType:"address payable",name:"to",type:"address"}],name:"buyAndRedeem",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"uint256",name:"vaultId",type:"uint256"},{internalType:"uint256[]",name:"idsIn",type:"uint256[]"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"},{internalType:"uint256[]",name:"specificIds",type:"uint256[]"},{internalType:"bytes",name:"swapCallData",type:"bytes"},{internalType:"address payable",name:"to",type:"address"}],name:"buyAndSwap1155",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"uint256",name:"vaultId",type:"uint256"},{internalType:"uint256[]",name:"idsIn",type:"uint256[]"},{internalType:"uint256[]",name:"specificIds",type:"uint256[]"},{internalType:"bytes",name:"swapCallData",type:"bytes"},{internalType:"address payable",name:"to",type:"address"}],name:"buyAndSwap721",outputs:[],stateMutability:"payable",type:"function"},{inputs:[],name:"dustThreshold",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"feeDistributor",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"vaultId",type:"uint256"},{internalType:"uint256[]",name:"ids",type:"uint256[]"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"},{internalType:"bytes",name:"swapCallData",type:"bytes"},{internalType:"address payable",name:"to",type:"address"}],name:"mintAndSell1155",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"vaultId",type:"uint256"},{internalType:"uint256[]",name:"ids",type:"uint256[]"},{internalType:"bytes",name:"swapCallData",type:"bytes"},{internalType:"address payable",name:"to",type:"address"}],name:"mintAndSell721",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"nftxFactory",outputs:[{internalType:"contract INFTXVaultFactory",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"nftxVaultAddresses",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"address",name:"",type:"address"},{internalType:"uint256[]",name:"",type:"uint256[]"},{internalType:"uint256[]",name:"",type:"uint256[]"},{internalType:"bytes",name:"",type:"bytes"}],name:"onERC1155BatchReceived",outputs:[{internalType:"bytes4",name:"",type:"bytes4"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"},{internalType:"uint256",name:"",type:"uint256"},{internalType:"bytes",name:"",type:"bytes"}],name:"onERC1155Received",outputs:[{internalType:"bytes4",name:"",type:"bytes4"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"},{internalType:"bytes",name:"",type:"bytes"}],name:"onERC721Received",outputs:[{internalType:"bytes4",name:"",type:"bytes4"}],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bool",name:"_paused",type:"bool"}],name:"pause",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"paused",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"token",type:"address"}],name:"rescue",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"_dustThreshold",type:"uint256"}],name:"setDustThreshold",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{stateMutability:"payable",type:"receive"}],j=function(e){function t(t){return e.call(this,exports.Market.NFTX,t)||this}m(t,e);var n=t.prototype;return n.encode=function(e,n){for(var a,r=T(this.orders);!(a=r()).done;){var i=a.value,p=t.INTERFACE.encodeFunctionData("buyAndRedeem",[i.vaultId,i.tokenIds.length,i.tokenIds,i.swapCalldata,i.recipient]);e.addCommand(exports.CommandType.NFTX,[i.value,p],n.allowRevert)}},n.getBuyItems=function(){for(var e,t=[],n=T(this.orders);!(e=n()).done;)for(var a,r=e.value,i=T(r.tokenIds);!(a=i()).done;)t.push({tokenAddress:r.tokenAddress,tokenId:a.value,tokenType:exports.TokenType.ERC721});return t},n.getTotalPrice=function(){for(var e,t=i.BigNumber.from(0),n=T(this.orders);!(e=n()).done;)t=t.add(e.value.value);return t},t}(C);j.INTERFACE=new r.Interface(Y);var G=[{inputs:[{internalType:"address",name:"conduitController",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[],name:"BadContractSignature",type:"error"},{inputs:[],name:"BadFraction",type:"error"},{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"BadReturnValueFromERC20OnTransfer",type:"error"},{inputs:[{internalType:"uint8",name:"v",type:"uint8"}],name:"BadSignatureV",type:"error"},{inputs:[],name:"ConsiderationCriteriaResolverOutOfRange",type:"error"},{inputs:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"considerationIndex",type:"uint256"},{internalType:"uint256",name:"shortfallAmount",type:"uint256"}],name:"ConsiderationNotMet",type:"error"},{inputs:[],name:"CriteriaNotEnabledForItem",type:"error"},{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256[]",name:"identifiers",type:"uint256[]"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],name:"ERC1155BatchTransferGenericFailure",type:"error"},{inputs:[{internalType:"address",name:"account",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"EtherTransferGenericFailure",type:"error"},{inputs:[],name:"InexactFraction",type:"error"},{inputs:[],name:"InsufficientEtherSupplied",type:"error"},{inputs:[],name:"Invalid1155BatchTransferEncoding",type:"error"},{inputs:[],name:"InvalidBasicOrderParameterEncoding",type:"error"},{inputs:[{internalType:"address",name:"conduit",type:"address"}],name:"InvalidCallToConduit",type:"error"},{inputs:[],name:"InvalidCanceller",type:"error"},{inputs:[{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"address",name:"conduit",type:"address"}],name:"InvalidConduit",type:"error"},{inputs:[],name:"InvalidERC721TransferAmount",type:"error"},{inputs:[],name:"InvalidFulfillmentComponentData",type:"error"},{inputs:[{internalType:"uint256",name:"value",type:"uint256"}],name:"InvalidMsgValue",type:"error"},{inputs:[],name:"InvalidNativeOfferItem",type:"error"},{inputs:[],name:"InvalidProof",type:"error"},{inputs:[{internalType:"bytes32",name:"orderHash",type:"bytes32"}],name:"InvalidRestrictedOrder",type:"error"},{inputs:[],name:"InvalidSignature",type:"error"},{inputs:[],name:"InvalidSigner",type:"error"},{inputs:[],name:"InvalidTime",type:"error"},{inputs:[],name:"MismatchedFulfillmentOfferAndConsiderationComponents",type:"error"},{inputs:[{internalType:"enum Side",name:"side",type:"uint8"}],name:"MissingFulfillmentComponentOnAggregation",type:"error"},{inputs:[],name:"MissingItemAmount",type:"error"},{inputs:[],name:"MissingOriginalConsiderationItems",type:"error"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"NoContract",type:"error"},{inputs:[],name:"NoReentrantCalls",type:"error"},{inputs:[],name:"NoSpecifiedOrdersAvailable",type:"error"},{inputs:[],name:"OfferAndConsiderationRequiredOnFulfillment",type:"error"},{inputs:[],name:"OfferCriteriaResolverOutOfRange",type:"error"},{inputs:[{internalType:"bytes32",name:"orderHash",type:"bytes32"}],name:"OrderAlreadyFilled",type:"error"},{inputs:[],name:"OrderCriteriaResolverOutOfRange",type:"error"},{inputs:[{internalType:"bytes32",name:"orderHash",type:"bytes32"}],name:"OrderIsCancelled",type:"error"},{inputs:[{internalType:"bytes32",name:"orderHash",type:"bytes32"}],name:"OrderPartiallyFilled",type:"error"},{inputs:[],name:"PartialFillsNotEnabledForOrder",type:"error"},{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"TokenTransferGenericFailure",type:"error"},{inputs:[],name:"UnresolvedConsiderationCriteria",type:"error"},{inputs:[],name:"UnresolvedOfferCriteria",type:"error"},{inputs:[],name:"UnusedItemParameters",type:"error"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"newCounter",type:"uint256"},{indexed:!0,internalType:"address",name:"offerer",type:"address"}],name:"CounterIncremented",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"bytes32",name:"orderHash",type:"bytes32"},{indexed:!0,internalType:"address",name:"offerer",type:"address"},{indexed:!0,internalType:"address",name:"zone",type:"address"}],name:"OrderCancelled",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"bytes32",name:"orderHash",type:"bytes32"},{indexed:!0,internalType:"address",name:"offerer",type:"address"},{indexed:!0,internalType:"address",name:"zone",type:"address"},{indexed:!1,internalType:"address",name:"recipient",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"}],indexed:!1,internalType:"struct SpentItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],indexed:!1,internalType:"struct ReceivedItem[]",name:"consideration",type:"tuple[]"}],name:"OrderFulfilled",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"bytes32",name:"orderHash",type:"bytes32"},{indexed:!0,internalType:"address",name:"offerer",type:"address"},{indexed:!0,internalType:"address",name:"zone",type:"address"}],name:"OrderValidated",type:"event"},{inputs:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"counter",type:"uint256"}],internalType:"struct OrderComponents[]",name:"orders",type:"tuple[]"}],name:"cancel",outputs:[{internalType:"bool",name:"cancelled",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalConsiderationItems",type:"uint256"}],internalType:"struct OrderParameters",name:"parameters",type:"tuple"},{internalType:"uint120",name:"numerator",type:"uint120"},{internalType:"uint120",name:"denominator",type:"uint120"},{internalType:"bytes",name:"signature",type:"bytes"},{internalType:"bytes",name:"extraData",type:"bytes"}],internalType:"struct AdvancedOrder",name:"advancedOrder",type:"tuple"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"enum Side",name:"side",type:"uint8"},{internalType:"uint256",name:"index",type:"uint256"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"bytes32[]",name:"criteriaProof",type:"bytes32[]"}],internalType:"struct CriteriaResolver[]",name:"criteriaResolvers",type:"tuple[]"},{internalType:"bytes32",name:"fulfillerConduitKey",type:"bytes32"},{internalType:"address",name:"recipient",type:"address"}],name:"fulfillAdvancedOrder",outputs:[{internalType:"bool",name:"fulfilled",type:"bool"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalConsiderationItems",type:"uint256"}],internalType:"struct OrderParameters",name:"parameters",type:"tuple"},{internalType:"uint120",name:"numerator",type:"uint120"},{internalType:"uint120",name:"denominator",type:"uint120"},{internalType:"bytes",name:"signature",type:"bytes"},{internalType:"bytes",name:"extraData",type:"bytes"}],internalType:"struct AdvancedOrder[]",name:"advancedOrders",type:"tuple[]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"enum Side",name:"side",type:"uint8"},{internalType:"uint256",name:"index",type:"uint256"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"bytes32[]",name:"criteriaProof",type:"bytes32[]"}],internalType:"struct CriteriaResolver[]",name:"criteriaResolvers",type:"tuple[]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[][]",name:"offerFulfillments",type:"tuple[][]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[][]",name:"considerationFulfillments",type:"tuple[][]"},{internalType:"bytes32",name:"fulfillerConduitKey",type:"bytes32"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"maximumFulfilled",type:"uint256"}],name:"fulfillAvailableAdvancedOrders",outputs:[{internalType:"bool[]",name:"availableOrders",type:"bool[]"},{components:[{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ReceivedItem",name:"item",type:"tuple"},{internalType:"address",name:"offerer",type:"address"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"}],internalType:"struct Execution[]",name:"executions",type:"tuple[]"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalConsiderationItems",type:"uint256"}],internalType:"struct OrderParameters",name:"parameters",type:"tuple"},{internalType:"bytes",name:"signature",type:"bytes"}],internalType:"struct Order[]",name:"orders",type:"tuple[]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[][]",name:"offerFulfillments",type:"tuple[][]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[][]",name:"considerationFulfillments",type:"tuple[][]"},{internalType:"bytes32",name:"fulfillerConduitKey",type:"bytes32"},{internalType:"uint256",name:"maximumFulfilled",type:"uint256"}],name:"fulfillAvailableOrders",outputs:[{internalType:"bool[]",name:"availableOrders",type:"bool[]"},{components:[{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ReceivedItem",name:"item",type:"tuple"},{internalType:"address",name:"offerer",type:"address"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"}],internalType:"struct Execution[]",name:"executions",type:"tuple[]"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{internalType:"address",name:"considerationToken",type:"address"},{internalType:"uint256",name:"considerationIdentifier",type:"uint256"},{internalType:"uint256",name:"considerationAmount",type:"uint256"},{internalType:"address payable",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{internalType:"address",name:"offerToken",type:"address"},{internalType:"uint256",name:"offerIdentifier",type:"uint256"},{internalType:"uint256",name:"offerAmount",type:"uint256"},{internalType:"enum BasicOrderType",name:"basicOrderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"offererConduitKey",type:"bytes32"},{internalType:"bytes32",name:"fulfillerConduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalAdditionalRecipients",type:"uint256"},{components:[{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct AdditionalRecipient[]",name:"additionalRecipients",type:"tuple[]"},{internalType:"bytes",name:"signature",type:"bytes"}],internalType:"struct BasicOrderParameters",name:"parameters",type:"tuple"}],name:"fulfillBasicOrder",outputs:[{internalType:"bool",name:"fulfilled",type:"bool"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalConsiderationItems",type:"uint256"}],internalType:"struct OrderParameters",name:"parameters",type:"tuple"},{internalType:"bytes",name:"signature",type:"bytes"}],internalType:"struct Order",name:"order",type:"tuple"},{internalType:"bytes32",name:"fulfillerConduitKey",type:"bytes32"}],name:"fulfillOrder",outputs:[{internalType:"bool",name:"fulfilled",type:"bool"}],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"offerer",type:"address"}],name:"getCounter",outputs:[{internalType:"uint256",name:"counter",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"counter",type:"uint256"}],internalType:"struct OrderComponents",name:"order",type:"tuple"}],name:"getOrderHash",outputs:[{internalType:"bytes32",name:"orderHash",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"orderHash",type:"bytes32"}],name:"getOrderStatus",outputs:[{internalType:"bool",name:"isValidated",type:"bool"},{internalType:"bool",name:"isCancelled",type:"bool"},{internalType:"uint256",name:"totalFilled",type:"uint256"},{internalType:"uint256",name:"totalSize",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"incrementCounter",outputs:[{internalType:"uint256",name:"newCounter",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"information",outputs:[{internalType:"string",name:"version",type:"string"},{internalType:"bytes32",name:"domainSeparator",type:"bytes32"},{internalType:"address",name:"conduitController",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalConsiderationItems",type:"uint256"}],internalType:"struct OrderParameters",name:"parameters",type:"tuple"},{internalType:"uint120",name:"numerator",type:"uint120"},{internalType:"uint120",name:"denominator",type:"uint120"},{internalType:"bytes",name:"signature",type:"bytes"},{internalType:"bytes",name:"extraData",type:"bytes"}],internalType:"struct AdvancedOrder[]",name:"advancedOrders",type:"tuple[]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"enum Side",name:"side",type:"uint8"},{internalType:"uint256",name:"index",type:"uint256"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"bytes32[]",name:"criteriaProof",type:"bytes32[]"}],internalType:"struct CriteriaResolver[]",name:"criteriaResolvers",type:"tuple[]"},{components:[{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[]",name:"offerComponents",type:"tuple[]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[]",name:"considerationComponents",type:"tuple[]"}],internalType:"struct Fulfillment[]",name:"fulfillments",type:"tuple[]"}],name:"matchAdvancedOrders",outputs:[{components:[{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ReceivedItem",name:"item",type:"tuple"},{internalType:"address",name:"offerer",type:"address"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"}],internalType:"struct Execution[]",name:"executions",type:"tuple[]"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalConsiderationItems",type:"uint256"}],internalType:"struct OrderParameters",name:"parameters",type:"tuple"},{internalType:"bytes",name:"signature",type:"bytes"}],internalType:"struct Order[]",name:"orders",type:"tuple[]"},{components:[{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[]",name:"offerComponents",type:"tuple[]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[]",name:"considerationComponents",type:"tuple[]"}],internalType:"struct Fulfillment[]",name:"fulfillments",type:"tuple[]"}],name:"matchOrders",outputs:[{components:[{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ReceivedItem",name:"item",type:"tuple"},{internalType:"address",name:"offerer",type:"address"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"}],internalType:"struct Execution[]",name:"executions",type:"tuple[]"}],stateMutability:"payable",type:"function"},{inputs:[],name:"name",outputs:[{internalType:"string",name:"contractName",type:"string"}],stateMutability:"pure",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalConsiderationItems",type:"uint256"}],internalType:"struct OrderParameters",name:"parameters",type:"tuple"},{internalType:"bytes",name:"signature",type:"bytes"}],internalType:"struct Order[]",name:"orders",type:"tuple[]"}],name:"validate",outputs:[{internalType:"bool",name:"validated",type:"bool"}],stateMutability:"nonpayable",type:"function"}],Q=function(e){function t(t){return e.call(this,exports.Market.Seaport,t)||this}m(t,e);var n=t.prototype;return n.encode=function(e,n){for(var a,r=T(this.orders);!(a=r()).done;){for(var i,p=a.value,s=[],y=p.items.map((function(e,t){return[{orderIndex:t,itemIndex:0}]})),u=this.getConsiderationFulfillments(p.items),o=T(p.items);!(i=o()).done;){var d=this.getAdvancedOrderParams(i.value);s.push(d.advancedOrder)}var m;if(m=1==s.length?t.INTERFACE.encodeFunctionData("fulfillAdvancedOrder",[s[0],[],t.OPENSEA_CONDUIT_KEY,p.recipient]):t.INTERFACE.encodeFunctionData("fulfillAvailableAdvancedOrders",[s,[],y,u,t.OPENSEA_CONDUIT_KEY,p.recipient,100]),p.inputTokenProcessing)for(var l,c=T(p.inputTokenProcessing);!(l=c()).done;){var f=l.value;V(e,{approval:f.protocolApproval?{token:f.token,protocol:p.protocolAddress}:void 0,permit2Permit:f.permit2Permit,permit2TransferFrom:f.permit2TransferFrom?{token:f.token,amount:this.getTotalOrderPrice(p,f.token).toString()}:void 0})}e.addCommand(this.commandMap(p.protocolAddress),[this.getTotalOrderPrice(p,k).toString(),m],n.allowRevert)}},n.getBuyItems=function(){for(var e,t=[],n=T(this.orders);!(e=n()).done;)for(var a,r=T(e.value.items);!(a=r()).done;)for(var i,p=T(a.value.parameters.offer);!(i=p()).done;){var s=i.value;t.push({tokenAddress:s.token,tokenId:s.identifierOrCriteria,tokenType:exports.TokenType.ERC721})}return t},n.getInputTokens=function(){for(var e,t=new Set,n=T(this.orders);!(e=n()).done;)for(var a,r=T(e.value.items);!(a=r()).done;)for(var i,p=T(a.value.parameters.consideration);!(i=p()).done;){var s=i.value.token.toLowerCase();t.add(s)}return t},n.getTotalOrderPrice=function(e,t){void 0===t&&(t=k);for(var n,a=i.BigNumber.from(0),r=T(e.items);!(n=r()).done;)a=a.add(this.calculateValue(n.value.parameters.consideration,t));return a},n.getTotalPrice=function(e){void 0===e&&(e=k);for(var t,n=i.BigNumber.from(0),a=T(this.orders);!(t=a()).done;)for(var r,p=T(t.value.items);!(r=p()).done;)n=n.add(this.calculateValue(r.value.parameters.consideration,e));return n},n.commandMap=function(e){switch(e.toLowerCase()){case"0x00000000000000adc04c56bf30ac9d3c0aaf14dc":return exports.CommandType.SEAPORT_V1_5;case"0x00000000000001ad428e4906ae43d8f9852d0dd6":return exports.CommandType.SEAPORT_V1_4;default:throw new Error("unsupported Seaport address")}},n.getConsiderationFulfillments=function(e){var t=[],n=[];for(var a in e){var r=e[a],i=function(e){var i=r.parameters.consideration[e];-1===n.findIndex((function(e){return e===i.recipient}))&&n.push(i.recipient);var p=n.findIndex((function(e){return e===i.recipient}));t[p]?t[p].push({orderIndex:a,itemIndex:e}):t.push([{orderIndex:a,itemIndex:e}])};for(var p in r.parameters.consideration)i(p)}return t},n.getAdvancedOrderParams=function(e){return{advancedOrder:{parameters:e.parameters,numerator:i.BigNumber.from("1"),denominator:i.BigNumber.from("1"),signature:e.signature,extraData:"0x00"}}},n.calculateValue=function(e,t){return e.reduce((function(e,n){return n.token.toLowerCase()==t.toLowerCase()?e.add(n.startAmount):e}),i.BigNumber.from(0))},t}(C);Q.INTERFACE=new r.Interface(G),Q.OPENSEA_CONDUIT_KEY="0x0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000";var Z=[{inputs:[{internalType:"contract ILSSVMPairFactoryLike",name:"_factory",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[],name:"factory",outputs:[{internalType:"contract ILSSVMPairFactoryLike",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"contract ERC20",name:"token",type:"address"},{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"enum ILSSVMPairFactoryLike.PairVariant",name:"variant",type:"uint8"}],name:"pairTransferERC20From",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"contract IERC721",name:"nft",type:"address"},{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"id",type:"uint256"},{internalType:"enum ILSSVMPairFactoryLike.PairVariant",name:"variant",type:"uint8"}],name:"pairTransferNFTFrom",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256",name:"numItems",type:"uint256"}],internalType:"struct LSSVMRouter.PairSwapAny",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"maxCost",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapAny[]",name:"swapList",type:"tuple[]"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"robustSwapERC20ForAnyNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"maxCost",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapSpecific[]",name:"swapList",type:"tuple[]"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"robustSwapERC20ForSpecificNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"maxCost",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapSpecific[]",name:"tokenToNFTTrades",type:"tuple[]"},{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"minOutput",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapSpecificForToken[]",name:"nftToTokenTrades",type:"tuple[]"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address payable",name:"tokenRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"}],internalType:"struct LSSVMRouter.RobustPairNFTsFoTokenAndTokenforNFTsTrade",name:"params",type:"tuple"}],name:"robustSwapERC20ForSpecificNFTsAndNFTsToToken",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"},{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256",name:"numItems",type:"uint256"}],internalType:"struct LSSVMRouter.PairSwapAny",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"maxCost",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapAny[]",name:"swapList",type:"tuple[]"},{internalType:"address payable",name:"ethRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"robustSwapETHForAnyNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"maxCost",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapSpecific[]",name:"swapList",type:"tuple[]"},{internalType:"address payable",name:"ethRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"robustSwapETHForSpecificNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"maxCost",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapSpecific[]",name:"tokenToNFTTrades",type:"tuple[]"},{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"minOutput",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapSpecificForToken[]",name:"nftToTokenTrades",type:"tuple[]"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address payable",name:"tokenRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"}],internalType:"struct LSSVMRouter.RobustPairNFTsFoTokenAndTokenforNFTsTrade",name:"params",type:"tuple"}],name:"robustSwapETHForSpecificNFTsAndNFTsToToken",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"},{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"minOutput",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapSpecificForToken[]",name:"swapList",type:"tuple[]"},{internalType:"address payable",name:"tokenRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"robustSwapNFTsForToken",outputs:[{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256",name:"numItems",type:"uint256"}],internalType:"struct LSSVMRouter.PairSwapAny[]",name:"swapList",type:"tuple[]"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapERC20ForAnyNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"swapList",type:"tuple[]"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapERC20ForSpecificNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256",name:"numItems",type:"uint256"}],internalType:"struct LSSVMRouter.PairSwapAny[]",name:"swapList",type:"tuple[]"},{internalType:"address payable",name:"ethRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapETHForAnyNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"swapList",type:"tuple[]"},{internalType:"address payable",name:"ethRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapETHForSpecificNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"nftToTokenTrades",type:"tuple[]"},{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256",name:"numItems",type:"uint256"}],internalType:"struct LSSVMRouter.PairSwapAny[]",name:"tokenToNFTTrades",type:"tuple[]"}],internalType:"struct LSSVMRouter.NFTsForAnyNFTsTrade",name:"trade",type:"tuple"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"uint256",name:"minOutput",type:"uint256"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapNFTsForAnyNFTsThroughERC20",outputs:[{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"nftToTokenTrades",type:"tuple[]"},{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256",name:"numItems",type:"uint256"}],internalType:"struct LSSVMRouter.PairSwapAny[]",name:"tokenToNFTTrades",type:"tuple[]"}],internalType:"struct LSSVMRouter.NFTsForAnyNFTsTrade",name:"trade",type:"tuple"},{internalType:"uint256",name:"minOutput",type:"uint256"},{internalType:"address payable",name:"ethRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapNFTsForAnyNFTsThroughETH",outputs:[{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"nftToTokenTrades",type:"tuple[]"},{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"tokenToNFTTrades",type:"tuple[]"}],internalType:"struct LSSVMRouter.NFTsForSpecificNFTsTrade",name:"trade",type:"tuple"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"uint256",name:"minOutput",type:"uint256"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapNFTsForSpecificNFTsThroughERC20",outputs:[{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"nftToTokenTrades",type:"tuple[]"},{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"tokenToNFTTrades",type:"tuple[]"}],internalType:"struct LSSVMRouter.NFTsForSpecificNFTsTrade",name:"trade",type:"tuple"},{internalType:"uint256",name:"minOutput",type:"uint256"},{internalType:"address payable",name:"ethRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapNFTsForSpecificNFTsThroughETH",outputs:[{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"swapList",type:"tuple[]"},{internalType:"uint256",name:"minOutput",type:"uint256"},{internalType:"address",name:"tokenRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapNFTsForToken",outputs:[{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{stateMutability:"payable",type:"receive"}],$=function(e){function t(t){return e.call(this,exports.Market.Sudoswap,t)||this}m(t,e);var n=t.prototype;return n.encode=function(e,n){for(var a,r=T(this.orders);!(a=r()).done;){var p=a.value,s=t.INTERFACE.encodeFunctionData("robustSwapETHForSpecificNFTs",[p.swaps.map((function(e){return{swapInfo:e.swapInfo,maxCost:e.maxCost}})),p.ethRecipient,p.nftRecipient,p.deadline]),y=p.swaps.reduce((function(e,t){return e.add(t.maxCost)}),i.BigNumber.from(0));e.addCommand(exports.CommandType.SUDOSWAP,[y,s],n.allowRevert)}},n.getBuyItems=function(){for(var e,t=[],n=T(this.orders);!(e=n()).done;)for(var a,r=T(e.value.swaps);!(a=r()).done;)for(var i,p=a.value,s=T(p.swapInfo.nftIds);!(i=s()).done;)t.push({tokenAddress:p.tokenAddress,tokenId:i.value,tokenType:exports.TokenType.ERC721});return t},n.getTotalPrice=function(){for(var e,t=i.BigNumber.from(0),n=T(this.orders);!(e=n()).done;)for(var a,r=T(e.value.swaps);!(a=r()).done;)t=t.add(a.value.maxCost);return t},t}(C);$.INTERFACE=new r.Interface(Z);var J=[{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"itemHash",type:"bytes32"},{indexed:!1,internalType:"address",name:"currency",type:"address"},{indexed:!1,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"incentive",type:"uint256"}],name:"EvAuctionRefund",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"itemHash",type:"bytes32"}],name:"EvCancel",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"delegate",type:"address"},{indexed:!1,internalType:"bool",name:"isRemoval",type:"bool"}],name:"EvDelegate",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"index",type:"uint256"},{indexed:!1,internalType:"bytes",name:"error",type:"bytes"}],name:"EvFailure",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"newValue",type:"uint256"}],name:"EvFeeCapUpdate",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"itemHash",type:"bytes32"},{indexed:!1,internalType:"address",name:"maker",type:"address"},{indexed:!1,internalType:"address",name:"taker",type:"address"},{indexed:!1,internalType:"uint256",name:"orderSalt",type:"uint256"},{indexed:!1,internalType:"uint256",name:"settleSalt",type:"uint256"},{indexed:!1,internalType:"uint256",name:"intent",type:"uint256"},{indexed:!1,internalType:"uint256",name:"delegateType",type:"uint256"},{indexed:!1,internalType:"uint256",name:"deadline",type:"uint256"},{indexed:!1,internalType:"contract IERC20Upgradeable",name:"currency",type:"address"},{indexed:!1,internalType:"bytes",name:"dataMask",type:"bytes"},{components:[{internalType:"uint256",name:"price",type:"uint256"},{internalType:"bytes",name:"data",type:"bytes"}],indexed:!1,internalType:"struct Market.OrderItem",name:"item",type:"tuple"},{components:[{internalType:"enum Market.Op",name:"op",type:"uint8"},{internalType:"uint256",name:"orderIdx",type:"uint256"},{internalType:"uint256",name:"itemIdx",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"bytes32",name:"itemHash",type:"bytes32"},{internalType:"contract IDelegate",name:"executionDelegate",type:"address"},{internalType:"bytes",name:"dataReplacement",type:"bytes"},{internalType:"uint256",name:"bidIncentivePct",type:"uint256"},{internalType:"uint256",name:"aucMinIncrementPct",type:"uint256"},{internalType:"uint256",name:"aucIncDurationSecs",type:"uint256"},{components:[{internalType:"uint256",name:"percentage",type:"uint256"},{internalType:"address",name:"to",type:"address"}],internalType:"struct Market.Fee[]",name:"fees",type:"tuple[]"}],indexed:!1,internalType:"struct Market.SettleDetail",name:"detail",type:"tuple"}],name:"EvInventory",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"bytes32",name:"itemHash",type:"bytes32"},{indexed:!1,internalType:"address",name:"currency",type:"address"},{indexed:!1,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"EvProfit",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"signer",type:"address"},{indexed:!1,internalType:"bool",name:"isRemoval",type:"bool"}],name:"EvSigner",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Paused",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Unpaused",type:"event"},{inputs:[],name:"RATE_BASE",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32[]",name:"itemHashes",type:"bytes32[]"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"cancel",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"delegates",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"feeCapPct",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"feeCapPct_",type:"uint256"},{internalType:"address",name:"weth_",type:"address"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"",type:"bytes32"}],name:"inventoryStatus",outputs:[{internalType:"enum Market.InvStatus",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"",type:"bytes32"}],name:"ongoingAuctions",outputs:[{internalType:"uint256",name:"price",type:"uint256"},{internalType:"uint256",name:"netPrice",type:"uint256"},{internalType:"uint256",name:"endAt",type:"uint256"},{internalType:"address",name:"bidder",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"pause",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"paused",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"address",name:"user",type:"address"},{internalType:"uint256",name:"network",type:"uint256"},{internalType:"uint256",name:"intent",type:"uint256"},{internalType:"uint256",name:"delegateType",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"contract IERC20Upgradeable",name:"currency",type:"address"},{internalType:"bytes",name:"dataMask",type:"bytes"},{components:[{internalType:"uint256",name:"price",type:"uint256"},{internalType:"bytes",name:"data",type:"bytes"}],internalType:"struct Market.OrderItem[]",name:"items",type:"tuple[]"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"uint8",name:"signVersion",type:"uint8"}],internalType:"struct Market.Order[]",name:"orders",type:"tuple[]"},{components:[{internalType:"enum Market.Op",name:"op",type:"uint8"},{internalType:"uint256",name:"orderIdx",type:"uint256"},{internalType:"uint256",name:"itemIdx",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"bytes32",name:"itemHash",type:"bytes32"},{internalType:"contract IDelegate",name:"executionDelegate",type:"address"},{internalType:"bytes",name:"dataReplacement",type:"bytes"},{internalType:"uint256",name:"bidIncentivePct",type:"uint256"},{internalType:"uint256",name:"aucMinIncrementPct",type:"uint256"},{internalType:"uint256",name:"aucIncDurationSecs",type:"uint256"},{components:[{internalType:"uint256",name:"percentage",type:"uint256"},{internalType:"address",name:"to",type:"address"}],internalType:"struct Market.Fee[]",name:"fees",type:"tuple[]"}],internalType:"struct Market.SettleDetail[]",name:"details",type:"tuple[]"},{components:[{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"uint256",name:"amountToEth",type:"uint256"},{internalType:"uint256",name:"amountToWeth",type:"uint256"},{internalType:"address",name:"user",type:"address"},{internalType:"bool",name:"canFail",type:"bool"}],internalType:"struct Market.SettleShared",name:"shared",type:"tuple"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"},{internalType:"uint8",name:"v",type:"uint8"}],internalType:"struct Market.RunInput",name:"input",type:"tuple"}],name:"run",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{components:[{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"address",name:"user",type:"address"},{internalType:"uint256",name:"network",type:"uint256"},{internalType:"uint256",name:"intent",type:"uint256"},{internalType:"uint256",name:"delegateType",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"contract IERC20Upgradeable",name:"currency",type:"address"},{internalType:"bytes",name:"dataMask",type:"bytes"},{components:[{internalType:"uint256",name:"price",type:"uint256"},{internalType:"bytes",name:"data",type:"bytes"}],internalType:"struct Market.OrderItem[]",name:"items",type:"tuple[]"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"uint8",name:"signVersion",type:"uint8"}],internalType:"struct Market.Order",name:"order",type:"tuple"},{components:[{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"uint256",name:"amountToEth",type:"uint256"},{internalType:"uint256",name:"amountToWeth",type:"uint256"},{internalType:"address",name:"user",type:"address"},{internalType:"bool",name:"canFail",type:"bool"}],internalType:"struct Market.SettleShared",name:"shared",type:"tuple"},{components:[{internalType:"enum Market.Op",name:"op",type:"uint8"},{internalType:"uint256",name:"orderIdx",type:"uint256"},{internalType:"uint256",name:"itemIdx",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"bytes32",name:"itemHash",type:"bytes32"},{internalType:"contract IDelegate",name:"executionDelegate",type:"address"},{internalType:"bytes",name:"dataReplacement",type:"bytes"},{internalType:"uint256",name:"bidIncentivePct",type:"uint256"},{internalType:"uint256",name:"aucMinIncrementPct",type:"uint256"},{internalType:"uint256",name:"aucIncDurationSecs",type:"uint256"},{components:[{internalType:"uint256",name:"percentage",type:"uint256"},{internalType:"address",name:"to",type:"address"}],internalType:"struct Market.Fee[]",name:"fees",type:"tuple[]"}],internalType:"struct Market.SettleDetail",name:"detail",type:"tuple"}],name:"run1",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"signers",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"unpause",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address[]",name:"toAdd",type:"address[]"},{internalType:"address[]",name:"toRemove",type:"address[]"}],name:"updateDelegates",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"val",type:"uint256"}],name:"updateFeeCap",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address[]",name:"toAdd",type:"address[]"},{internalType:"address[]",name:"toRemove",type:"address[]"}],name:"updateSigners",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"weth",outputs:[{internalType:"contract IWETHUpgradable",name:"",type:"address"}],stateMutability:"view",type:"function"},{stateMutability:"payable",type:"receive"}],ee=function(e){function t(t){return e.call(this,exports.Market.X2Y2,t)||this}m(t,e);var n=t.prototype;return n.encode=function(e,n){for(var a,r=T(this.orders);!(a=r()).done;){var i=a.value,p=t.INTERFACE.getSighash(t.INTERFACE.getFunction("run"))+i.signedInput.slice(2);i.tokenType==exports.TokenType.ERC721?e.addCommand(exports.CommandType.X2Y2_721,[i.price,p,i.recipient,i.tokenAddress,i.tokenId],n.allowRevert):i.tokenType==exports.TokenType.ERC1155&&e.addCommand(exports.CommandType.X2Y2_1155,[i.price,p,i.recipient,i.tokenAddress,i.tokenId,i.tokenAmount],n.allowRevert)}},n.getBuyItems=function(){for(var e,t=[],n=T(this.orders);!(e=n()).done;){var a=e.value;t.push({tokenAddress:a.tokenAddress,tokenId:a.tokenId,tokenType:a.tokenType})}return t},n.getTotalPrice=function(){for(var e,t=i.BigNumber.from(0),n=T(this.orders);!(e=n()).done;)t=t.add(e.value.price);return t},t}(C);ee.INTERFACE=new r.Interface(J);var te,ne=function(){function e(e,t,a){this.tradeType=exports.RouterTradeType.UnwrapWETH,this.wethAddress=M(t),this.amount=e,a&&(a.details.token.toLowerCase()!==this.wethAddress.toLowerCase()&&n(!1),a.details.amount>=e||n(!1),this.permit2Data=a)}return e.prototype.encode=function(e,t){V(e,{permit2Permit:this.permit2Data,permit2TransferFrom:{token:this.wethAddress,amount:this.amount.toString()}}),e.addCommand(exports.CommandType.UNWRAP_WETH,[E,this.amount])},e}();(te=exports.PoolType||(exports.PoolType={})).V2Pool="v2-pool",te.V3Pool="v3-pool";var ae=function(e){return e.toLowerCase()===k.toLowerCase()||e.toLowerCase()==="0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee".toLowerCase()},re=function(){function e(){}return e.fromClassicQuote=function(t){var n=t.route,a=t.tokenIn,r=t.tokenOut;if(!n)throw new Error("Expected route to be present");if(!n.length)throw new Error("Expected there to be at least one route");if(n.some((function(e){return!e.length})))throw new Error("Expected all routes to have at least one pool");var i=n[0],p=i[0].tokenIn,d=i[i.length-1].tokenOut;if(!p||!d)throw new Error("Expected both tokenIn and tokenOut to be present");if(p.chainId!==d.chainId)throw new Error("Expected tokenIn and tokenOut to be have same chainId");var m=e.toCurrency(ae(a),p),l=e.toCurrency(ae(r),d),T=n.map((function(t){var n=t[0].amountIn,a=t[t.length-1].amountOut;if(!n||!a)throw new Error("Expected both raw amountIn and raw amountOut to be present");var r=o.CurrencyAmount.fromRawAmount(m,n),i=o.CurrencyAmount.fromRawAmount(l,a),p=e.isVersionedRoute(exports.PoolType.V2Pool,t),d=e.isVersionedRoute(exports.PoolType.V3Pool,t);return{routev3:d?new y.Route(t.map(e.toPool),m,l):null,routev2:p?new s.Route(t.map(e.toPair),m,l):null,mixedRoute:d||p?null:new u.MixedRouteSDK(t.map(e.toPoolOrPair),m,l),inputAmount:r,outputAmount:i}}));return new u.Trade({v2Routes:T.filter((function(e){return e.routev2})).map((function(e){return{routev2:e.routev2,inputAmount:e.inputAmount,outputAmount:e.outputAmount}})),v3Routes:T.filter((function(e){return e.routev3})).map((function(e){return{routev3:e.routev3,inputAmount:e.inputAmount,outputAmount:e.outputAmount}})),mixedRoutes:T.filter((function(e){return e.mixedRoute})).map((function(e){return{mixedRoute:e.mixedRoute,inputAmount:e.inputAmount,outputAmount:e.outputAmount}})),tradeType:t.tradeType})},e.toCurrency=function(e,t){return e?o.Ether.onChain(t.chainId):this.toToken(t)},e.toToken=function(e){var t=e.symbol,n=e.buyFeeBps,a=e.sellFeeBps;return new o.Token(e.chainId,e.address,parseInt(e.decimals.toString()),t,void 0,!1,n?i.BigNumber.from(n):void 0,a?i.BigNumber.from(a):void 0)},e.toPool=function(t){var n=t.fee,a=t.sqrtRatioX96,r=t.liquidity,i=t.tickCurrent,p=t.tokenOut;return new y.Pool(e.toToken(t.tokenIn),e.toToken(p),parseInt(n),a,r,parseInt(i))},e.isVersionedRoute=function(e,t){return t.every((function(t){return t.type===e}))},e}();re.toPoolOrPair=function(e){return e.type===exports.PoolType.V3Pool?re.toPool(e):re.toPair(e)},re.toPair=function(e){var t=e.reserve0,n=e.reserve1;return new s.Pair(o.CurrencyAmount.fromRawAmount(re.toToken(t.token),t.quotient),o.CurrencyAmount.fromRawAmount(re.toToken(n.token),n.quotient))},exports.CryptopunkTrade=U,exports.FoundationTrade=W,exports.LooksRareV2Trade=K,exports.NFT20Trade=z,exports.NFTTrade=C,exports.NFTXTrade=j,exports.PERMIT2_ADDRESS="0x000000000022D473030F116dDEE9F6B43aC78BA3",exports.ROUTER_AS_RECIPIENT=E,exports.RoutePlanner=I,exports.RouterTradeAdapter=re,exports.SeaportTrade=Q,exports.SudoswapTrade=$,exports.SwapRouter=D,exports.UNIVERSAL_ROUTER_ADDRESS=function(e){if(!(e in S))throw new Error("Universal Router not deployed on chain "+e);return S[e].router},exports.UNIVERSAL_ROUTER_CREATION_BLOCK=function(e){if(!(e in S))throw new Error("Universal Router not deployed on chain "+e);return S[e].creationBlock},exports.UniswapTrade=O,exports.UnwrapWETH=ne,exports.WETH_ADDRESS=M,exports.X2Y2Trade=ee,exports.isNativeCurrency=ae;
+"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e,t,n=(e=require("tiny-invariant"))&&"object"==typeof e&&"default"in e?e.default:e,a=require("@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json"),r=require("@ethersproject/abi"),i=require("ethers"),p=require("ethers/lib/utils"),s=require("@uniswap/v2-sdk"),y=require("@uniswap/v3-sdk"),u=require("@uniswap/router-sdk"),o=require("@uniswap/sdk-core");function d(){return(d=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function m(e,t){var n,a;e.prototype=Object.create(t.prototype),e.prototype.constructor=e,n=e,a=t,(Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e})(n,a)}function l(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,a=new Array(t);n<t;n++)a[n]=e[n];return a}function T(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(n)return(n=n.call(e)).next.bind(n);if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return l(e,void 0);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?l(e,void 0):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var a=0;return function(){return a>=e.length?{done:!0}:{done:!1,value:e[a++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}require("jsbi"),require("bignumber.js"),(t=exports.RouterTradeType||(exports.RouterTradeType={})).UniswapTrade="UniswapTrade",t.NFTTrade="NFTTrade",t.UnwrapWETH="UnwrapWETH";var c,f,b,v,C=function(e,t){this.tradeType=exports.RouterTradeType.NFTTrade,t.length>0||n(!1),this.market=e,this.orders=t};(c=exports.Market||(exports.Market={})).Foundation="foundation",c.LooksRareV2="looksrareV2",c.NFT20="nft20",c.NFTX="nftx",c.Seaport="seaport",c.Sudoswap="Sudoswap",c.Cryptopunks="cryptopunks",c.X2Y2="x2y2",c.Element="element",(f=exports.TokenType||(exports.TokenType={})).ERC721="ERC721",f.ERC1155="ERC1155",f.Cryptopunk="Cryptopunk",(v=exports.CommandType||(exports.CommandType={}))[v.V3_SWAP_EXACT_IN=0]="V3_SWAP_EXACT_IN",v[v.V3_SWAP_EXACT_OUT=1]="V3_SWAP_EXACT_OUT",v[v.PERMIT2_TRANSFER_FROM=2]="PERMIT2_TRANSFER_FROM",v[v.PERMIT2_PERMIT_BATCH=3]="PERMIT2_PERMIT_BATCH",v[v.SWEEP=4]="SWEEP",v[v.TRANSFER=5]="TRANSFER",v[v.PAY_PORTION=6]="PAY_PORTION",v[v.V2_SWAP_EXACT_IN=8]="V2_SWAP_EXACT_IN",v[v.V2_SWAP_EXACT_OUT=9]="V2_SWAP_EXACT_OUT",v[v.PERMIT2_PERMIT=10]="PERMIT2_PERMIT",v[v.WRAP_ETH=11]="WRAP_ETH",v[v.UNWRAP_WETH=12]="UNWRAP_WETH",v[v.PERMIT2_TRANSFER_FROM_BATCH=13]="PERMIT2_TRANSFER_FROM_BATCH",v[v.BALANCE_CHECK_ERC20=14]="BALANCE_CHECK_ERC20",v[v.SEAPORT_V1_5=16]="SEAPORT_V1_5",v[v.LOOKS_RARE_V2=17]="LOOKS_RARE_V2",v[v.NFTX=18]="NFTX",v[v.CRYPTOPUNKS=19]="CRYPTOPUNKS",v[v.OWNER_CHECK_721=21]="OWNER_CHECK_721",v[v.OWNER_CHECK_1155=22]="OWNER_CHECK_1155",v[v.SWEEP_ERC721=23]="SWEEP_ERC721",v[v.X2Y2_721=24]="X2Y2_721",v[v.SUDOSWAP=25]="SUDOSWAP",v[v.NFT20=26]="NFT20",v[v.X2Y2_1155=27]="X2Y2_1155",v[v.FOUNDATION=28]="FOUNDATION",v[v.SWEEP_ERC1155=29]="SWEEP_ERC1155",v[v.ELEMENT_MARKET=30]="ELEMENT_MARKET",v[v.SEAPORT_V1_4=32]="SEAPORT_V1_4",v[v.EXECUTE_SUB_PLAN=33]="EXECUTE_SUB_PLAN",v[v.APPROVE_ERC20=34]="APPROVE_ERC20";var A,x=new Set([exports.CommandType.SEAPORT_V1_5,exports.CommandType.SEAPORT_V1_4,exports.CommandType.NFTX,exports.CommandType.LOOKS_RARE_V2,exports.CommandType.X2Y2_721,exports.CommandType.X2Y2_1155,exports.CommandType.FOUNDATION,exports.CommandType.SUDOSWAP,exports.CommandType.NFT20,exports.CommandType.EXECUTE_SUB_PLAN,exports.CommandType.CRYPTOPUNKS,exports.CommandType.ELEMENT_MARKET]),R=((b={})[exports.CommandType.EXECUTE_SUB_PLAN]=["bytes","bytes[]"],b[exports.CommandType.PERMIT2_PERMIT]=["((address token,uint160 amount,uint48 expiration,uint48 nonce) details,address spender,uint256 sigDeadline)","bytes"],b[exports.CommandType.PERMIT2_PERMIT_BATCH]=["((address token,uint160 amount,uint48 expiration,uint48 nonce)[] details,address spender,uint256 sigDeadline)","bytes"],b[exports.CommandType.PERMIT2_TRANSFER_FROM]=["address","address","uint160"],b[exports.CommandType.PERMIT2_TRANSFER_FROM_BATCH]=["(address from,address to,uint160 amount,address token)[]"],b[exports.CommandType.V3_SWAP_EXACT_IN]=["address","uint256","uint256","bytes","bool"],b[exports.CommandType.V3_SWAP_EXACT_OUT]=["address","uint256","uint256","bytes","bool"],b[exports.CommandType.V2_SWAP_EXACT_IN]=["address","uint256","uint256","address[]","bool"],b[exports.CommandType.V2_SWAP_EXACT_OUT]=["address","uint256","uint256","address[]","bool"],b[exports.CommandType.WRAP_ETH]=["address","uint256"],b[exports.CommandType.UNWRAP_WETH]=["address","uint256"],b[exports.CommandType.SWEEP]=["address","address","uint256"],b[exports.CommandType.SWEEP_ERC721]=["address","address","uint256"],b[exports.CommandType.SWEEP_ERC1155]=["address","address","uint256","uint256"],b[exports.CommandType.TRANSFER]=["address","address","uint256"],b[exports.CommandType.PAY_PORTION]=["address","address","uint256"],b[exports.CommandType.BALANCE_CHECK_ERC20]=["address","address","uint256"],b[exports.CommandType.OWNER_CHECK_721]=["address","address","uint256"],b[exports.CommandType.OWNER_CHECK_1155]=["address","address","uint256","uint256"],b[exports.CommandType.APPROVE_ERC20]=["address","uint256"],b[exports.CommandType.SEAPORT_V1_5]=["uint256","bytes"],b[exports.CommandType.SEAPORT_V1_4]=["uint256","bytes"],b[exports.CommandType.NFTX]=["uint256","bytes"],b[exports.CommandType.LOOKS_RARE_V2]=["uint256","bytes"],b[exports.CommandType.X2Y2_721]=["uint256","bytes","address","address","uint256"],b[exports.CommandType.X2Y2_1155]=["uint256","bytes","address","address","uint256","uint256"],b[exports.CommandType.FOUNDATION]=["uint256","bytes","address","address","uint256"],b[exports.CommandType.SUDOSWAP]=["uint256","bytes"],b[exports.CommandType.NFT20]=["uint256","bytes"],b[exports.CommandType.CRYPTOPUNKS]=["uint256","address","uint256"],b[exports.CommandType.ELEMENT_MARKET]=["uint256","bytes"],b),I=function(){function e(){this.commands="0x",this.inputs=[]}var t=e.prototype;return t.addSubPlan=function(e){this.addCommand(exports.CommandType.EXECUTE_SUB_PLAN,[e.commands,e.inputs],!0)},t.addCommand=function(e,t,n){void 0===n&&(n=!1);var a=function(e,t){return{type:e,encodedInput:p.defaultAbiCoder.encode(R[e],t)}}(e,t);if(this.inputs.push(a.encodedInput),n){if(!x.has(a.type))throw new Error("command type: "+a.type+" cannot be allowed to revert");a.type=128|a.type}this.commands=this.commands.concat(a.type.toString(16).padStart(2,"0"))},e}(),S=((A={})[1]={router:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",weth:"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",creationBlock:17143817},A[5]={router:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",weth:"0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6",creationBlock:8940568},A[11155111]={router:"0x1678413030D5f7719e17Ba37e77134268f9b8193",weth:"0xb16F35c0Ae2912430DAc15764477E179D9B9EbEa",creationBlock:3543575},A[137]={router:"0xec7BE89e9d109e7e3Fec59c222CF297125FEFda2",weth:"0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270",creationBlock:52210153},A[80001]={router:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",weth:"0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889",creationBlock:35176052},A[10]={router:"0xCb1355ff08Ab38bBCE60111F1bb2B784bE25D7e8",weth:"0x4200000000000000000000000000000000000006",creationBlock:114702266},A[420]={router:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",weth:"0x4200000000000000000000000000000000000006",creationBlock:8887728},A[42161]={router:"0x5E325eDA8064b456f4781070C0738d849c824258",weth:"0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",creationBlock:169472836},A[421613]={router:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",weth:"0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3",creationBlock:18815277},A[42220]={router:"0x643770e279d5d0733f21d6dc03a8efbabf3255b4",weth:"0x0000000000000000000000000000000000000000",creationBlock:21407637},A[44787]={router:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",weth:"0x0000000000000000000000000000000000000000",creationBlock:17566658},A[56]={router:"0x4Dae2f939ACf50408e13d58534Ff8c2776d45265",weth:"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c",creationBlock:35160263},A[43114]={router:"0x4Dae2f939ACf50408e13d58534Ff8c2776d45265",weth:"0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",creationBlock:40237257},A[84531]={router:"0xd0872d928672ae2ff74bdb2f5130ac12229cafaf",weth:"0x4200000000000000000000000000000000000006",creationBlock:6915289},A[8453]={router:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",weth:"0x4200000000000000000000000000000000000006",creationBlock:9107268},A[81457]={router:"0x643770E279d5D0733F21d6DC03A8efbABf3255B4",weth:"0x4300000000000000000000000000000000000004",creationBlock:1116444},A),M=function(e){if(!(e in S))throw new Error("Universal Router not deployed on chain "+e);if("0x0000000000000000000000000000000000000000"==S[e].weth)throw new Error("Chain "+e+" does not have WETH");return S[e].weth},_=i.BigNumber.from(2).pow(255),k="0x0000000000000000000000000000000000000000",w="0x0000000000000000000000000000000000000000",E="0x0000000000000000000000000000000000000001",P="0x0000000000000000000000000000000000000002",h=new o.Percent(50,100),O=function(){function e(e,t){if(this.trade=e,this.options=t,this.tradeType=exports.RouterTradeType.UniswapTrade,t.fee&&t.flatFee)throw new Error("Only one fee option permitted");this.payerIsUser=!this.inputRequiresWrap&&!this.options.useRouterBalance}var t,n;return e.prototype.encode=function(e,t){var n;this.inputRequiresWrap&&e.addCommand(exports.CommandType.WRAP_ETH,[P,this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString()]),this.options.recipient=null!=(n=this.options.recipient)?n:E;for(var a,r,p=this.trade.outputAmount.currency.isNative,s=this.trade.tradeType===o.TradeType.EXACT_INPUT&&this.trade.routes.length>2||p||!!(a=this.options).fee||!!a.flatFee,d=T(this.trade.swaps);!(r=d()).done;){var m=r.value;switch(m.route.protocol){case u.Protocol.V2:F(e,m,this.trade.tradeType,this.options,this.payerIsUser,s);break;case u.Protocol.V3:N(e,m,this.trade.tradeType,this.options,this.payerIsUser,s);break;case u.Protocol.MIXED:g(e,m,this.trade.tradeType,this.options,this.payerIsUser,s);break;default:throw new Error("UNSUPPORTED_TRADE_PROTOCOL")}}var l=i.BigNumber.from(this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString());if(s){if(this.options.fee){var c=y.toHex(this.options.fee.fee.multiply(1e4).quotient);e.addCommand(exports.CommandType.PAY_PORTION,[this.trade.outputAmount.currency.wrapped.address,this.options.fee.recipient,c]),this.trade.tradeType===o.TradeType.EXACT_OUTPUT&&(l=l.sub(l.mul(c).div(1e4)))}if(this.options.flatFee){var f=this.options.flatFee.amount;if(l.lt(f))throw new Error("Flat fee amount greater than minimumAmountOut");e.addCommand(exports.CommandType.TRANSFER,[this.trade.outputAmount.currency.wrapped.address,this.options.flatFee.recipient,f]),this.trade.tradeType===o.TradeType.EXACT_OUTPUT&&(l=l.sub(f))}p?e.addCommand(exports.CommandType.UNWRAP_WETH,[this.options.recipient,l]):e.addCommand(exports.CommandType.SWEEP,[this.trade.outputAmount.currency.wrapped.address,this.options.recipient,l])}this.inputRequiresWrap&&(this.trade.tradeType===o.TradeType.EXACT_OUTPUT||this.trade.priceImpact.greaterThan(h))&&e.addCommand(exports.CommandType.UNWRAP_WETH,[this.options.recipient,0]),this.options.safeMode&&e.addCommand(exports.CommandType.SWEEP,[k,this.options.recipient,0])},t=e,(n=[{key:"inputRequiresWrap",get:function(){return this.trade.inputAmount.currency.isNative}}])&&function(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function F(e,t,n,a,r,i){var p=t.route,y=new s.Trade(p,n==o.TradeType.EXACT_INPUT?t.inputAmount:t.outputAmount,n);n==o.TradeType.EXACT_INPUT?e.addCommand(exports.CommandType.V2_SWAP_EXACT_IN,[i?P:a.recipient,y.maximumAmountIn(a.slippageTolerance).quotient.toString(),y.minimumAmountOut(a.slippageTolerance).quotient.toString(),p.path.map((function(e){return e.address})),r]):n==o.TradeType.EXACT_OUTPUT&&e.addCommand(exports.CommandType.V2_SWAP_EXACT_OUT,[i?P:a.recipient,y.minimumAmountOut(a.slippageTolerance).quotient.toString(),y.maximumAmountIn(a.slippageTolerance).quotient.toString(),p.path.map((function(e){return e.address})),r])}function N(e,t,n,a,r,i){var p=t.route,s=y.Trade.createUncheckedTrade({route:p,inputAmount:t.inputAmount,outputAmount:t.outputAmount,tradeType:n}),u=y.encodeRouteToPath(p,s.tradeType===o.TradeType.EXACT_OUTPUT);n==o.TradeType.EXACT_INPUT?e.addCommand(exports.CommandType.V3_SWAP_EXACT_IN,[i?P:a.recipient,s.maximumAmountIn(a.slippageTolerance).quotient.toString(),s.minimumAmountOut(a.slippageTolerance).quotient.toString(),u,r]):n==o.TradeType.EXACT_OUTPUT&&e.addCommand(exports.CommandType.V3_SWAP_EXACT_OUT,[i?P:a.recipient,s.minimumAmountOut(a.slippageTolerance).quotient.toString(),s.maximumAmountIn(a.slippageTolerance).quotient.toString(),u,r])}function g(e,t,n,a,r,i){var p=t.route,o=t.inputAmount,d=t.outputAmount,m=i?P:a.recipient;if(1===p.pools.length){if(p.pools[0]instanceof y.Pool)return N(e,t,n,a,r,i);if(p.pools[0]instanceof s.Pair)return F(e,t,n,a,r,i);throw new Error("Invalid route type")}for(var l,T=u.MixedRouteTrade.createUncheckedTrade({route:p,inputAmount:o,outputAmount:d,tradeType:n}),c=T.maximumAmountIn(a.slippageTolerance,o).quotient.toString(),f=T.minimumAmountOut(a.slippageTolerance,d).quotient.toString(),b=u.partitionMixedRouteByProtocol(p),v=function(e){return e===b.length-1},C=p.input.wrapped,A=0;A<b.length;A++){var x=b[A];l=u.getOutputOfPools(x,C);var R=new u.MixedRouteSDK([].concat(x),x[0].token0.equals(C)?x[0].token0:x[0].token1,l),I=new u.MixedRoute(R);if(C=l,function(e){return e.pools.every((function(e){return e instanceof y.Pool}))}(I)){var S=u.encodeMixedRouteToPath(I);e.addCommand(exports.CommandType.V3_SWAP_EXACT_IN,[v(A)?m:b[A+1][0].liquidityToken.address,0==A?c:_,v(A)?f:0,S,r&&0===A])}else e.addCommand(exports.CommandType.V2_SWAP_EXACT_IN,[v(A)?m:P,0===A?c:_,v(A)?f:0,I.path.map((function(e){return e.address})),r&&0===A])}}function B(e,t){var n=t.signature,a=i.ethers.utils.arrayify(t.signature).length;65!==a&&64!==a||(n=i.ethers.utils.joinSignature(i.ethers.utils.splitSignature(t.signature))),e.addCommand(exports.CommandType.PERMIT2_PERMIT,[t,n])}function V(e,t){t.approval&&t.permit2Permit&&t.approval.token!==t.permit2Permit.details.token&&n(!1),t.approval&&t.permit2TransferFrom&&t.approval.token!==t.permit2TransferFrom.token&&n(!1),t.permit2TransferFrom&&t.permit2Permit&&t.permit2TransferFrom.token!==t.permit2Permit.details.token&&n(!1),t.approval&&e.addCommand(exports.CommandType.APPROVE_ERC20,[t.approval.token,L(t.approval.protocol)]),t.permit2Permit&&B(e,t.permit2Permit),t.permit2TransferFrom&&e.addCommand(exports.CommandType.PERMIT2_TRANSFER_FROM,[t.permit2TransferFrom.token,t.permit2TransferFrom.recipient?t.permit2TransferFrom.recipient:P,t.permit2TransferFrom.amount])}function L(e){switch(e.toLowerCase()){case"0x00000000000000adc04c56bf30ac9d3c0aaf14dc":case"0x00000000000001ad428e4906ae43d8f9852d0dd6":return 0;case"0x2b2e8cda09bba9660dca5cb6233787738ad68329":return 1;default:throw new Error("unsupported protocol address")}}var D=function(){function e(){}return e.swapCallParameters=function(t,a){void 0===a&&(a={}),Array.isArray(t)||(t=[t]);for(var r,p=t.filter((function(e,t,n){return e.hasOwnProperty("market")})),s=1!=p.length||1!=p[0].orders.length,y=new I,u=i.BigNumber.from(0),o=i.BigNumber.from(0),d=new Set,m=T(t);!(r=m()).done;){var l=r.value;if(l.tradeType==exports.RouterTradeType.NFTTrade){var c=l;c.encode(y,{allowRevert:s});var f=c.getTotalPrice();c.market==exports.Market.Seaport?c.getInputTokens().forEach((function(e){d.add(e)})):d.add(k),u.lt(f)?(o=o.add(f.sub(u)),u=i.BigNumber.from(0)):u=u.sub(f)}else if(l.tradeType==exports.RouterTradeType.UniswapTrade){var b=l,v=b.trade.inputAmount.currency.isNative,C=b.trade.outputAmount.currency.isNative,A=b.options;v&&A.inputTokenPermit&&n(!1),A.inputTokenPermit&&B(y,A.inputTokenPermit),v&&(o=o.add(i.BigNumber.from(b.trade.maximumAmountIn(A.slippageTolerance).quotient.toString()))),C&&A.recipient==P&&(u=u.add(i.BigNumber.from(b.trade.minimumAmountOut(A.slippageTolerance).quotient.toString()))),b.encode(y,{allowRevert:!1})}else{if(l.tradeType!=exports.RouterTradeType.UnwrapWETH)throw"trade must be of instance: UniswapTrade or NFTTrade";var x=l;l.encode(y,{allowRevert:!1}),u=u.add(x.amount)}}return d.forEach((function(e){y.addCommand(exports.CommandType.SWEEP,[e,E,0])})),e.encodePlan(y,o,a)},e.swapNFTCallParameters=function(t,n){void 0===n&&(n={});for(var a,r=new I,p=i.BigNumber.from(0),s=1!=t.length||1!=t[0].orders.length,y=T(t);!(a=y()).done;){var u=a.value;u.encode(r,{allowRevert:s}),p=p.add(u.getTotalPrice())}return r.addCommand(exports.CommandType.SWEEP,[k,E,0]),e.encodePlan(r,p,n)},e.swapERC20CallParameters=function(t,a){var r=new I,p=new O(t,a),s=p.trade.inputAmount.currency;s.isNative&&a.inputTokenPermit&&n(!1),a.inputTokenPermit&&B(r,a.inputTokenPermit);var y=i.BigNumber.from(s.isNative?p.trade.maximumAmountIn(a.slippageTolerance).quotient.toString():0);return p.encode(r,{allowRevert:!1}),e.encodePlan(r,y,{deadline:a.deadlineOrPreviousBlockhash?i.BigNumber.from(a.deadlineOrPreviousBlockhash):void 0})},e.encodePlan=function(t,n,a){void 0===a&&(a={});var r=t.commands,i=t.inputs;return{calldata:e.INTERFACE.encodeFunctionData(a.deadline?"execute(bytes,bytes[],uint256)":"execute(bytes,bytes[])",a.deadline?[r,i,a.deadline]:[r,i]),value:n.toHexString()}},e}();D.INTERFACE=new r.Interface(a.abi);var U=function(e){function t(t){return e.call(this,exports.Market.Cryptopunks,t)||this}m(t,e);var n=t.prototype;return n.encode=function(e,t){for(var n,a=T(this.orders);!(n=a()).done;){var r=n.value;e.addCommand(exports.CommandType.CRYPTOPUNKS,[r.tokenId,r.recipient,r.value],t.allowRevert)}},n.getBuyItems=function(){for(var e,n=[],a=T(this.orders);!(e=a()).done;)n.push({tokenAddress:t.CRYPTOPUNK_ADDRESS,tokenId:e.value.tokenId,tokenType:exports.TokenType.Cryptopunk});return n},n.getTotalPrice=function(){for(var e,t=i.BigNumber.from(0),n=T(this.orders);!(e=n()).done;)t=t.add(e.value.value);return t},t}(C);U.CRYPTOPUNK_ADDRESS="0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb";var H=[{inputs:[{internalType:"address payable",name:"treasury",type:"address"},{internalType:"address",name:"feth",type:"address"},{internalType:"address",name:"royaltyRegistry",type:"address"},{internalType:"uint256",name:"duration",type:"uint256"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[],name:"FoundationTreasuryNode_Address_Is_Not_A_Contract",type:"error"},{inputs:[],name:"FoundationTreasuryNode_Caller_Not_Admin",type:"error"},{inputs:[{internalType:"uint256",name:"buyPrice",type:"uint256"}],name:"NFTMarketBuyPrice_Cannot_Buy_At_Lower_Price",type:"error"},{inputs:[],name:"NFTMarketBuyPrice_Cannot_Buy_Unset_Price",type:"error"},{inputs:[],name:"NFTMarketBuyPrice_Cannot_Cancel_Unset_Price",type:"error"},{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"NFTMarketBuyPrice_Only_Owner_Can_Cancel_Price",type:"error"},{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"NFTMarketBuyPrice_Only_Owner_Can_Set_Price",type:"error"},{inputs:[],name:"NFTMarketBuyPrice_Price_Already_Set",type:"error"},{inputs:[],name:"NFTMarketBuyPrice_Price_Too_High",type:"error"},{inputs:[{internalType:"address",name:"seller",type:"address"}],name:"NFTMarketBuyPrice_Seller_Mismatch",type:"error"},{inputs:[],name:"NFTMarketCore_FETH_Address_Is_Not_A_Contract",type:"error"},{inputs:[],name:"NFTMarketCore_Only_FETH_Can_Transfer_ETH",type:"error"},{inputs:[],name:"NFTMarketCore_Seller_Not_Found",type:"error"},{inputs:[],name:"NFTMarketFees_Address_Does_Not_Support_IRoyaltyRegistry",type:"error"},{inputs:[],name:"NFTMarketOffer_Cannot_Be_Made_While_In_Auction",type:"error"},{inputs:[{internalType:"uint256",name:"currentOfferAmount",type:"uint256"}],name:"NFTMarketOffer_Offer_Below_Min_Amount",type:"error"},{inputs:[{internalType:"uint256",name:"expiry",type:"uint256"}],name:"NFTMarketOffer_Offer_Expired",type:"error"},{inputs:[{internalType:"address",name:"currentOfferFrom",type:"address"}],name:"NFTMarketOffer_Offer_From_Does_Not_Match",type:"error"},{inputs:[{internalType:"uint256",name:"minOfferAmount",type:"uint256"}],name:"NFTMarketOffer_Offer_Must_Be_At_Least_Min_Amount",type:"error"},{inputs:[],name:"NFTMarketOffer_Provided_Contract_And_TokenId_Count_Must_Match",type:"error"},{inputs:[],name:"NFTMarketOffer_Reason_Required",type:"error"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],name:"NFTMarketReserveAuction_Already_Listed",type:"error"},{inputs:[{internalType:"uint256",name:"minAmount",type:"uint256"}],name:"NFTMarketReserveAuction_Bid_Must_Be_At_Least_Min_Amount",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Cannot_Admin_Cancel_Without_Reason",type:"error"},{inputs:[{internalType:"uint256",name:"reservePrice",type:"uint256"}],name:"NFTMarketReserveAuction_Cannot_Bid_Lower_Than_Reserve_Price",type:"error"},{inputs:[{internalType:"uint256",name:"endTime",type:"uint256"}],name:"NFTMarketReserveAuction_Cannot_Bid_On_Ended_Auction",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Cannot_Bid_On_Nonexistent_Auction",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Cannot_Cancel_Nonexistent_Auction",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Cannot_Finalize_Already_Settled_Auction",type:"error"},{inputs:[{internalType:"uint256",name:"endTime",type:"uint256"}],name:"NFTMarketReserveAuction_Cannot_Finalize_Auction_In_Progress",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Cannot_Rebid_Over_Outstanding_Bid",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Cannot_Update_Auction_In_Progress",type:"error"},{inputs:[{internalType:"uint256",name:"maxDuration",type:"uint256"}],name:"NFTMarketReserveAuction_Exceeds_Max_Duration",type:"error"},{inputs:[{internalType:"uint256",name:"extensionDuration",type:"uint256"}],name:"NFTMarketReserveAuction_Less_Than_Extension_Duration",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Must_Set_Non_Zero_Reserve_Price",type:"error"},{inputs:[{internalType:"address",name:"seller",type:"address"}],name:"NFTMarketReserveAuction_Not_Matching_Seller",type:"error"},{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"NFTMarketReserveAuction_Only_Owner_Can_Update_Auction",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Price_Already_Set",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Too_Much_Value_Provided",type:"error"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!0,internalType:"address",name:"seller",type:"address"},{indexed:!1,internalType:"address",name:"buyer",type:"address"},{indexed:!1,internalType:"uint256",name:"protocolFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"creatorFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"sellerRev",type:"uint256"}],name:"BuyPriceAccepted",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"}],name:"BuyPriceCanceled",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"}],name:"BuyPriceInvalidated",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!0,internalType:"address",name:"seller",type:"address"},{indexed:!1,internalType:"uint256",name:"price",type:"uint256"}],name:"BuyPriceSet",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!1,internalType:"address",name:"buyReferrer",type:"address"},{indexed:!1,internalType:"uint256",name:"buyReferrerProtocolFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"buyReferrerSellerFee",type:"uint256"}],name:"BuyReferralPaid",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!0,internalType:"address",name:"buyer",type:"address"},{indexed:!1,internalType:"address",name:"seller",type:"address"},{indexed:!1,internalType:"uint256",name:"protocolFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"creatorFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"sellerRev",type:"uint256"}],name:"OfferAccepted",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!1,internalType:"string",name:"reason",type:"string"}],name:"OfferCanceledByAdmin",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"}],name:"OfferInvalidated",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!0,internalType:"address",name:"buyer",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"expiration",type:"uint256"}],name:"OfferMade",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"auctionId",type:"uint256"},{indexed:!0,internalType:"address",name:"bidder",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"endTime",type:"uint256"}],name:"ReserveAuctionBidPlaced",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"auctionId",type:"uint256"}],name:"ReserveAuctionCanceled",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"auctionId",type:"uint256"},{indexed:!1,internalType:"string",name:"reason",type:"string"}],name:"ReserveAuctionCanceledByAdmin",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"seller",type:"address"},{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"duration",type:"uint256"},{indexed:!1,internalType:"uint256",name:"extensionDuration",type:"uint256"},{indexed:!1,internalType:"uint256",name:"reservePrice",type:"uint256"},{indexed:!1,internalType:"uint256",name:"auctionId",type:"uint256"}],name:"ReserveAuctionCreated",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"auctionId",type:"uint256"},{indexed:!0,internalType:"address",name:"seller",type:"address"},{indexed:!0,internalType:"address",name:"bidder",type:"address"},{indexed:!1,internalType:"uint256",name:"protocolFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"creatorFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"sellerRev",type:"uint256"}],name:"ReserveAuctionFinalized",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"auctionId",type:"uint256"}],name:"ReserveAuctionInvalidated",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"auctionId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"reservePrice",type:"uint256"}],name:"ReserveAuctionUpdated",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"WithdrawalToFETH",type:"event"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"address",name:"offerFrom",type:"address"},{internalType:"uint256",name:"minAmount",type:"uint256"}],name:"acceptOffer",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address[]",name:"nftContracts",type:"address[]"},{internalType:"uint256[]",name:"tokenIds",type:"uint256[]"},{internalType:"string",name:"reason",type:"string"}],name:"adminCancelOffers",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"},{internalType:"string",name:"reason",type:"string"}],name:"adminCancelReserveAuction",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint256",name:"maxPrice",type:"uint256"}],name:"buy",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint256",name:"maxPrice",type:"uint256"},{internalType:"address payable",name:"referrer",type:"address"}],name:"buyV2",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"cancelBuyPrice",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],name:"cancelReserveAuction",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint256",name:"reservePrice",type:"uint256"}],name:"createReserveAuction",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],name:"finalizeReserveAuction",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getBuyPrice",outputs:[{internalType:"address",name:"seller",type:"address"},{internalType:"uint256",name:"price",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"}],name:"getFeesAndRecipients",outputs:[{internalType:"uint256",name:"protocolFee",type:"uint256"},{internalType:"uint256",name:"creatorRev",type:"uint256"},{internalType:"address payable[]",name:"creatorRecipients",type:"address[]"},{internalType:"uint256[]",name:"creatorShares",type:"uint256[]"},{internalType:"uint256",name:"sellerRev",type:"uint256"},{internalType:"address payable",name:"owner",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"getFethAddress",outputs:[{internalType:"address",name:"fethAddress",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"getFoundationTreasury",outputs:[{internalType:"address payable",name:"treasuryAddress",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getImmutableRoyalties",outputs:[{internalType:"address payable[]",name:"recipients",type:"address[]"},{internalType:"uint256[]",name:"splitPerRecipientInBasisPoints",type:"uint256[]"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],name:"getMinBidAmount",outputs:[{internalType:"uint256",name:"minimum",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getMinOfferAmount",outputs:[{internalType:"uint256",name:"minimum",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"address payable",name:"creator",type:"address"}],name:"getMutableRoyalties",outputs:[{internalType:"address payable[]",name:"recipients",type:"address[]"},{internalType:"uint256[]",name:"splitPerRecipientInBasisPoints",type:"uint256[]"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getOffer",outputs:[{internalType:"address",name:"buyer",type:"address"},{internalType:"uint256",name:"expiration",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getOfferReferrer",outputs:[{internalType:"address payable",name:"referrer",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],name:"getReserveAuction",outputs:[{components:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"address payable",name:"seller",type:"address"},{internalType:"uint256",name:"duration",type:"uint256"},{internalType:"uint256",name:"extensionDuration",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"address payable",name:"bidder",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],internalType:"struct NFTMarketReserveAuction.ReserveAuction",name:"auction",type:"tuple"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],name:"getReserveAuctionBidReferrer",outputs:[{internalType:"address payable",name:"referrer",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getReserveAuctionIdFor",outputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getRoyaltyRegistry",outputs:[{internalType:"address",name:"registry",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getTokenCreator",outputs:[{internalType:"address payable",name:"creator",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"makeOffer",outputs:[{internalType:"uint256",name:"expiration",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"referrer",type:"address"}],name:"makeOfferV2",outputs:[{internalType:"uint256",name:"expiration",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],name:"placeBid",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"referrer",type:"address"}],name:"placeBidV2",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"}],name:"setBuyPrice",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"},{internalType:"uint256",name:"reservePrice",type:"uint256"}],name:"updateReserveAuction",outputs:[],stateMutability:"nonpayable",type:"function"},{stateMutability:"payable",type:"receive"}],W=function(e){function t(t){return e.call(this,exports.Market.Foundation,t)||this}m(t,e);var n=t.prototype;return n.encode=function(e,n){for(var a,r=T(this.orders);!(a=r()).done;){var i=a.value,p=t.INTERFACE.encodeFunctionData("buyV2",[i.tokenAddress,i.tokenId,i.price,i.referrer]);e.addCommand(exports.CommandType.FOUNDATION,[i.price,p,i.recipient,i.tokenAddress,i.tokenId],n.allowRevert)}},n.getBuyItems=function(){for(var e,t=[],n=T(this.orders);!(e=n()).done;){var a=e.value;t.push({tokenAddress:a.tokenAddress,tokenId:a.tokenId,tokenType:exports.TokenType.ERC721})}return t},n.getTotalPrice=function(){for(var e,t=i.BigNumber.from(0),n=T(this.orders);!(e=n()).done;)t=t.add(e.value.price);return t},t}(C);W.INTERFACE=new r.Interface(H);var X=[{inputs:[{internalType:"address",name:"_owner",type:"address"},{internalType:"address",name:"_protocolFeeRecipient",type:"address"},{internalType:"address",name:"_transferManager",type:"address"},{internalType:"address",name:"_weth",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[],name:"CallerInvalid",type:"error"},{inputs:[],name:"ChainIdInvalid",type:"error"},{inputs:[],name:"CreatorFeeBpTooHigh",type:"error"},{inputs:[],name:"CurrencyInvalid",type:"error"},{inputs:[],name:"ERC20TransferFromFail",type:"error"},{inputs:[],name:"LengthsInvalid",type:"error"},{inputs:[],name:"MerkleProofInvalid",type:"error"},{inputs:[{internalType:"uint256",name:"length",type:"uint256"}],name:"MerkleProofTooLarge",type:"error"},{inputs:[],name:"NewGasLimitETHTransferTooLow",type:"error"},{inputs:[],name:"NewProtocolFeeRecipientCannotBeNullAddress",type:"error"},{inputs:[],name:"NoOngoingTransferInProgress",type:"error"},{inputs:[],name:"NoSelectorForStrategy",type:"error"},{inputs:[],name:"NoncesInvalid",type:"error"},{inputs:[],name:"NotAContract",type:"error"},{inputs:[],name:"NotAffiliateController",type:"error"},{inputs:[],name:"NotOwner",type:"error"},{inputs:[],name:"NotV2Strategy",type:"error"},{inputs:[],name:"NullSignerAddress",type:"error"},{inputs:[],name:"OutsideOfTimeRange",type:"error"},{inputs:[],name:"PercentageTooHigh",type:"error"},{inputs:[],name:"QuoteTypeInvalid",type:"error"},{inputs:[],name:"ReentrancyFail",type:"error"},{inputs:[],name:"RenouncementNotInProgress",type:"error"},{inputs:[],name:"SameDomainSeparator",type:"error"},{inputs:[],name:"SignatureEOAInvalid",type:"error"},{inputs:[],name:"SignatureERC1271Invalid",type:"error"},{inputs:[{internalType:"uint256",name:"length",type:"uint256"}],name:"SignatureLengthInvalid",type:"error"},{inputs:[],name:"SignatureParameterSInvalid",type:"error"},{inputs:[{internalType:"uint8",name:"v",type:"uint8"}],name:"SignatureParameterVInvalid",type:"error"},{inputs:[],name:"StrategyHasNoSelector",type:"error"},{inputs:[{internalType:"uint256",name:"strategyId",type:"uint256"}],name:"StrategyNotAvailable",type:"error"},{inputs:[],name:"StrategyNotUsed",type:"error"},{inputs:[],name:"StrategyProtocolFeeTooHigh",type:"error"},{inputs:[],name:"TransferAlreadyInProgress",type:"error"},{inputs:[],name:"TransferNotInProgress",type:"error"},{inputs:[],name:"WrongPotentialOwner",type:"error"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"affiliate",type:"address"},{indexed:!1,internalType:"address",name:"currency",type:"address"},{indexed:!1,internalType:"uint256",name:"affiliateFee",type:"uint256"}],name:"AffiliatePayment",type:"event"},{anonymous:!1,inputs:[],name:"CancelOwnershipTransfer",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"currency",type:"address"},{indexed:!1,internalType:"bool",name:"isAllowed",type:"bool"}],name:"CurrencyStatusUpdated",type:"event"},{anonymous:!1,inputs:[],name:"InitiateOwnershipRenouncement",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"previousOwner",type:"address"},{indexed:!1,internalType:"address",name:"potentialOwner",type:"address"}],name:"InitiateOwnershipTransfer",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"affiliateController",type:"address"}],name:"NewAffiliateController",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"bool",name:"isActive",type:"bool"}],name:"NewAffiliateProgramStatus",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"affiliate",type:"address"},{indexed:!1,internalType:"uint256",name:"rate",type:"uint256"}],name:"NewAffiliateRate",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256",name:"bidNonce",type:"uint256"},{indexed:!1,internalType:"uint256",name:"askNonce",type:"uint256"}],name:"NewBidAskNonces",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"creatorFeeManager",type:"address"}],name:"NewCreatorFeeManager",type:"event"},{anonymous:!1,inputs:[],name:"NewDomainSeparator",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"gasLimitETHTransfer",type:"uint256"}],name:"NewGasLimitETHTransfer",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"maxCreatorFeeBp",type:"uint256"}],name:"NewMaxCreatorFeeBp",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"newOwner",type:"address"}],name:"NewOwner",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"protocolFeeRecipient",type:"address"}],name:"NewProtocolFeeRecipient",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"strategyId",type:"uint256"},{indexed:!1,internalType:"uint16",name:"standardProtocolFeeBp",type:"uint16"},{indexed:!1,internalType:"uint16",name:"minTotalFeeBp",type:"uint16"},{indexed:!1,internalType:"uint16",name:"maxProtocolFeeBp",type:"uint16"},{indexed:!1,internalType:"bytes4",name:"selector",type:"bytes4"},{indexed:!1,internalType:"bool",name:"isMakerBid",type:"bool"},{indexed:!1,internalType:"address",name:"implementation",type:"address"}],name:"NewStrategy",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256[]",name:"orderNonces",type:"uint256[]"}],name:"OrderNoncesCancelled",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"strategyId",type:"uint256"},{indexed:!1,internalType:"bool",name:"isActive",type:"bool"},{indexed:!1,internalType:"uint16",name:"standardProtocolFeeBp",type:"uint16"},{indexed:!1,internalType:"uint16",name:"minTotalFeeBp",type:"uint16"}],name:"StrategyUpdated",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256[]",name:"subsetNonces",type:"uint256[]"}],name:"SubsetNoncesCancelled",type:"event"},{anonymous:!1,inputs:[{components:[{internalType:"bytes32",name:"orderHash",type:"bytes32"},{internalType:"uint256",name:"orderNonce",type:"uint256"},{internalType:"bool",name:"isNonceInvalidated",type:"bool"}],indexed:!1,internalType:"struct ILooksRareProtocol.NonceInvalidationParameters",name:"nonceInvalidationParameters",type:"tuple"},{indexed:!1,internalType:"address",name:"askUser",type:"address"},{indexed:!1,internalType:"address",name:"bidUser",type:"address"},{indexed:!1,internalType:"uint256",name:"strategyId",type:"uint256"},{indexed:!1,internalType:"address",name:"currency",type:"address"},{indexed:!1,internalType:"address",name:"collection",type:"address"},{indexed:!1,internalType:"uint256[]",name:"itemIds",type:"uint256[]"},{indexed:!1,internalType:"uint256[]",name:"amounts",type:"uint256[]"},{indexed:!1,internalType:"address[2]",name:"feeRecipients",type:"address[2]"},{indexed:!1,internalType:"uint256[3]",name:"feeAmounts",type:"uint256[3]"}],name:"TakerAsk",type:"event"},{anonymous:!1,inputs:[{components:[{internalType:"bytes32",name:"orderHash",type:"bytes32"},{internalType:"uint256",name:"orderNonce",type:"uint256"},{internalType:"bool",name:"isNonceInvalidated",type:"bool"}],indexed:!1,internalType:"struct ILooksRareProtocol.NonceInvalidationParameters",name:"nonceInvalidationParameters",type:"tuple"},{indexed:!1,internalType:"address",name:"bidUser",type:"address"},{indexed:!1,internalType:"address",name:"bidRecipient",type:"address"},{indexed:!1,internalType:"uint256",name:"strategyId",type:"uint256"},{indexed:!1,internalType:"address",name:"currency",type:"address"},{indexed:!1,internalType:"address",name:"collection",type:"address"},{indexed:!1,internalType:"uint256[]",name:"itemIds",type:"uint256[]"},{indexed:!1,internalType:"uint256[]",name:"amounts",type:"uint256[]"},{indexed:!1,internalType:"address[2]",name:"feeRecipients",type:"address[2]"},{indexed:!1,internalType:"uint256[3]",name:"feeAmounts",type:"uint256[3]"}],name:"TakerBid",type:"event"},{inputs:[],name:"MAGIC_VALUE_ORDER_NONCE_EXECUTED",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[],name:"WETH",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint16",name:"standardProtocolFeeBp",type:"uint16"},{internalType:"uint16",name:"minTotalFeeBp",type:"uint16"},{internalType:"uint16",name:"maxProtocolFeeBp",type:"uint16"},{internalType:"bytes4",name:"selector",type:"bytes4"},{internalType:"bool",name:"isMakerBid",type:"bool"},{internalType:"address",name:"implementation",type:"address"}],name:"addStrategy",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"affiliateController",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"affiliateRates",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256[]",name:"orderNonces",type:"uint256[]"}],name:"cancelOrderNonces",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"cancelOwnershipTransfer",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256[]",name:"subsetNonces",type:"uint256[]"}],name:"cancelSubsetNonces",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"chainId",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"confirmOwnershipRenouncement",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"confirmOwnershipTransfer",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"creatorFeeManager",outputs:[{internalType:"contract ICreatorFeeManager",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"domainSeparator",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"address",name:"recipient",type:"address"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Taker[]",name:"takerBids",type:"tuple[]"},{components:[{internalType:"enum QuoteType",name:"quoteType",type:"uint8"},{internalType:"uint256",name:"globalNonce",type:"uint256"},{internalType:"uint256",name:"subsetNonce",type:"uint256"},{internalType:"uint256",name:"orderNonce",type:"uint256"},{internalType:"uint256",name:"strategyId",type:"uint256"},{internalType:"enum CollectionType",name:"collectionType",type:"uint8"},{internalType:"address",name:"collection",type:"address"},{internalType:"address",name:"currency",type:"address"},{internalType:"address",name:"signer",type:"address"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"uint256[]",name:"itemIds",type:"uint256[]"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Maker[]",name:"makerAsks",type:"tuple[]"},{internalType:"bytes[]",name:"makerSignatures",type:"bytes[]"},{components:[{internalType:"bytes32",name:"root",type:"bytes32"},{components:[{internalType:"bytes32",name:"value",type:"bytes32"},{internalType:"enum OrderStructs.MerkleTreeNodePosition",name:"position",type:"uint8"}],internalType:"struct OrderStructs.MerkleTreeNode[]",name:"proof",type:"tuple[]"}],internalType:"struct OrderStructs.MerkleTree[]",name:"merkleTrees",type:"tuple[]"},{internalType:"address",name:"affiliate",type:"address"},{internalType:"bool",name:"isAtomic",type:"bool"}],name:"executeMultipleTakerBids",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{components:[{internalType:"address",name:"recipient",type:"address"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Taker",name:"takerAsk",type:"tuple"},{components:[{internalType:"enum QuoteType",name:"quoteType",type:"uint8"},{internalType:"uint256",name:"globalNonce",type:"uint256"},{internalType:"uint256",name:"subsetNonce",type:"uint256"},{internalType:"uint256",name:"orderNonce",type:"uint256"},{internalType:"uint256",name:"strategyId",type:"uint256"},{internalType:"enum CollectionType",name:"collectionType",type:"uint8"},{internalType:"address",name:"collection",type:"address"},{internalType:"address",name:"currency",type:"address"},{internalType:"address",name:"signer",type:"address"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"uint256[]",name:"itemIds",type:"uint256[]"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Maker",name:"makerBid",type:"tuple"},{internalType:"bytes",name:"makerSignature",type:"bytes"},{components:[{internalType:"bytes32",name:"root",type:"bytes32"},{components:[{internalType:"bytes32",name:"value",type:"bytes32"},{internalType:"enum OrderStructs.MerkleTreeNodePosition",name:"position",type:"uint8"}],internalType:"struct OrderStructs.MerkleTreeNode[]",name:"proof",type:"tuple[]"}],internalType:"struct OrderStructs.MerkleTree",name:"merkleTree",type:"tuple"},{internalType:"address",name:"affiliate",type:"address"}],name:"executeTakerAsk",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"address",name:"recipient",type:"address"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Taker",name:"takerBid",type:"tuple"},{components:[{internalType:"enum QuoteType",name:"quoteType",type:"uint8"},{internalType:"uint256",name:"globalNonce",type:"uint256"},{internalType:"uint256",name:"subsetNonce",type:"uint256"},{internalType:"uint256",name:"orderNonce",type:"uint256"},{internalType:"uint256",name:"strategyId",type:"uint256"},{internalType:"enum CollectionType",name:"collectionType",type:"uint8"},{internalType:"address",name:"collection",type:"address"},{internalType:"address",name:"currency",type:"address"},{internalType:"address",name:"signer",type:"address"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"uint256[]",name:"itemIds",type:"uint256[]"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Maker",name:"makerAsk",type:"tuple"},{internalType:"bytes",name:"makerSignature",type:"bytes"},{components:[{internalType:"bytes32",name:"root",type:"bytes32"},{components:[{internalType:"bytes32",name:"value",type:"bytes32"},{internalType:"enum OrderStructs.MerkleTreeNodePosition",name:"position",type:"uint8"}],internalType:"struct OrderStructs.MerkleTreeNode[]",name:"proof",type:"tuple[]"}],internalType:"struct OrderStructs.MerkleTree",name:"merkleTree",type:"tuple"},{internalType:"address",name:"affiliate",type:"address"}],name:"executeTakerBid",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"bytes32",name:"root",type:"bytes32"},{internalType:"uint256",name:"proofLength",type:"uint256"}],name:"hashBatchOrder",outputs:[{internalType:"bytes32",name:"batchOrderHash",type:"bytes32"}],stateMutability:"pure",type:"function"},{inputs:[{internalType:"bool",name:"bid",type:"bool"},{internalType:"bool",name:"ask",type:"bool"}],name:"incrementBidAskNonces",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"initiateOwnershipRenouncement",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"newPotentialOwner",type:"address"}],name:"initiateOwnershipTransfer",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"isAffiliateProgramActive",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"isCurrencyAllowed",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"maxCreatorFeeBp",outputs:[{internalType:"uint16",name:"",type:"uint16"}],stateMutability:"view",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"ownershipStatus",outputs:[{internalType:"enum IOwnableTwoSteps.Status",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"potentialOwner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"protocolFeeRecipient",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"address",name:"recipient",type:"address"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Taker",name:"takerBid",type:"tuple"},{components:[{internalType:"enum QuoteType",name:"quoteType",type:"uint8"},{internalType:"uint256",name:"globalNonce",type:"uint256"},{internalType:"uint256",name:"subsetNonce",type:"uint256"},{internalType:"uint256",name:"orderNonce",type:"uint256"},{internalType:"uint256",name:"strategyId",type:"uint256"},{internalType:"enum CollectionType",name:"collectionType",type:"uint8"},{internalType:"address",name:"collection",type:"address"},{internalType:"address",name:"currency",type:"address"},{internalType:"address",name:"signer",type:"address"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"uint256[]",name:"itemIds",type:"uint256[]"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Maker",name:"makerAsk",type:"tuple"},{internalType:"address",name:"sender",type:"address"},{internalType:"bytes32",name:"orderHash",type:"bytes32"}],name:"restrictedExecuteTakerBid",outputs:[{internalType:"uint256",name:"protocolFeeAmount",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"strategyInfo",outputs:[{internalType:"bool",name:"isActive",type:"bool"},{internalType:"uint16",name:"standardProtocolFeeBp",type:"uint16"},{internalType:"uint16",name:"minTotalFeeBp",type:"uint16"},{internalType:"uint16",name:"maxProtocolFeeBp",type:"uint16"},{internalType:"bytes4",name:"selector",type:"bytes4"},{internalType:"bool",name:"isMakerBid",type:"bool"},{internalType:"address",name:"implementation",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"transferManager",outputs:[{internalType:"contract TransferManager",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"newAffiliateController",type:"address"}],name:"updateAffiliateController",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bool",name:"isActive",type:"bool"}],name:"updateAffiliateProgramStatus",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"affiliate",type:"address"},{internalType:"uint256",name:"bp",type:"uint256"}],name:"updateAffiliateRate",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"newCreatorFeeManager",type:"address"}],name:"updateCreatorFeeManager",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"currency",type:"address"},{internalType:"bool",name:"isAllowed",type:"bool"}],name:"updateCurrencyStatus",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"updateDomainSeparator",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"newGasLimitETHTransfer",type:"uint256"}],name:"updateETHGasLimitForTransfer",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint16",name:"newMaxCreatorFeeBp",type:"uint16"}],name:"updateMaxCreatorFeeBp",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"newProtocolFeeRecipient",type:"address"}],name:"updateProtocolFeeRecipient",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"strategyId",type:"uint256"},{internalType:"bool",name:"isActive",type:"bool"},{internalType:"uint16",name:"newStandardProtocolFee",type:"uint16"},{internalType:"uint16",name:"newMinTotalFee",type:"uint16"}],name:"updateStrategy",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"userBidAskNonces",outputs:[{internalType:"uint256",name:"bidNonce",type:"uint256"},{internalType:"uint256",name:"askNonce",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"}],name:"userOrderNonce",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"}],name:"userSubsetNonce",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"}],K=function(e){function t(t){return e.call(this,exports.Market.LooksRareV2,t)||this}m(t,e);var n=t.prototype;return n.encode=function(e,n){var a,r=this.refactorAPIData(this.orders),i=r.takerBids,p=r.makerOrders,s=r.makerSignatures,y=r.totalValue,u=r.merkleTrees;a=1==this.orders.length?t.INTERFACE.encodeFunctionData("executeTakerBid",[i[0],p[0],s[0],u[0],w]):t.INTERFACE.encodeFunctionData("executeMultipleTakerBids",[i,p,s,u,w,!1]),e.addCommand(exports.CommandType.LOOKS_RARE_V2,[y,a],n.allowRevert)},n.getBuyItems=function(){for(var e,n=[],a=T(this.orders);!(e=a()).done;)for(var r,i=e.value,p=i.apiOrder.collection,s=i.apiOrder.collectionType==t.ERC721_ORDER?exports.TokenType.ERC721:exports.TokenType.ERC1155,y=T(i.apiOrder.itemIds);!(r=y()).done;)n.push({tokenAddress:p,tokenId:r.value,tokenType:s});return n},n.getTotalPrice=function(){for(var e,t=i.BigNumber.from(0),n=T(this.orders);!(e=n()).done;)t=t.add(e.value.apiOrder.price);return t},n.refactorAPIData=function(e){var t=[],n=[],a=[],r=i.BigNumber.from(0),p=[];return e.forEach((function(e){var s,y;n.push(d({},e.apiOrder)),a.push(e.apiOrder.signature),t.push({recipient:e.taker,additionalParameters:"0x"}),r=r.add(i.BigNumber.from(e.apiOrder.price)),p.push({root:null!=(s=e.apiOrder.merkleRoot)?s:"0x0000000000000000000000000000000000000000000000000000000000000000",proof:null!=(y=e.apiOrder.merkleProof)?y:[]})})),{takerBids:t,makerOrders:n,makerSignatures:a,totalValue:r,merkleTrees:p}},t}(C);K.INTERFACE=new r.Interface(X),K.ERC721_ORDER=0;var q=[{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},{inputs:[],name:"ETH",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"NFT20",outputs:[{internalType:"contract INFT20Factory",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"UNIV2",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"UNIV3",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"WETH",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"_nft",type:"address"},{internalType:"uint256[]",name:"_toIds",type:"uint256[]"},{internalType:"uint256[]",name:"_toAmounts",type:"uint256[]"},{internalType:"address",name:"_receipient",type:"address"},{internalType:"uint24",name:"_fee",type:"uint24"},{internalType:"bool",name:"isV3",type:"bool"}],name:"ethForNft",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"_nft",type:"address"},{internalType:"uint256[]",name:"_ids",type:"uint256[]"},{internalType:"uint256[]",name:"_amounts",type:"uint256[]"},{internalType:"bool",name:"isErc721",type:"bool"},{internalType:"uint24",name:"_fee",type:"uint24"},{internalType:"bool",name:"isV3",type:"bool"}],name:"nftForEth",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"tokenAddress",type:"address"},{internalType:"uint256",name:"tokenAmount",type:"uint256"},{internalType:"address",name:"sendTo",type:"address"}],name:"recoverERC20",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"_registry",type:"address"}],name:"setNFT20",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"withdrawEth",outputs:[],stateMutability:"payable",type:"function"},{stateMutability:"payable",type:"receive"}],z=function(e){function t(t){return e.call(this,exports.Market.NFT20,t)||this}m(t,e);var n=t.prototype;return n.encode=function(e,n){for(var a,r=T(this.orders);!(a=r()).done;){var i=a.value,p=t.INTERFACE.encodeFunctionData("ethForNft",[i.tokenAddress,i.tokenIds,i.tokenAmounts,i.recipient,i.fee,i.isV3]);e.addCommand(exports.CommandType.NFT20,[i.value,p],n.allowRevert)}},n.getBuyItems=function(){for(var e,t=[],n=T(this.orders);!(e=n()).done;)for(var a,r=e.value,i=T(r.tokenIds);!(a=i()).done;)t.push({tokenAddress:r.tokenAddress,tokenId:a.value,tokenType:exports.TokenType.ERC721});return t},n.getTotalPrice=function(){for(var e,t=i.BigNumber.from(0),n=T(this.orders);!(e=n()).done;)t=t.add(e.value.value);return t},t}(C);z.INTERFACE=new r.Interface(q);var Y=[{inputs:[{internalType:"address",name:"_nftxFactory",type:"address"},{internalType:"address",name:"_WETH",type:"address"},{internalType:"address payable",name:"_swapTarget",type:"address"},{internalType:"uint256",name:"_dustThreshold",type:"uint256"}],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"count",type:"uint256"},{indexed:!1,internalType:"uint256",name:"ethSpent",type:"uint256"},{indexed:!1,internalType:"address",name:"to",type:"address"}],name:"Buy",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"ethAmount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"vTokenAmount",type:"uint256"},{indexed:!1,internalType:"address",name:"to",type:"address"}],name:"DustReturned",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"count",type:"uint256"},{indexed:!1,internalType:"uint256",name:"ethReceived",type:"uint256"},{indexed:!1,internalType:"address",name:"to",type:"address"}],name:"Sell",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"count",type:"uint256"},{indexed:!1,internalType:"uint256",name:"ethSpent",type:"uint256"},{indexed:!1,internalType:"address",name:"to",type:"address"}],name:"Swap",type:"event"},{inputs:[],name:"WETH",outputs:[{internalType:"contract IWETH",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"vaultId",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256[]",name:"specificIds",type:"uint256[]"},{internalType:"bytes",name:"swapCallData",type:"bytes"},{internalType:"address payable",name:"to",type:"address"}],name:"buyAndRedeem",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"uint256",name:"vaultId",type:"uint256"},{internalType:"uint256[]",name:"idsIn",type:"uint256[]"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"},{internalType:"uint256[]",name:"specificIds",type:"uint256[]"},{internalType:"bytes",name:"swapCallData",type:"bytes"},{internalType:"address payable",name:"to",type:"address"}],name:"buyAndSwap1155",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"uint256",name:"vaultId",type:"uint256"},{internalType:"uint256[]",name:"idsIn",type:"uint256[]"},{internalType:"uint256[]",name:"specificIds",type:"uint256[]"},{internalType:"bytes",name:"swapCallData",type:"bytes"},{internalType:"address payable",name:"to",type:"address"}],name:"buyAndSwap721",outputs:[],stateMutability:"payable",type:"function"},{inputs:[],name:"dustThreshold",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"feeDistributor",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"vaultId",type:"uint256"},{internalType:"uint256[]",name:"ids",type:"uint256[]"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"},{internalType:"bytes",name:"swapCallData",type:"bytes"},{internalType:"address payable",name:"to",type:"address"}],name:"mintAndSell1155",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"vaultId",type:"uint256"},{internalType:"uint256[]",name:"ids",type:"uint256[]"},{internalType:"bytes",name:"swapCallData",type:"bytes"},{internalType:"address payable",name:"to",type:"address"}],name:"mintAndSell721",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"nftxFactory",outputs:[{internalType:"contract INFTXVaultFactory",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"nftxVaultAddresses",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"address",name:"",type:"address"},{internalType:"uint256[]",name:"",type:"uint256[]"},{internalType:"uint256[]",name:"",type:"uint256[]"},{internalType:"bytes",name:"",type:"bytes"}],name:"onERC1155BatchReceived",outputs:[{internalType:"bytes4",name:"",type:"bytes4"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"},{internalType:"uint256",name:"",type:"uint256"},{internalType:"bytes",name:"",type:"bytes"}],name:"onERC1155Received",outputs:[{internalType:"bytes4",name:"",type:"bytes4"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"},{internalType:"bytes",name:"",type:"bytes"}],name:"onERC721Received",outputs:[{internalType:"bytes4",name:"",type:"bytes4"}],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bool",name:"_paused",type:"bool"}],name:"pause",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"paused",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"token",type:"address"}],name:"rescue",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"_dustThreshold",type:"uint256"}],name:"setDustThreshold",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{stateMutability:"payable",type:"receive"}],j=function(e){function t(t){return e.call(this,exports.Market.NFTX,t)||this}m(t,e);var n=t.prototype;return n.encode=function(e,n){for(var a,r=T(this.orders);!(a=r()).done;){var i=a.value,p=t.INTERFACE.encodeFunctionData("buyAndRedeem",[i.vaultId,i.tokenIds.length,i.tokenIds,i.swapCalldata,i.recipient]);e.addCommand(exports.CommandType.NFTX,[i.value,p],n.allowRevert)}},n.getBuyItems=function(){for(var e,t=[],n=T(this.orders);!(e=n()).done;)for(var a,r=e.value,i=T(r.tokenIds);!(a=i()).done;)t.push({tokenAddress:r.tokenAddress,tokenId:a.value,tokenType:exports.TokenType.ERC721});return t},n.getTotalPrice=function(){for(var e,t=i.BigNumber.from(0),n=T(this.orders);!(e=n()).done;)t=t.add(e.value.value);return t},t}(C);j.INTERFACE=new r.Interface(Y);var G=[{inputs:[{internalType:"address",name:"conduitController",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[],name:"BadContractSignature",type:"error"},{inputs:[],name:"BadFraction",type:"error"},{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"BadReturnValueFromERC20OnTransfer",type:"error"},{inputs:[{internalType:"uint8",name:"v",type:"uint8"}],name:"BadSignatureV",type:"error"},{inputs:[],name:"ConsiderationCriteriaResolverOutOfRange",type:"error"},{inputs:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"considerationIndex",type:"uint256"},{internalType:"uint256",name:"shortfallAmount",type:"uint256"}],name:"ConsiderationNotMet",type:"error"},{inputs:[],name:"CriteriaNotEnabledForItem",type:"error"},{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256[]",name:"identifiers",type:"uint256[]"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],name:"ERC1155BatchTransferGenericFailure",type:"error"},{inputs:[{internalType:"address",name:"account",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"EtherTransferGenericFailure",type:"error"},{inputs:[],name:"InexactFraction",type:"error"},{inputs:[],name:"InsufficientEtherSupplied",type:"error"},{inputs:[],name:"Invalid1155BatchTransferEncoding",type:"error"},{inputs:[],name:"InvalidBasicOrderParameterEncoding",type:"error"},{inputs:[{internalType:"address",name:"conduit",type:"address"}],name:"InvalidCallToConduit",type:"error"},{inputs:[],name:"InvalidCanceller",type:"error"},{inputs:[{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"address",name:"conduit",type:"address"}],name:"InvalidConduit",type:"error"},{inputs:[],name:"InvalidERC721TransferAmount",type:"error"},{inputs:[],name:"InvalidFulfillmentComponentData",type:"error"},{inputs:[{internalType:"uint256",name:"value",type:"uint256"}],name:"InvalidMsgValue",type:"error"},{inputs:[],name:"InvalidNativeOfferItem",type:"error"},{inputs:[],name:"InvalidProof",type:"error"},{inputs:[{internalType:"bytes32",name:"orderHash",type:"bytes32"}],name:"InvalidRestrictedOrder",type:"error"},{inputs:[],name:"InvalidSignature",type:"error"},{inputs:[],name:"InvalidSigner",type:"error"},{inputs:[],name:"InvalidTime",type:"error"},{inputs:[],name:"MismatchedFulfillmentOfferAndConsiderationComponents",type:"error"},{inputs:[{internalType:"enum Side",name:"side",type:"uint8"}],name:"MissingFulfillmentComponentOnAggregation",type:"error"},{inputs:[],name:"MissingItemAmount",type:"error"},{inputs:[],name:"MissingOriginalConsiderationItems",type:"error"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"NoContract",type:"error"},{inputs:[],name:"NoReentrantCalls",type:"error"},{inputs:[],name:"NoSpecifiedOrdersAvailable",type:"error"},{inputs:[],name:"OfferAndConsiderationRequiredOnFulfillment",type:"error"},{inputs:[],name:"OfferCriteriaResolverOutOfRange",type:"error"},{inputs:[{internalType:"bytes32",name:"orderHash",type:"bytes32"}],name:"OrderAlreadyFilled",type:"error"},{inputs:[],name:"OrderCriteriaResolverOutOfRange",type:"error"},{inputs:[{internalType:"bytes32",name:"orderHash",type:"bytes32"}],name:"OrderIsCancelled",type:"error"},{inputs:[{internalType:"bytes32",name:"orderHash",type:"bytes32"}],name:"OrderPartiallyFilled",type:"error"},{inputs:[],name:"PartialFillsNotEnabledForOrder",type:"error"},{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"TokenTransferGenericFailure",type:"error"},{inputs:[],name:"UnresolvedConsiderationCriteria",type:"error"},{inputs:[],name:"UnresolvedOfferCriteria",type:"error"},{inputs:[],name:"UnusedItemParameters",type:"error"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"newCounter",type:"uint256"},{indexed:!0,internalType:"address",name:"offerer",type:"address"}],name:"CounterIncremented",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"bytes32",name:"orderHash",type:"bytes32"},{indexed:!0,internalType:"address",name:"offerer",type:"address"},{indexed:!0,internalType:"address",name:"zone",type:"address"}],name:"OrderCancelled",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"bytes32",name:"orderHash",type:"bytes32"},{indexed:!0,internalType:"address",name:"offerer",type:"address"},{indexed:!0,internalType:"address",name:"zone",type:"address"},{indexed:!1,internalType:"address",name:"recipient",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"}],indexed:!1,internalType:"struct SpentItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],indexed:!1,internalType:"struct ReceivedItem[]",name:"consideration",type:"tuple[]"}],name:"OrderFulfilled",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"bytes32",name:"orderHash",type:"bytes32"},{indexed:!0,internalType:"address",name:"offerer",type:"address"},{indexed:!0,internalType:"address",name:"zone",type:"address"}],name:"OrderValidated",type:"event"},{inputs:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"counter",type:"uint256"}],internalType:"struct OrderComponents[]",name:"orders",type:"tuple[]"}],name:"cancel",outputs:[{internalType:"bool",name:"cancelled",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalConsiderationItems",type:"uint256"}],internalType:"struct OrderParameters",name:"parameters",type:"tuple"},{internalType:"uint120",name:"numerator",type:"uint120"},{internalType:"uint120",name:"denominator",type:"uint120"},{internalType:"bytes",name:"signature",type:"bytes"},{internalType:"bytes",name:"extraData",type:"bytes"}],internalType:"struct AdvancedOrder",name:"advancedOrder",type:"tuple"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"enum Side",name:"side",type:"uint8"},{internalType:"uint256",name:"index",type:"uint256"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"bytes32[]",name:"criteriaProof",type:"bytes32[]"}],internalType:"struct CriteriaResolver[]",name:"criteriaResolvers",type:"tuple[]"},{internalType:"bytes32",name:"fulfillerConduitKey",type:"bytes32"},{internalType:"address",name:"recipient",type:"address"}],name:"fulfillAdvancedOrder",outputs:[{internalType:"bool",name:"fulfilled",type:"bool"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalConsiderationItems",type:"uint256"}],internalType:"struct OrderParameters",name:"parameters",type:"tuple"},{internalType:"uint120",name:"numerator",type:"uint120"},{internalType:"uint120",name:"denominator",type:"uint120"},{internalType:"bytes",name:"signature",type:"bytes"},{internalType:"bytes",name:"extraData",type:"bytes"}],internalType:"struct AdvancedOrder[]",name:"advancedOrders",type:"tuple[]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"enum Side",name:"side",type:"uint8"},{internalType:"uint256",name:"index",type:"uint256"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"bytes32[]",name:"criteriaProof",type:"bytes32[]"}],internalType:"struct CriteriaResolver[]",name:"criteriaResolvers",type:"tuple[]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[][]",name:"offerFulfillments",type:"tuple[][]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[][]",name:"considerationFulfillments",type:"tuple[][]"},{internalType:"bytes32",name:"fulfillerConduitKey",type:"bytes32"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"maximumFulfilled",type:"uint256"}],name:"fulfillAvailableAdvancedOrders",outputs:[{internalType:"bool[]",name:"availableOrders",type:"bool[]"},{components:[{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ReceivedItem",name:"item",type:"tuple"},{internalType:"address",name:"offerer",type:"address"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"}],internalType:"struct Execution[]",name:"executions",type:"tuple[]"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalConsiderationItems",type:"uint256"}],internalType:"struct OrderParameters",name:"parameters",type:"tuple"},{internalType:"bytes",name:"signature",type:"bytes"}],internalType:"struct Order[]",name:"orders",type:"tuple[]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[][]",name:"offerFulfillments",type:"tuple[][]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[][]",name:"considerationFulfillments",type:"tuple[][]"},{internalType:"bytes32",name:"fulfillerConduitKey",type:"bytes32"},{internalType:"uint256",name:"maximumFulfilled",type:"uint256"}],name:"fulfillAvailableOrders",outputs:[{internalType:"bool[]",name:"availableOrders",type:"bool[]"},{components:[{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ReceivedItem",name:"item",type:"tuple"},{internalType:"address",name:"offerer",type:"address"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"}],internalType:"struct Execution[]",name:"executions",type:"tuple[]"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{internalType:"address",name:"considerationToken",type:"address"},{internalType:"uint256",name:"considerationIdentifier",type:"uint256"},{internalType:"uint256",name:"considerationAmount",type:"uint256"},{internalType:"address payable",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{internalType:"address",name:"offerToken",type:"address"},{internalType:"uint256",name:"offerIdentifier",type:"uint256"},{internalType:"uint256",name:"offerAmount",type:"uint256"},{internalType:"enum BasicOrderType",name:"basicOrderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"offererConduitKey",type:"bytes32"},{internalType:"bytes32",name:"fulfillerConduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalAdditionalRecipients",type:"uint256"},{components:[{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct AdditionalRecipient[]",name:"additionalRecipients",type:"tuple[]"},{internalType:"bytes",name:"signature",type:"bytes"}],internalType:"struct BasicOrderParameters",name:"parameters",type:"tuple"}],name:"fulfillBasicOrder",outputs:[{internalType:"bool",name:"fulfilled",type:"bool"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalConsiderationItems",type:"uint256"}],internalType:"struct OrderParameters",name:"parameters",type:"tuple"},{internalType:"bytes",name:"signature",type:"bytes"}],internalType:"struct Order",name:"order",type:"tuple"},{internalType:"bytes32",name:"fulfillerConduitKey",type:"bytes32"}],name:"fulfillOrder",outputs:[{internalType:"bool",name:"fulfilled",type:"bool"}],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"offerer",type:"address"}],name:"getCounter",outputs:[{internalType:"uint256",name:"counter",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"counter",type:"uint256"}],internalType:"struct OrderComponents",name:"order",type:"tuple"}],name:"getOrderHash",outputs:[{internalType:"bytes32",name:"orderHash",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"orderHash",type:"bytes32"}],name:"getOrderStatus",outputs:[{internalType:"bool",name:"isValidated",type:"bool"},{internalType:"bool",name:"isCancelled",type:"bool"},{internalType:"uint256",name:"totalFilled",type:"uint256"},{internalType:"uint256",name:"totalSize",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"incrementCounter",outputs:[{internalType:"uint256",name:"newCounter",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"information",outputs:[{internalType:"string",name:"version",type:"string"},{internalType:"bytes32",name:"domainSeparator",type:"bytes32"},{internalType:"address",name:"conduitController",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalConsiderationItems",type:"uint256"}],internalType:"struct OrderParameters",name:"parameters",type:"tuple"},{internalType:"uint120",name:"numerator",type:"uint120"},{internalType:"uint120",name:"denominator",type:"uint120"},{internalType:"bytes",name:"signature",type:"bytes"},{internalType:"bytes",name:"extraData",type:"bytes"}],internalType:"struct AdvancedOrder[]",name:"advancedOrders",type:"tuple[]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"enum Side",name:"side",type:"uint8"},{internalType:"uint256",name:"index",type:"uint256"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"bytes32[]",name:"criteriaProof",type:"bytes32[]"}],internalType:"struct CriteriaResolver[]",name:"criteriaResolvers",type:"tuple[]"},{components:[{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[]",name:"offerComponents",type:"tuple[]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[]",name:"considerationComponents",type:"tuple[]"}],internalType:"struct Fulfillment[]",name:"fulfillments",type:"tuple[]"}],name:"matchAdvancedOrders",outputs:[{components:[{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ReceivedItem",name:"item",type:"tuple"},{internalType:"address",name:"offerer",type:"address"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"}],internalType:"struct Execution[]",name:"executions",type:"tuple[]"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalConsiderationItems",type:"uint256"}],internalType:"struct OrderParameters",name:"parameters",type:"tuple"},{internalType:"bytes",name:"signature",type:"bytes"}],internalType:"struct Order[]",name:"orders",type:"tuple[]"},{components:[{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[]",name:"offerComponents",type:"tuple[]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[]",name:"considerationComponents",type:"tuple[]"}],internalType:"struct Fulfillment[]",name:"fulfillments",type:"tuple[]"}],name:"matchOrders",outputs:[{components:[{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ReceivedItem",name:"item",type:"tuple"},{internalType:"address",name:"offerer",type:"address"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"}],internalType:"struct Execution[]",name:"executions",type:"tuple[]"}],stateMutability:"payable",type:"function"},{inputs:[],name:"name",outputs:[{internalType:"string",name:"contractName",type:"string"}],stateMutability:"pure",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalConsiderationItems",type:"uint256"}],internalType:"struct OrderParameters",name:"parameters",type:"tuple"},{internalType:"bytes",name:"signature",type:"bytes"}],internalType:"struct Order[]",name:"orders",type:"tuple[]"}],name:"validate",outputs:[{internalType:"bool",name:"validated",type:"bool"}],stateMutability:"nonpayable",type:"function"}],Q=function(e){function t(t){return e.call(this,exports.Market.Seaport,t)||this}m(t,e);var n=t.prototype;return n.encode=function(e,n){for(var a,r=T(this.orders);!(a=r()).done;){for(var i,p=a.value,s=[],y=p.items.map((function(e,t){return[{orderIndex:t,itemIndex:0}]})),u=this.getConsiderationFulfillments(p.items),o=T(p.items);!(i=o()).done;){var d=this.getAdvancedOrderParams(i.value);s.push(d.advancedOrder)}var m;if(m=1==s.length?t.INTERFACE.encodeFunctionData("fulfillAdvancedOrder",[s[0],[],t.OPENSEA_CONDUIT_KEY,p.recipient]):t.INTERFACE.encodeFunctionData("fulfillAvailableAdvancedOrders",[s,[],y,u,t.OPENSEA_CONDUIT_KEY,p.recipient,100]),p.inputTokenProcessing)for(var l,c=T(p.inputTokenProcessing);!(l=c()).done;){var f=l.value;V(e,{approval:f.protocolApproval?{token:f.token,protocol:p.protocolAddress}:void 0,permit2Permit:f.permit2Permit,permit2TransferFrom:f.permit2TransferFrom?{token:f.token,amount:this.getTotalOrderPrice(p,f.token).toString()}:void 0})}e.addCommand(this.commandMap(p.protocolAddress),[this.getTotalOrderPrice(p,k).toString(),m],n.allowRevert)}},n.getBuyItems=function(){for(var e,t=[],n=T(this.orders);!(e=n()).done;)for(var a,r=T(e.value.items);!(a=r()).done;)for(var i,p=T(a.value.parameters.offer);!(i=p()).done;){var s=i.value;t.push({tokenAddress:s.token,tokenId:s.identifierOrCriteria,tokenType:exports.TokenType.ERC721})}return t},n.getInputTokens=function(){for(var e,t=new Set,n=T(this.orders);!(e=n()).done;)for(var a,r=T(e.value.items);!(a=r()).done;)for(var i,p=T(a.value.parameters.consideration);!(i=p()).done;){var s=i.value.token.toLowerCase();t.add(s)}return t},n.getTotalOrderPrice=function(e,t){void 0===t&&(t=k);for(var n,a=i.BigNumber.from(0),r=T(e.items);!(n=r()).done;)a=a.add(this.calculateValue(n.value.parameters.consideration,t));return a},n.getTotalPrice=function(e){void 0===e&&(e=k);for(var t,n=i.BigNumber.from(0),a=T(this.orders);!(t=a()).done;)for(var r,p=T(t.value.items);!(r=p()).done;)n=n.add(this.calculateValue(r.value.parameters.consideration,e));return n},n.commandMap=function(e){switch(e.toLowerCase()){case"0x00000000000000adc04c56bf30ac9d3c0aaf14dc":return exports.CommandType.SEAPORT_V1_5;case"0x00000000000001ad428e4906ae43d8f9852d0dd6":return exports.CommandType.SEAPORT_V1_4;default:throw new Error("unsupported Seaport address")}},n.getConsiderationFulfillments=function(e){var t=[],n=[];for(var a in e){var r=e[a],i=function(e){var i=r.parameters.consideration[e];-1===n.findIndex((function(e){return e===i.recipient}))&&n.push(i.recipient);var p=n.findIndex((function(e){return e===i.recipient}));t[p]?t[p].push({orderIndex:a,itemIndex:e}):t.push([{orderIndex:a,itemIndex:e}])};for(var p in r.parameters.consideration)i(p)}return t},n.getAdvancedOrderParams=function(e){return{advancedOrder:{parameters:e.parameters,numerator:i.BigNumber.from("1"),denominator:i.BigNumber.from("1"),signature:e.signature,extraData:"0x00"}}},n.calculateValue=function(e,t){return e.reduce((function(e,n){return n.token.toLowerCase()==t.toLowerCase()?e.add(n.startAmount):e}),i.BigNumber.from(0))},t}(C);Q.INTERFACE=new r.Interface(G),Q.OPENSEA_CONDUIT_KEY="0x0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000";var Z=[{inputs:[{internalType:"contract ILSSVMPairFactoryLike",name:"_factory",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[],name:"factory",outputs:[{internalType:"contract ILSSVMPairFactoryLike",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"contract ERC20",name:"token",type:"address"},{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"enum ILSSVMPairFactoryLike.PairVariant",name:"variant",type:"uint8"}],name:"pairTransferERC20From",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"contract IERC721",name:"nft",type:"address"},{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"id",type:"uint256"},{internalType:"enum ILSSVMPairFactoryLike.PairVariant",name:"variant",type:"uint8"}],name:"pairTransferNFTFrom",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256",name:"numItems",type:"uint256"}],internalType:"struct LSSVMRouter.PairSwapAny",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"maxCost",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapAny[]",name:"swapList",type:"tuple[]"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"robustSwapERC20ForAnyNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"maxCost",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapSpecific[]",name:"swapList",type:"tuple[]"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"robustSwapERC20ForSpecificNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"maxCost",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapSpecific[]",name:"tokenToNFTTrades",type:"tuple[]"},{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"minOutput",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapSpecificForToken[]",name:"nftToTokenTrades",type:"tuple[]"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address payable",name:"tokenRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"}],internalType:"struct LSSVMRouter.RobustPairNFTsFoTokenAndTokenforNFTsTrade",name:"params",type:"tuple"}],name:"robustSwapERC20ForSpecificNFTsAndNFTsToToken",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"},{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256",name:"numItems",type:"uint256"}],internalType:"struct LSSVMRouter.PairSwapAny",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"maxCost",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapAny[]",name:"swapList",type:"tuple[]"},{internalType:"address payable",name:"ethRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"robustSwapETHForAnyNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"maxCost",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapSpecific[]",name:"swapList",type:"tuple[]"},{internalType:"address payable",name:"ethRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"robustSwapETHForSpecificNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"maxCost",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapSpecific[]",name:"tokenToNFTTrades",type:"tuple[]"},{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"minOutput",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapSpecificForToken[]",name:"nftToTokenTrades",type:"tuple[]"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address payable",name:"tokenRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"}],internalType:"struct LSSVMRouter.RobustPairNFTsFoTokenAndTokenforNFTsTrade",name:"params",type:"tuple"}],name:"robustSwapETHForSpecificNFTsAndNFTsToToken",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"},{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"minOutput",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapSpecificForToken[]",name:"swapList",type:"tuple[]"},{internalType:"address payable",name:"tokenRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"robustSwapNFTsForToken",outputs:[{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256",name:"numItems",type:"uint256"}],internalType:"struct LSSVMRouter.PairSwapAny[]",name:"swapList",type:"tuple[]"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapERC20ForAnyNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"swapList",type:"tuple[]"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapERC20ForSpecificNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256",name:"numItems",type:"uint256"}],internalType:"struct LSSVMRouter.PairSwapAny[]",name:"swapList",type:"tuple[]"},{internalType:"address payable",name:"ethRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapETHForAnyNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"swapList",type:"tuple[]"},{internalType:"address payable",name:"ethRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapETHForSpecificNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"nftToTokenTrades",type:"tuple[]"},{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256",name:"numItems",type:"uint256"}],internalType:"struct LSSVMRouter.PairSwapAny[]",name:"tokenToNFTTrades",type:"tuple[]"}],internalType:"struct LSSVMRouter.NFTsForAnyNFTsTrade",name:"trade",type:"tuple"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"uint256",name:"minOutput",type:"uint256"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapNFTsForAnyNFTsThroughERC20",outputs:[{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"nftToTokenTrades",type:"tuple[]"},{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256",name:"numItems",type:"uint256"}],internalType:"struct LSSVMRouter.PairSwapAny[]",name:"tokenToNFTTrades",type:"tuple[]"}],internalType:"struct LSSVMRouter.NFTsForAnyNFTsTrade",name:"trade",type:"tuple"},{internalType:"uint256",name:"minOutput",type:"uint256"},{internalType:"address payable",name:"ethRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapNFTsForAnyNFTsThroughETH",outputs:[{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"nftToTokenTrades",type:"tuple[]"},{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"tokenToNFTTrades",type:"tuple[]"}],internalType:"struct LSSVMRouter.NFTsForSpecificNFTsTrade",name:"trade",type:"tuple"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"uint256",name:"minOutput",type:"uint256"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapNFTsForSpecificNFTsThroughERC20",outputs:[{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"nftToTokenTrades",type:"tuple[]"},{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"tokenToNFTTrades",type:"tuple[]"}],internalType:"struct LSSVMRouter.NFTsForSpecificNFTsTrade",name:"trade",type:"tuple"},{internalType:"uint256",name:"minOutput",type:"uint256"},{internalType:"address payable",name:"ethRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapNFTsForSpecificNFTsThroughETH",outputs:[{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"swapList",type:"tuple[]"},{internalType:"uint256",name:"minOutput",type:"uint256"},{internalType:"address",name:"tokenRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapNFTsForToken",outputs:[{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{stateMutability:"payable",type:"receive"}],$=function(e){function t(t){return e.call(this,exports.Market.Sudoswap,t)||this}m(t,e);var n=t.prototype;return n.encode=function(e,n){for(var a,r=T(this.orders);!(a=r()).done;){var p=a.value,s=t.INTERFACE.encodeFunctionData("robustSwapETHForSpecificNFTs",[p.swaps.map((function(e){return{swapInfo:e.swapInfo,maxCost:e.maxCost}})),p.ethRecipient,p.nftRecipient,p.deadline]),y=p.swaps.reduce((function(e,t){return e.add(t.maxCost)}),i.BigNumber.from(0));e.addCommand(exports.CommandType.SUDOSWAP,[y,s],n.allowRevert)}},n.getBuyItems=function(){for(var e,t=[],n=T(this.orders);!(e=n()).done;)for(var a,r=T(e.value.swaps);!(a=r()).done;)for(var i,p=a.value,s=T(p.swapInfo.nftIds);!(i=s()).done;)t.push({tokenAddress:p.tokenAddress,tokenId:i.value,tokenType:exports.TokenType.ERC721});return t},n.getTotalPrice=function(){for(var e,t=i.BigNumber.from(0),n=T(this.orders);!(e=n()).done;)for(var a,r=T(e.value.swaps);!(a=r()).done;)t=t.add(a.value.maxCost);return t},t}(C);$.INTERFACE=new r.Interface(Z);var J=[{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"itemHash",type:"bytes32"},{indexed:!1,internalType:"address",name:"currency",type:"address"},{indexed:!1,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"incentive",type:"uint256"}],name:"EvAuctionRefund",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"itemHash",type:"bytes32"}],name:"EvCancel",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"delegate",type:"address"},{indexed:!1,internalType:"bool",name:"isRemoval",type:"bool"}],name:"EvDelegate",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"index",type:"uint256"},{indexed:!1,internalType:"bytes",name:"error",type:"bytes"}],name:"EvFailure",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"newValue",type:"uint256"}],name:"EvFeeCapUpdate",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"itemHash",type:"bytes32"},{indexed:!1,internalType:"address",name:"maker",type:"address"},{indexed:!1,internalType:"address",name:"taker",type:"address"},{indexed:!1,internalType:"uint256",name:"orderSalt",type:"uint256"},{indexed:!1,internalType:"uint256",name:"settleSalt",type:"uint256"},{indexed:!1,internalType:"uint256",name:"intent",type:"uint256"},{indexed:!1,internalType:"uint256",name:"delegateType",type:"uint256"},{indexed:!1,internalType:"uint256",name:"deadline",type:"uint256"},{indexed:!1,internalType:"contract IERC20Upgradeable",name:"currency",type:"address"},{indexed:!1,internalType:"bytes",name:"dataMask",type:"bytes"},{components:[{internalType:"uint256",name:"price",type:"uint256"},{internalType:"bytes",name:"data",type:"bytes"}],indexed:!1,internalType:"struct Market.OrderItem",name:"item",type:"tuple"},{components:[{internalType:"enum Market.Op",name:"op",type:"uint8"},{internalType:"uint256",name:"orderIdx",type:"uint256"},{internalType:"uint256",name:"itemIdx",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"bytes32",name:"itemHash",type:"bytes32"},{internalType:"contract IDelegate",name:"executionDelegate",type:"address"},{internalType:"bytes",name:"dataReplacement",type:"bytes"},{internalType:"uint256",name:"bidIncentivePct",type:"uint256"},{internalType:"uint256",name:"aucMinIncrementPct",type:"uint256"},{internalType:"uint256",name:"aucIncDurationSecs",type:"uint256"},{components:[{internalType:"uint256",name:"percentage",type:"uint256"},{internalType:"address",name:"to",type:"address"}],internalType:"struct Market.Fee[]",name:"fees",type:"tuple[]"}],indexed:!1,internalType:"struct Market.SettleDetail",name:"detail",type:"tuple"}],name:"EvInventory",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"bytes32",name:"itemHash",type:"bytes32"},{indexed:!1,internalType:"address",name:"currency",type:"address"},{indexed:!1,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"EvProfit",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"signer",type:"address"},{indexed:!1,internalType:"bool",name:"isRemoval",type:"bool"}],name:"EvSigner",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Paused",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Unpaused",type:"event"},{inputs:[],name:"RATE_BASE",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32[]",name:"itemHashes",type:"bytes32[]"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"cancel",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"delegates",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"feeCapPct",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"feeCapPct_",type:"uint256"},{internalType:"address",name:"weth_",type:"address"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"",type:"bytes32"}],name:"inventoryStatus",outputs:[{internalType:"enum Market.InvStatus",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"",type:"bytes32"}],name:"ongoingAuctions",outputs:[{internalType:"uint256",name:"price",type:"uint256"},{internalType:"uint256",name:"netPrice",type:"uint256"},{internalType:"uint256",name:"endAt",type:"uint256"},{internalType:"address",name:"bidder",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"pause",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"paused",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"address",name:"user",type:"address"},{internalType:"uint256",name:"network",type:"uint256"},{internalType:"uint256",name:"intent",type:"uint256"},{internalType:"uint256",name:"delegateType",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"contract IERC20Upgradeable",name:"currency",type:"address"},{internalType:"bytes",name:"dataMask",type:"bytes"},{components:[{internalType:"uint256",name:"price",type:"uint256"},{internalType:"bytes",name:"data",type:"bytes"}],internalType:"struct Market.OrderItem[]",name:"items",type:"tuple[]"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"uint8",name:"signVersion",type:"uint8"}],internalType:"struct Market.Order[]",name:"orders",type:"tuple[]"},{components:[{internalType:"enum Market.Op",name:"op",type:"uint8"},{internalType:"uint256",name:"orderIdx",type:"uint256"},{internalType:"uint256",name:"itemIdx",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"bytes32",name:"itemHash",type:"bytes32"},{internalType:"contract IDelegate",name:"executionDelegate",type:"address"},{internalType:"bytes",name:"dataReplacement",type:"bytes"},{internalType:"uint256",name:"bidIncentivePct",type:"uint256"},{internalType:"uint256",name:"aucMinIncrementPct",type:"uint256"},{internalType:"uint256",name:"aucIncDurationSecs",type:"uint256"},{components:[{internalType:"uint256",name:"percentage",type:"uint256"},{internalType:"address",name:"to",type:"address"}],internalType:"struct Market.Fee[]",name:"fees",type:"tuple[]"}],internalType:"struct Market.SettleDetail[]",name:"details",type:"tuple[]"},{components:[{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"uint256",name:"amountToEth",type:"uint256"},{internalType:"uint256",name:"amountToWeth",type:"uint256"},{internalType:"address",name:"user",type:"address"},{internalType:"bool",name:"canFail",type:"bool"}],internalType:"struct Market.SettleShared",name:"shared",type:"tuple"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"},{internalType:"uint8",name:"v",type:"uint8"}],internalType:"struct Market.RunInput",name:"input",type:"tuple"}],name:"run",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{components:[{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"address",name:"user",type:"address"},{internalType:"uint256",name:"network",type:"uint256"},{internalType:"uint256",name:"intent",type:"uint256"},{internalType:"uint256",name:"delegateType",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"contract IERC20Upgradeable",name:"currency",type:"address"},{internalType:"bytes",name:"dataMask",type:"bytes"},{components:[{internalType:"uint256",name:"price",type:"uint256"},{internalType:"bytes",name:"data",type:"bytes"}],internalType:"struct Market.OrderItem[]",name:"items",type:"tuple[]"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"uint8",name:"signVersion",type:"uint8"}],internalType:"struct Market.Order",name:"order",type:"tuple"},{components:[{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"uint256",name:"amountToEth",type:"uint256"},{internalType:"uint256",name:"amountToWeth",type:"uint256"},{internalType:"address",name:"user",type:"address"},{internalType:"bool",name:"canFail",type:"bool"}],internalType:"struct Market.SettleShared",name:"shared",type:"tuple"},{components:[{internalType:"enum Market.Op",name:"op",type:"uint8"},{internalType:"uint256",name:"orderIdx",type:"uint256"},{internalType:"uint256",name:"itemIdx",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"bytes32",name:"itemHash",type:"bytes32"},{internalType:"contract IDelegate",name:"executionDelegate",type:"address"},{internalType:"bytes",name:"dataReplacement",type:"bytes"},{internalType:"uint256",name:"bidIncentivePct",type:"uint256"},{internalType:"uint256",name:"aucMinIncrementPct",type:"uint256"},{internalType:"uint256",name:"aucIncDurationSecs",type:"uint256"},{components:[{internalType:"uint256",name:"percentage",type:"uint256"},{internalType:"address",name:"to",type:"address"}],internalType:"struct Market.Fee[]",name:"fees",type:"tuple[]"}],internalType:"struct Market.SettleDetail",name:"detail",type:"tuple"}],name:"run1",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"signers",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"unpause",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address[]",name:"toAdd",type:"address[]"},{internalType:"address[]",name:"toRemove",type:"address[]"}],name:"updateDelegates",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"val",type:"uint256"}],name:"updateFeeCap",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address[]",name:"toAdd",type:"address[]"},{internalType:"address[]",name:"toRemove",type:"address[]"}],name:"updateSigners",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"weth",outputs:[{internalType:"contract IWETHUpgradable",name:"",type:"address"}],stateMutability:"view",type:"function"},{stateMutability:"payable",type:"receive"}],ee=function(e){function t(t){return e.call(this,exports.Market.X2Y2,t)||this}m(t,e);var n=t.prototype;return n.encode=function(e,n){for(var a,r=T(this.orders);!(a=r()).done;){var i=a.value,p=t.INTERFACE.getSighash(t.INTERFACE.getFunction("run"))+i.signedInput.slice(2);i.tokenType==exports.TokenType.ERC721?e.addCommand(exports.CommandType.X2Y2_721,[i.price,p,i.recipient,i.tokenAddress,i.tokenId],n.allowRevert):i.tokenType==exports.TokenType.ERC1155&&e.addCommand(exports.CommandType.X2Y2_1155,[i.price,p,i.recipient,i.tokenAddress,i.tokenId,i.tokenAmount],n.allowRevert)}},n.getBuyItems=function(){for(var e,t=[],n=T(this.orders);!(e=n()).done;){var a=e.value;t.push({tokenAddress:a.tokenAddress,tokenId:a.tokenId,tokenType:a.tokenType})}return t},n.getTotalPrice=function(){for(var e,t=i.BigNumber.from(0),n=T(this.orders);!(e=n()).done;)t=t.add(e.value.price);return t},t}(C);ee.INTERFACE=new r.Interface(J);var te,ne=function(){function e(e,t,a){this.tradeType=exports.RouterTradeType.UnwrapWETH,this.wethAddress=M(t),this.amount=e,a&&(a.details.token.toLowerCase()!==this.wethAddress.toLowerCase()&&n(!1),a.details.amount>=e||n(!1),this.permit2Data=a)}return e.prototype.encode=function(e,t){V(e,{permit2Permit:this.permit2Data,permit2TransferFrom:{token:this.wethAddress,amount:this.amount.toString()}}),e.addCommand(exports.CommandType.UNWRAP_WETH,[P,this.amount])},e}();(te=exports.PoolType||(exports.PoolType={})).V2Pool="v2-pool",te.V3Pool="v3-pool";var ae=function(e){return e.toLowerCase()===k.toLowerCase()||e.toLowerCase()==="0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee".toLowerCase()},re=function(){function e(){}return e.fromClassicQuote=function(t){var n=t.route,a=t.tokenIn,r=t.tokenOut;if(!n)throw new Error("Expected route to be present");if(!n.length)throw new Error("Expected there to be at least one route");if(n.some((function(e){return!e.length})))throw new Error("Expected all routes to have at least one pool");var i=n[0],p=i[0].tokenIn,d=i[i.length-1].tokenOut;if(!p||!d)throw new Error("Expected both tokenIn and tokenOut to be present");if(p.chainId!==d.chainId)throw new Error("Expected tokenIn and tokenOut to be have same chainId");var m=e.toCurrency(ae(a),p),l=e.toCurrency(ae(r),d),T=n.map((function(t){var n=t[0].amountIn,a=t[t.length-1].amountOut;if(!n||!a)throw new Error("Expected both raw amountIn and raw amountOut to be present");var r=o.CurrencyAmount.fromRawAmount(m,n),i=o.CurrencyAmount.fromRawAmount(l,a),p=e.isVersionedRoute(exports.PoolType.V2Pool,t),d=e.isVersionedRoute(exports.PoolType.V3Pool,t);return{routev3:d?new y.Route(t.map(e.toPool),m,l):null,routev2:p?new s.Route(t.map(e.toPair),m,l):null,mixedRoute:d||p?null:new u.MixedRouteSDK(t.map(e.toPoolOrPair),m,l),inputAmount:r,outputAmount:i}}));return new u.Trade({v2Routes:T.filter((function(e){return e.routev2})).map((function(e){return{routev2:e.routev2,inputAmount:e.inputAmount,outputAmount:e.outputAmount}})),v3Routes:T.filter((function(e){return e.routev3})).map((function(e){return{routev3:e.routev3,inputAmount:e.inputAmount,outputAmount:e.outputAmount}})),mixedRoutes:T.filter((function(e){return e.mixedRoute})).map((function(e){return{mixedRoute:e.mixedRoute,inputAmount:e.inputAmount,outputAmount:e.outputAmount}})),tradeType:t.tradeType})},e.toCurrency=function(e,t){return e?o.Ether.onChain(t.chainId):this.toToken(t)},e.toToken=function(e){var t=e.symbol,n=e.buyFeeBps,a=e.sellFeeBps;return new o.Token(e.chainId,e.address,parseInt(e.decimals.toString()),t,void 0,!1,n?i.BigNumber.from(n):void 0,a?i.BigNumber.from(a):void 0)},e.toPool=function(t){var n=t.fee,a=t.sqrtRatioX96,r=t.liquidity,i=t.tickCurrent,p=t.tokenOut;return new y.Pool(e.toToken(t.tokenIn),e.toToken(p),parseInt(n),a,r,parseInt(i))},e.isVersionedRoute=function(e,t){return t.every((function(t){return t.type===e}))},e}();re.toPoolOrPair=function(e){return e.type===exports.PoolType.V3Pool?re.toPool(e):re.toPair(e)},re.toPair=function(e){var t=e.reserve0,n=e.reserve1;return new s.Pair(o.CurrencyAmount.fromRawAmount(re.toToken(t.token),t.quotient),o.CurrencyAmount.fromRawAmount(re.toToken(n.token),n.quotient))},exports.CryptopunkTrade=U,exports.FoundationTrade=W,exports.LooksRareV2Trade=K,exports.NFT20Trade=z,exports.NFTTrade=C,exports.NFTXTrade=j,exports.PERMIT2_ADDRESS="0x000000000022D473030F116dDEE9F6B43aC78BA3",exports.ROUTER_AS_RECIPIENT=P,exports.RoutePlanner=I,exports.RouterTradeAdapter=re,exports.SeaportTrade=Q,exports.SudoswapTrade=$,exports.SwapRouter=D,exports.UNIVERSAL_ROUTER_ADDRESS=function(e){if(!(e in S))throw new Error("Universal Router not deployed on chain "+e);return S[e].router},exports.UNIVERSAL_ROUTER_CREATION_BLOCK=function(e){if(!(e in S))throw new Error("Universal Router not deployed on chain "+e);return S[e].creationBlock},exports.UniswapTrade=O,exports.UnwrapWETH=ne,exports.WETH_ADDRESS=M,exports.X2Y2Trade=ee,exports.isNativeCurrency=ae;
 //# sourceMappingURL=universal-router-sdk.cjs.production.min.js.map
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.production.min.js.map b/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.production.min.js.map
index da2cf29..769406a 100644
--- a/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.production.min.js.map
+++ b/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.production.min.js.map
@@ -1 +1 @@
-{"version":3,"file":"universal-router-sdk.cjs.production.min.js","sources":["../src/entities/Command.ts","../src/entities/NFTTrade.ts","../src/utils/routerCommands.ts","../src/utils/constants.ts","../src/entities/protocols/uniswap.ts","../src/utils/numbers.ts","../src/utils/inputTokens.ts","../src/swapRouter.ts","../src/entities/protocols/cryptopunk.ts","../src/entities/protocols/foundation.ts","../src/entities/protocols/looksRareV2.ts","../src/entities/protocols/nft20.ts","../src/entities/protocols/nftx.ts","../src/entities/protocols/seaport.ts","../src/entities/protocols/sudoswap.ts","../src/entities/protocols/x2y2.ts","../src/utils/routerTradeAdapter.ts","../src/entities/protocols/unwrapWETH.ts"],"sourcesContent":["import { RoutePlanner } from '../utils/routerCommands'\n\nexport type TradeConfig = {\n  allowRevert: boolean\n}\n\nexport enum RouterTradeType {\n  UniswapTrade = 'UniswapTrade',\n  NFTTrade = 'NFTTrade',\n  UnwrapWETH = 'UnwrapWETH',\n}\n\n// interface for entities that can be encoded as a Universal Router command\nexport interface Command {\n  tradeType: RouterTradeType\n  encode(planner: RoutePlanner, config: TradeConfig): void\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { SeaportData } from './protocols/seaport'\nimport { FoundationData } from './protocols/foundation'\nimport { NFTXData } from './protocols/nftx'\nimport { NFT20Data } from './protocols/nft20'\nimport { RoutePlanner } from '../utils/routerCommands'\nimport { Command, RouterTradeType, TradeConfig } from './Command'\nimport { SudoswapData } from './protocols/sudoswap'\nimport { CryptopunkData } from './protocols/cryptopunk'\nimport { X2Y2Data } from './protocols/x2y2'\nimport { ElementData } from './protocols/element-market'\nimport { LooksRareV2Data } from './protocols/looksRareV2'\n\nexport type SupportedProtocolsData =\n  | SeaportData\n  | FoundationData\n  | NFTXData\n  | LooksRareV2Data\n  | X2Y2Data\n  | CryptopunkData\n  | NFT20Data\n  | SudoswapData\n  | ElementData\n\nexport abstract class NFTTrade<T> implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.NFTTrade\n  readonly orders: T[]\n  readonly market: Market\n\n  constructor(market: Market, orders: T[]) {\n    invariant(orders.length > 0, 'no buy Items')\n    this.market = market\n    this.orders = orders\n  }\n\n  abstract encode(planner: RoutePlanner, config: TradeConfig): void\n\n  abstract getBuyItems(): BuyItem[]\n\n  // optional parameter for the markets that accept ERC20s not just ETH\n  abstract getTotalPrice(token?: string): BigNumber\n}\n\nexport type BuyItem = {\n  tokenAddress: string\n  tokenId: BigNumberish\n  tokenType: TokenType\n  amount?: BigNumberish // for 1155\n}\n\nexport enum Market {\n  Foundation = 'foundation',\n  LooksRareV2 = 'looksrareV2',\n  NFT20 = 'nft20',\n  NFTX = 'nftx',\n  Seaport = 'seaport',\n  Sudoswap = 'Sudoswap',\n  Cryptopunks = 'cryptopunks',\n  X2Y2 = 'x2y2',\n  Element = 'element',\n}\n\nexport enum TokenType {\n  ERC721 = 'ERC721',\n  ERC1155 = 'ERC1155',\n  Cryptopunk = 'Cryptopunk',\n}\n","import { defaultAbiCoder } from 'ethers/lib/utils'\n\n/**\n * CommandTypes\n * @description Flags that modify a command's execution\n * @enum {number}\n */\nexport enum CommandType {\n  V3_SWAP_EXACT_IN = 0x00,\n  V3_SWAP_EXACT_OUT = 0x01,\n  PERMIT2_TRANSFER_FROM = 0x02,\n  PERMIT2_PERMIT_BATCH = 0x03,\n  SWEEP = 0x04,\n  TRANSFER = 0x05,\n  PAY_PORTION = 0x06,\n\n  V2_SWAP_EXACT_IN = 0x08,\n  V2_SWAP_EXACT_OUT = 0x09,\n  PERMIT2_PERMIT = 0x0a,\n  WRAP_ETH = 0x0b,\n  UNWRAP_WETH = 0x0c,\n  PERMIT2_TRANSFER_FROM_BATCH = 0x0d,\n  BALANCE_CHECK_ERC20 = 0x0e,\n\n  // NFT-related command types\n  SEAPORT_V1_5 = 0x10,\n  LOOKS_RARE_V2 = 0x11,\n  NFTX = 0x12,\n  CRYPTOPUNKS = 0x13,\n  // 0x14\n  OWNER_CHECK_721 = 0x15,\n  OWNER_CHECK_1155 = 0x16,\n  SWEEP_ERC721 = 0x17,\n\n  X2Y2_721 = 0x18,\n  SUDOSWAP = 0x19,\n  NFT20 = 0x1a,\n  X2Y2_1155 = 0x1b,\n  FOUNDATION = 0x1c,\n  SWEEP_ERC1155 = 0x1d,\n  ELEMENT_MARKET = 0x1e,\n\n  SEAPORT_V1_4 = 0x20,\n  EXECUTE_SUB_PLAN = 0x21,\n  APPROVE_ERC20 = 0x22,\n}\n\nconst ALLOW_REVERT_FLAG = 0x80\n\nconst REVERTIBLE_COMMANDS = new Set<CommandType>([\n  CommandType.SEAPORT_V1_5,\n  CommandType.SEAPORT_V1_4,\n  CommandType.NFTX,\n  CommandType.LOOKS_RARE_V2,\n  CommandType.X2Y2_721,\n  CommandType.X2Y2_1155,\n  CommandType.FOUNDATION,\n  CommandType.SUDOSWAP,\n  CommandType.NFT20,\n  CommandType.EXECUTE_SUB_PLAN,\n  CommandType.CRYPTOPUNKS,\n  CommandType.ELEMENT_MARKET,\n])\n\nconst PERMIT_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce) details,address spender,uint256 sigDeadline)'\n\nconst PERMIT_BATCH_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce)[] details,address spender,uint256 sigDeadline)'\n\nconst PERMIT2_TRANSFER_FROM_STRUCT = '(address from,address to,uint160 amount,address token)'\nconst PERMIT2_TRANSFER_FROM_BATCH_STRUCT = PERMIT2_TRANSFER_FROM_STRUCT + '[]'\n\nconst ABI_DEFINITION: { [key in CommandType]: string[] } = {\n  // Batch Reverts\n  [CommandType.EXECUTE_SUB_PLAN]: ['bytes', 'bytes[]'],\n\n  // Permit2 Actions\n  [CommandType.PERMIT2_PERMIT]: [PERMIT_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_PERMIT_BATCH]: [PERMIT_BATCH_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_TRANSFER_FROM]: ['address', 'address', 'uint160'],\n  [CommandType.PERMIT2_TRANSFER_FROM_BATCH]: [PERMIT2_TRANSFER_FROM_BATCH_STRUCT],\n\n  // Uniswap Actions\n  [CommandType.V3_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V3_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V2_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n  [CommandType.V2_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n\n  // Token Actions and Checks\n  [CommandType.WRAP_ETH]: ['address', 'uint256'],\n  [CommandType.UNWRAP_WETH]: ['address', 'uint256'],\n  [CommandType.SWEEP]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC721]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.TRANSFER]: ['address', 'address', 'uint256'],\n  [CommandType.PAY_PORTION]: ['address', 'address', 'uint256'],\n  [CommandType.BALANCE_CHECK_ERC20]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_721]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.APPROVE_ERC20]: ['address', 'uint256'],\n\n  // NFT Markets\n  [CommandType.SEAPORT_V1_5]: ['uint256', 'bytes'],\n  [CommandType.SEAPORT_V1_4]: ['uint256', 'bytes'],\n  [CommandType.NFTX]: ['uint256', 'bytes'],\n  [CommandType.LOOKS_RARE_V2]: ['uint256', 'bytes'],\n  [CommandType.X2Y2_721]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.X2Y2_1155]: ['uint256', 'bytes', 'address', 'address', 'uint256', 'uint256'],\n  [CommandType.FOUNDATION]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.SUDOSWAP]: ['uint256', 'bytes'],\n  [CommandType.NFT20]: ['uint256', 'bytes'],\n  [CommandType.CRYPTOPUNKS]: ['uint256', 'address', 'uint256'],\n  [CommandType.ELEMENT_MARKET]: ['uint256', 'bytes'],\n}\n\nexport class RoutePlanner {\n  commands: string\n  inputs: string[]\n\n  constructor() {\n    this.commands = '0x'\n    this.inputs = []\n  }\n\n  addSubPlan(subplan: RoutePlanner): void {\n    this.addCommand(CommandType.EXECUTE_SUB_PLAN, [subplan.commands, subplan.inputs], true)\n  }\n\n  addCommand(type: CommandType, parameters: any[], allowRevert = false): void {\n    let command = createCommand(type, parameters)\n    this.inputs.push(command.encodedInput)\n    if (allowRevert) {\n      if (!REVERTIBLE_COMMANDS.has(command.type)) {\n        throw new Error(`command type: ${command.type} cannot be allowed to revert`)\n      }\n      command.type = command.type | ALLOW_REVERT_FLAG\n    }\n\n    this.commands = this.commands.concat(command.type.toString(16).padStart(2, '0'))\n  }\n}\n\nexport type RouterCommand = {\n  type: CommandType\n  encodedInput: string\n}\n\nexport function createCommand(type: CommandType, parameters: any[]): RouterCommand {\n  const encodedInput = defaultAbiCoder.encode(ABI_DEFINITION[type], parameters)\n  return { type, encodedInput }\n}\n","import { BigNumber } from 'ethers'\n\ntype ChainConfig = {\n  router: string\n  creationBlock: number\n  weth: string\n}\n\nconst WETH_NOT_SUPPORTED_ON_CHAIN = '0x0000000000000000000000000000000000000000'\n\nconst CHAIN_CONFIGS: { [key: number]: ChainConfig } = {\n  // mainnet\n  [1]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    creationBlock: 17143817,\n  },\n  // goerli\n  [5]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6',\n    creationBlock: 8940568,\n  },\n  // sepolia\n  [11155111]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14',\n    creationBlock: 3543575,\n  },\n  // polygon\n  [137]: {\n    router: '0xec7BE89e9d109e7e3Fec59c222CF297125FEFda2',\n    weth: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    creationBlock: 52210153,\n  },\n  //polygon mumbai\n  [80001]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',\n    creationBlock: 35176052,\n  },\n  //optimism\n  [10]: {\n    router: '0xCb1355ff08Ab38bBCE60111F1bb2B784bE25D7e8',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 114702266,\n  },\n  // optimism goerli\n  [420]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 8887728,\n  },\n  // arbitrum\n  [42161]: {\n    router: '0x5E325eDA8064b456f4781070C0738d849c824258',\n    weth: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n    creationBlock: 169472836,\n  },\n  // arbitrum goerli\n  [421613]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3',\n    creationBlock: 18815277,\n  },\n  // celo\n  [42220]: {\n    router: '0x643770e279d5d0733f21d6dc03a8efbabf3255b4',\n    weth: WETH_NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 21407637,\n  },\n  // celo alfajores\n  [44787]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: WETH_NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 17566658,\n  },\n  // binance smart chain\n  [56]: {\n    router: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',\n    weth: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    creationBlock: 35160263,\n  },\n  // avalanche\n  [43114]: {\n    router: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',\n    weth: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    creationBlock: 40237257,\n  },\n  // base goerli\n  [84531]: {\n    router: '0xd0872d928672ae2ff74bdb2f5130ac12229cafaf',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 6915289,\n  },\n  // base mainnet\n  [8453]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 9107268,\n  },\n  [81457]: {\n    router: '0x643770E279d5D0733F21d6DC03A8efbABf3255B4',\n    weth: '0x4300000000000000000000000000000000000004',\n    creationBlock: 1116444,\n  },\n}\n\nexport const UNIVERSAL_ROUTER_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].router\n}\n\nexport const UNIVERSAL_ROUTER_CREATION_BLOCK = (chainId: number): number => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].creationBlock\n}\n\nexport const WETH_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n\n  if (CHAIN_CONFIGS[chainId].weth == WETH_NOT_SUPPORTED_ON_CHAIN) throw new Error(`Chain ${chainId} does not have WETH`)\n\n  return CHAIN_CONFIGS[chainId].weth\n}\n\nexport const PERMIT2_ADDRESS = '0x000000000022D473030F116dDEE9F6B43aC78BA3'\n\nexport const CONTRACT_BALANCE = BigNumber.from(2).pow(255)\nexport const ETH_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const E_ETH_ADDRESS = '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee'\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const MAX_UINT256 = BigNumber.from(2).pow(256).sub(1)\nexport const MAX_UINT160 = BigNumber.from(2).pow(160).sub(1)\n\nexport const SENDER_AS_RECIPIENT = '0x0000000000000000000000000000000000000001'\nexport const ROUTER_AS_RECIPIENT = '0x0000000000000000000000000000000000000002'\n\nexport const OPENSEA_CONDUIT_SPENDER_ID = 0\nexport const SUDOSWAP_SPENDER_ID = 1\n","import { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { Trade as V2Trade, Pair } from '@uniswap/v2-sdk'\nimport { Trade as V3Trade, Pool, encodeRouteToPath } from '@uniswap/v3-sdk'\nimport {\n  Trade as RouterTrade,\n  MixedRouteTrade,\n  Protocol,\n  IRoute,\n  RouteV2,\n  RouteV3,\n  MixedRouteSDK,\n  MixedRoute,\n  SwapOptions as RouterSwapOptions,\n  getOutputOfPools,\n  encodeMixedRouteToPath,\n  partitionMixedRouteByProtocol,\n} from '@uniswap/router-sdk'\nimport { Permit2Permit } from '../../utils/inputTokens'\nimport { Currency, TradeType, CurrencyAmount, Percent } from '@uniswap/sdk-core'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { SENDER_AS_RECIPIENT, ROUTER_AS_RECIPIENT, CONTRACT_BALANCE, ETH_ADDRESS } from '../../utils/constants'\nimport { encodeFeeBips } from '../../utils/numbers'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type FlatFeeOptions = {\n  amount: BigNumberish\n  recipient: string\n}\n\n// the existing router permit object doesn't include enough data for permit2\n// so we extend swap options with the permit2 permit\n// when safe mode is enabled, the SDK will add an extra ETH sweep for security\n// when useRouterBalance is enabled the SDK will use the balance in the router for the swap\nexport type SwapOptions = Omit<RouterSwapOptions, 'inputTokenPermit'> & {\n  useRouterBalance?: boolean\n  inputTokenPermit?: Permit2Permit\n  flatFee?: FlatFeeOptions\n  safeMode?: boolean\n}\n\nconst REFUND_ETH_PRICE_IMPACT_THRESHOLD = new Percent(50, 100)\n\ninterface Swap<TInput extends Currency, TOutput extends Currency> {\n  route: IRoute<TInput, TOutput, Pair | Pool>\n  inputAmount: CurrencyAmount<TInput>\n  outputAmount: CurrencyAmount<TOutput>\n}\n\n// Wrapper for uniswap router-sdk trade entity to encode swaps for Universal Router\n// also translates trade objects from previous (v2, v3) SDKs\nexport class UniswapTrade implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UniswapTrade\n  readonly payerIsUser: boolean\n\n  constructor(public trade: RouterTrade<Currency, Currency, TradeType>, public options: SwapOptions) {\n    if (!!options.fee && !!options.flatFee) throw new Error('Only one fee option permitted')\n\n    if (this.inputRequiresWrap) this.payerIsUser = false\n    else if (this.options.useRouterBalance) this.payerIsUser = false\n    else this.payerIsUser = true\n  }\n\n  get inputRequiresWrap(): boolean {\n    return this.trade.inputAmount.currency.isNative\n  }\n\n  encode(planner: RoutePlanner, _config: TradeConfig): void {\n    // If the input currency is the native currency, we need to wrap it with the router as the recipient\n    if (this.inputRequiresWrap) {\n      // TODO: optimize if only one v2 pool we can directly send this to the pool\n      planner.addCommand(CommandType.WRAP_ETH, [\n        ROUTER_AS_RECIPIENT,\n        this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString(),\n      ])\n    }\n    // The overall recipient at the end of the trade, SENDER_AS_RECIPIENT uses the msg.sender\n    this.options.recipient = this.options.recipient ?? SENDER_AS_RECIPIENT\n\n    // flag for whether we want to perform slippage check on aggregate output of multiple routes\n    //   1. when there are >2 exact input trades. this is only a heuristic,\n    //      as it's still more gas-expensive even in this case, but has benefits\n    //      in that the reversion probability is lower\n    const performAggregatedSlippageCheck =\n      this.trade.tradeType === TradeType.EXACT_INPUT && this.trade.routes.length > 2\n    const outputIsNative = this.trade.outputAmount.currency.isNative\n    const routerMustCustody = performAggregatedSlippageCheck || outputIsNative || hasFeeOption(this.options)\n\n    for (const swap of this.trade.swaps) {\n      switch (swap.route.protocol) {\n        case Protocol.V2:\n          addV2Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        case Protocol.V3:\n          addV3Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        case Protocol.MIXED:\n          addMixedSwap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        default:\n          throw new Error('UNSUPPORTED_TRADE_PROTOCOL')\n      }\n    }\n\n    let minimumAmountOut: BigNumber = BigNumber.from(\n      this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString()\n    )\n\n    // The router custodies for 3 reasons: to unwrap, to take a fee, and/or to do a slippage check\n    if (routerMustCustody) {\n      // If there is a fee, that percentage is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.fee) {\n        const feeBips = encodeFeeBips(this.options.fee.fee)\n        planner.addCommand(CommandType.PAY_PORTION, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.fee.recipient,\n          feeBips,\n        ])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(minimumAmountOut.mul(feeBips).div(10000))\n        }\n      }\n\n      // If there is a flat fee, that absolute amount is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.flatFee) {\n        const feeAmount = this.options.flatFee.amount\n        if (minimumAmountOut.lt(feeAmount)) throw new Error('Flat fee amount greater than minimumAmountOut')\n\n        planner.addCommand(CommandType.TRANSFER, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.flatFee.recipient,\n          feeAmount,\n        ])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(feeAmount)\n        }\n      }\n\n      // The remaining tokens that need to be sent to the user after the fee is taken will be caught\n      // by this if-else clause.\n      if (outputIsNative) {\n        planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, minimumAmountOut])\n      } else {\n        planner.addCommand(CommandType.SWEEP, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.recipient,\n          minimumAmountOut,\n        ])\n      }\n    }\n\n    if (this.inputRequiresWrap && (this.trade.tradeType === TradeType.EXACT_OUTPUT || riskOfPartialFill(this.trade))) {\n      // for exactOutput swaps that take native currency as input\n      // we need to send back the change to the user\n      planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, 0])\n    }\n\n    if (this.options.safeMode) planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, this.options.recipient, 0])\n  }\n}\n\n// encode a uniswap v2 swap\nfunction addV2Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = new V2Trade(\n    route as RouteV2<TInput, TOutput>,\n    tradeType == TradeType.EXACT_INPUT ? inputAmount : outputAmount,\n    tradeType\n  )\n\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n      // if native, we have to unwrap so keep in the router for now\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a uniswap v3 swap\nfunction addV3Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = V3Trade.createUncheckedTrade({\n    route: route as RouteV3<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const path = encodeRouteToPath(route as RouteV3<TInput, TOutput>, trade.tradeType === TradeType.EXACT_OUTPUT)\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a mixed route swap, i.e. including both v2 and v3 pools\nfunction addMixedSwap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  swap: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const { route, inputAmount, outputAmount } = swap\n  const tradeRecipient = routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient\n\n  // single hop, so it can be reduced to plain v2 or v3 swap logic\n  if (route.pools.length === 1) {\n    if (route.pools[0] instanceof Pool) {\n      return addV3Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else if (route.pools[0] instanceof Pair) {\n      return addV2Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else {\n      throw new Error('Invalid route type')\n    }\n  }\n\n  const trade = MixedRouteTrade.createUncheckedTrade({\n    route: route as MixedRoute<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const amountIn = trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient.toString()\n  const amountOut = trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient.toString()\n\n  // logic from\n  // https://github.com/Uniswap/router-sdk/blob/d8eed164e6c79519983844ca8b6a3fc24ebcb8f8/src/swapRouter.ts#L276\n  const sections = partitionMixedRouteByProtocol(route as MixedRoute<TInput, TOutput>)\n  const isLastSectionInRoute = (i: number) => {\n    return i === sections.length - 1\n  }\n\n  let outputToken\n  let inputToken = route.input.wrapped\n\n  for (let i = 0; i < sections.length; i++) {\n    const section = sections[i]\n    /// Now, we get output of this section\n    outputToken = getOutputOfPools(section, inputToken)\n\n    const newRouteOriginal = new MixedRouteSDK(\n      [...section],\n      section[0].token0.equals(inputToken) ? section[0].token0 : section[0].token1,\n      outputToken\n    )\n    const newRoute = new MixedRoute(newRouteOriginal)\n\n    /// Previous output is now input\n    inputToken = outputToken\n\n    const mixedRouteIsAllV3 = (route: MixedRouteSDK<Currency, Currency>) => {\n      return route.pools.every((pool) => pool instanceof Pool)\n    }\n\n    if (mixedRouteIsAllV3(newRoute)) {\n      const path: string = encodeMixedRouteToPath(newRoute)\n\n      planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n        // if not last section: send tokens directly to the first v2 pair of the next section\n        // note: because of the partitioning function we can be sure that the next section is v2\n        isLastSectionInRoute(i) ? tradeRecipient : (sections[i + 1][0] as Pair).liquidityToken.address,\n        i == 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOut\n        path, // path\n        payerIsUser && i === 0, // payerIsUser\n      ])\n    } else {\n      planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n        isLastSectionInRoute(i) ? tradeRecipient : ROUTER_AS_RECIPIENT, // recipient\n        i === 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOutMin\n        newRoute.path.map((pool) => pool.address), // path\n        payerIsUser && i === 0,\n      ])\n    }\n  }\n}\n\n// if price impact is very high, there's a chance of hitting max/min prices resulting in a partial fill of the swap\nfunction riskOfPartialFill(trade: RouterTrade<Currency, Currency, TradeType>): boolean {\n  return trade.priceImpact.greaterThan(REFUND_ETH_PRICE_IMPACT_THRESHOLD)\n}\n\nfunction hasFeeOption(swapOptions: SwapOptions): boolean {\n  return !!swapOptions.fee || !!swapOptions.flatFee\n}\n","import { BigNumber } from 'ethers'\nimport JSBI from 'jsbi'\nimport bn from 'bignumber.js'\nimport { Percent } from '@uniswap/sdk-core'\nimport { toHex } from '@uniswap/v3-sdk'\n\nexport function expandTo18DecimalsBN(n: number): BigNumber {\n  // use bn intermediately to allow decimals in intermediate calculations\n  return BigNumber.from(new bn(n).times(new bn(10).pow(18)).toFixed())\n}\n\nexport function expandTo18Decimals(n: number): JSBI {\n  return JSBI.BigInt(BigNumber.from(n).mul(BigNumber.from(10).pow(18)).toString())\n}\n\nexport function encodeFeeBips(fee: Percent): string {\n  return toHex(fee.multiply(10_000).quotient)\n}\n","import invariant from 'tiny-invariant'\nimport { ethers } from 'ethers'\nimport { PermitSingle } from '@uniswap/permit2-sdk'\nimport { CommandType, RoutePlanner } from './routerCommands'\nimport { OPENSEA_CONDUIT_SPENDER_ID, ROUTER_AS_RECIPIENT, SUDOSWAP_SPENDER_ID } from './constants'\n\nexport interface Permit2Permit extends PermitSingle {\n  signature: string\n}\n\nexport type ApproveProtocol = {\n  token: string\n  protocol: string\n}\n\nexport type Permit2TransferFrom = {\n  token: string\n  amount: string\n  recipient?: string\n}\n\nexport type InputTokenOptions = {\n  approval?: ApproveProtocol\n  permit2Permit?: Permit2Permit\n  permit2TransferFrom?: Permit2TransferFrom\n}\n\nconst SIGNATURE_LENGTH = 65\nconst EIP_2098_SIGNATURE_LENGTH = 64\n\nexport function encodePermit(planner: RoutePlanner, permit2: Permit2Permit): void {\n  let signature = permit2.signature\n\n  const length = ethers.utils.arrayify(permit2.signature).length\n  // signature data provided for EIP-1271 may have length different from ECDSA signature\n  if (length === SIGNATURE_LENGTH || length === EIP_2098_SIGNATURE_LENGTH) {\n    // sanitizes signature to cover edge cases of malformed EIP-2098 sigs and v used as recovery id\n    signature = ethers.utils.joinSignature(ethers.utils.splitSignature(permit2.signature))\n  }\n\n  planner.addCommand(CommandType.PERMIT2_PERMIT, [permit2, signature])\n}\n\n// Handles the encoding of commands needed to gather input tokens for a trade\n// Approval: The router approving another address to take tokens.\n//   note: Only seaport and sudoswap support this action. Approvals are left open.\n// Permit: A Permit2 signature-based Permit to allow the router to access a user's tokens\n// Transfer: A Permit2 TransferFrom of tokens from a user to either the router or another address\nexport function encodeInputTokenOptions(planner: RoutePlanner, options: InputTokenOptions) {\n  // first ensure that all tokens provided for encoding are the same\n  if (!!options.approval && !!options.permit2Permit)\n    invariant(options.approval.token === options.permit2Permit.details.token, `inconsistent token`)\n  if (!!options.approval && !!options.permit2TransferFrom)\n    invariant(options.approval.token === options.permit2TransferFrom.token, `inconsistent token`)\n  if (!!options.permit2TransferFrom && !!options.permit2Permit)\n    invariant(options.permit2TransferFrom.token === options.permit2Permit.details.token, `inconsistent token`)\n\n  // if an options.approval is required, add it\n  if (!!options.approval) {\n    planner.addCommand(CommandType.APPROVE_ERC20, [\n      options.approval.token,\n      mapApprovalProtocol(options.approval.protocol),\n    ])\n  }\n\n  // if this order has a options.permit2Permit, encode it\n  if (!!options.permit2Permit) {\n    encodePermit(planner, options.permit2Permit)\n  }\n\n  if (!!options.permit2TransferFrom) {\n    planner.addCommand(CommandType.PERMIT2_TRANSFER_FROM, [\n      options.permit2TransferFrom.token,\n      options.permit2TransferFrom.recipient ? options.permit2TransferFrom.recipient : ROUTER_AS_RECIPIENT,\n      options.permit2TransferFrom.amount,\n    ])\n  }\n}\n\nfunction mapApprovalProtocol(protocolAddress: string): number {\n  switch (protocolAddress.toLowerCase()) {\n    case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc': // Seaport v1.5\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x2b2e8cda09bba9660dca5cb6233787738ad68329': // Sudoswap\n      return SUDOSWAP_SPENDER_ID\n    default:\n      throw new Error('unsupported protocol address')\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { abi } from '@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { MethodParameters } from '@uniswap/v3-sdk'\nimport { Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, TradeType } from '@uniswap/sdk-core'\nimport { Command, RouterTradeType } from './entities/Command'\nimport { Market, NFTTrade, SupportedProtocolsData } from './entities/NFTTrade'\nimport { UniswapTrade, SwapOptions } from './entities/protocols/uniswap'\nimport { UnwrapWETH } from './entities/protocols/unwrapWETH'\nimport { CommandType, RoutePlanner } from './utils/routerCommands'\nimport { encodePermit } from './utils/inputTokens'\nimport { ROUTER_AS_RECIPIENT, SENDER_AS_RECIPIENT, ETH_ADDRESS } from './utils/constants'\nimport { SeaportTrade } from './entities'\n\nexport type SwapRouterConfig = {\n  sender?: string // address\n  deadline?: BigNumberish\n}\n\ntype SupportedNFTTrade = NFTTrade<SupportedProtocolsData>\n\nexport abstract class SwapRouter {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  public static swapCallParameters(trades: Command[] | Command, config: SwapRouterConfig = {}): MethodParameters {\n    if (!Array.isArray(trades)) trades = [trades]\n\n    const nftTrades = trades.filter((trade, _, []) => trade.hasOwnProperty('market')) as SupportedNFTTrade[]\n    const allowRevert = nftTrades.length == 1 && nftTrades[0].orders.length == 1 ? false : true\n    const planner = new RoutePlanner()\n\n    // track value flow to require the right amount of native value\n    let currentNativeValueInRouter = BigNumber.from(0)\n    let transactionValue = BigNumber.from(0)\n\n    // tracks the input tokens (and ETH) used to buy NFTs to allow us to sweep\n    let nftInputTokens = new Set<string>()\n\n    for (const trade of trades) {\n      /**\n       * is NFTTrade\n       */\n      if (trade.tradeType == RouterTradeType.NFTTrade) {\n        const nftTrade = trade as SupportedNFTTrade\n        nftTrade.encode(planner, { allowRevert })\n        const tradePrice = nftTrade.getTotalPrice()\n\n        if (nftTrade.market == Market.Seaport) {\n          const seaportTrade = nftTrade as SeaportTrade\n          const seaportInputTokens = seaportTrade.getInputTokens()\n          seaportInputTokens.forEach((inputToken) => {\n            nftInputTokens.add(inputToken)\n          })\n        } else {\n          nftInputTokens.add(ETH_ADDRESS)\n        }\n\n        // send enough native value to contract for NFT purchase\n        if (currentNativeValueInRouter.lt(tradePrice)) {\n          transactionValue = transactionValue.add(tradePrice.sub(currentNativeValueInRouter))\n          currentNativeValueInRouter = BigNumber.from(0)\n        } else {\n          currentNativeValueInRouter = currentNativeValueInRouter.sub(tradePrice)\n        }\n        /**\n         * is UniswapTrade\n         */\n      } else if (trade.tradeType == RouterTradeType.UniswapTrade) {\n        const uniswapTrade = trade as UniswapTrade\n        const inputIsNative = uniswapTrade.trade.inputAmount.currency.isNative\n        const outputIsNative = uniswapTrade.trade.outputAmount.currency.isNative\n        const swapOptions = uniswapTrade.options\n\n        invariant(!(inputIsNative && !!swapOptions.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n        if (!!swapOptions.inputTokenPermit) {\n          encodePermit(planner, swapOptions.inputTokenPermit)\n        }\n\n        if (inputIsNative) {\n          transactionValue = transactionValue.add(\n            BigNumber.from(uniswapTrade.trade.maximumAmountIn(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        // track amount of native currency in the router\n        if (outputIsNative && swapOptions.recipient == ROUTER_AS_RECIPIENT) {\n          currentNativeValueInRouter = currentNativeValueInRouter.add(\n            BigNumber.from(uniswapTrade.trade.minimumAmountOut(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        uniswapTrade.encode(planner, { allowRevert: false })\n        /**\n         * is UnwrapWETH\n         */\n      } else if (trade.tradeType == RouterTradeType.UnwrapWETH) {\n        const UnwrapWETH = trade as UnwrapWETH\n        trade.encode(planner, { allowRevert: false })\n        currentNativeValueInRouter = currentNativeValueInRouter.add(UnwrapWETH.amount)\n        /**\n         * else\n         */\n      } else {\n        throw 'trade must be of instance: UniswapTrade or NFTTrade'\n      }\n    }\n\n    // TODO: matches current logic for now, but should eventually only sweep for multiple NFT trades\n    // or NFT trades with potential slippage (i.e. sudo).\n    // Note: NFTXV2 sends excess ETH to the caller (router), not the specified recipient\n    nftInputTokens.forEach((inputToken) => {\n      planner.addCommand(CommandType.SWEEP, [inputToken, SENDER_AS_RECIPIENT, 0])\n    })\n    return SwapRouter.encodePlan(planner, transactionValue, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * This version does not work correctly for Seaport ERC20->NFT purchases\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given swap.\n   * @param trades to produce call parameters for\n   */\n  public static swapNFTCallParameters(trades: SupportedNFTTrade[], config: SwapRouterConfig = {}): MethodParameters {\n    let planner = new RoutePlanner()\n    let totalPrice = BigNumber.from(0)\n\n    const allowRevert = trades.length == 1 && trades[0].orders.length == 1 ? false : true\n\n    for (const trade of trades) {\n      trade.encode(planner, { allowRevert })\n      totalPrice = totalPrice.add(trade.getTotalPrice())\n    }\n\n    planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, SENDER_AS_RECIPIENT, 0])\n    return SwapRouter.encodePlan(planner, totalPrice, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trades to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapERC20CallParameters(\n    trades: RouterTrade<Currency, Currency, TradeType>,\n    options: SwapOptions\n  ): MethodParameters {\n    // TODO: use permit if signature included in swapOptions\n    const planner = new RoutePlanner()\n\n    const trade: UniswapTrade = new UniswapTrade(trades, options)\n\n    const inputCurrency = trade.trade.inputAmount.currency\n    invariant(!(inputCurrency.isNative && !!options.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n    if (options.inputTokenPermit) {\n      encodePermit(planner, options.inputTokenPermit)\n    }\n\n    const nativeCurrencyValue = inputCurrency.isNative\n      ? BigNumber.from(trade.trade.maximumAmountIn(options.slippageTolerance).quotient.toString())\n      : BigNumber.from(0)\n\n    trade.encode(planner, { allowRevert: false })\n    return SwapRouter.encodePlan(planner, nativeCurrencyValue, {\n      deadline: options.deadlineOrPreviousBlockhash ? BigNumber.from(options.deadlineOrPreviousBlockhash) : undefined,\n    })\n  }\n\n  /**\n   * Encodes a planned route into a method name and parameters for the Router contract.\n   * @param planner the planned route\n   * @param nativeCurrencyValue the native currency value of the planned route\n   * @param config the router config\n   */\n  private static encodePlan(\n    planner: RoutePlanner,\n    nativeCurrencyValue: BigNumber,\n    config: SwapRouterConfig = {}\n  ): MethodParameters {\n    const { commands, inputs } = planner\n    const functionSignature = !!config.deadline ? 'execute(bytes,bytes[],uint256)' : 'execute(bytes,bytes[])'\n    const parameters = !!config.deadline ? [commands, inputs, config.deadline] : [commands, inputs]\n    const calldata = SwapRouter.INTERFACE.encodeFunctionData(functionSignature, parameters)\n    return { calldata, value: nativeCurrencyValue.toHexString() }\n  }\n}\n","import { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type CryptopunkData = {\n  tokenId: BigNumberish\n  recipient: string\n  value: BigNumberish\n}\n\nexport class CryptopunkTrade extends NFTTrade<CryptopunkData> {\n  public static CRYPTOPUNK_ADDRESS: string = '0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb'\n\n  constructor(orders: CryptopunkData[]) {\n    super(Market.Cryptopunks, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      planner.addCommand(CommandType.CRYPTOPUNKS, [item.tokenId, item.recipient, item.value], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: CryptopunkTrade.CRYPTOPUNK_ADDRESS,\n        tokenId: item.tokenId,\n        tokenType: TokenType.Cryptopunk,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/Foundation.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type FoundationData = {\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n  referrer: string // address\n}\n\nexport class FoundationTrade extends NFTTrade<FoundationData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: FoundationData[]) {\n    super(Market.Foundation, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const calldata = FoundationTrade.INTERFACE.encodeFunctionData('buyV2', [\n        item.tokenAddress,\n        item.tokenId,\n        item.price,\n        item.referrer,\n      ])\n      planner.addCommand(\n        CommandType.FOUNDATION,\n        [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: TokenType.ERC721,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/LooksRareV2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber } from 'ethers'\nimport { ZERO_ADDRESS } from '../../utils/constants'\n\nexport type MakerOrder = {\n  quoteType: number\n  globalNonce: string\n  subsetNonce: string\n  orderNonce: string\n  strategyId: number\n  collectionType: number\n  collection: string\n  currency: string\n  signer: string\n  startTime: number\n  endTime: number\n  price: string\n  itemIds: string[]\n  amounts: string[]\n  additionalParameters: string\n}\n\nexport type TakerOrder = {\n  recipient: string\n  additionalParameters: string\n}\n\nexport type MerkleProof = {\n  value: string\n  position: number\n}\n\nexport type MerkleTree = {\n  root: string\n  proof: MerkleProof[]\n}\n\nexport type LRV2APIOrder = MakerOrder & {\n  id: string\n  hash: string\n  signature: string\n  createdAt: string\n  merkleRoot?: string\n  merkleProof?: MerkleProof[]\n  status: string\n}\n\nexport type LooksRareV2Data = {\n  apiOrder: LRV2APIOrder\n  taker: string\n}\n\nexport class LooksRareV2Trade extends NFTTrade<LooksRareV2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n  private static ERC721_ORDER = 0\n\n  constructor(orders: LooksRareV2Data[]) {\n    super(Market.LooksRareV2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    const { takerBids, makerOrders, makerSignatures, totalValue, merkleTrees } = this.refactorAPIData(this.orders)\n\n    let calldata\n    if (this.orders.length == 1) {\n      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeTakerBid', [\n        takerBids[0],\n        makerOrders[0],\n        makerSignatures[0],\n        merkleTrees[0],\n        ZERO_ADDRESS, // affiliate\n      ])\n    } else {\n      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeMultipleTakerBids', [\n        takerBids,\n        makerOrders,\n        makerSignatures,\n        merkleTrees,\n        ZERO_ADDRESS, // affiliate\n        false, // isAtomic (we deal with this in allowRevert)\n      ])\n    }\n\n    planner.addCommand(CommandType.LOOKS_RARE_V2, [totalValue, calldata], config.allowRevert)\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      const tokenAddress = item.apiOrder.collection\n      const tokenType =\n        item.apiOrder.collectionType == LooksRareV2Trade.ERC721_ORDER ? TokenType.ERC721 : TokenType.ERC1155\n      for (const tokenId of item.apiOrder.itemIds)\n        buyItems.push({\n          tokenAddress,\n          tokenId,\n          tokenType,\n        })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.apiOrder.price)\n    }\n    return total\n  }\n\n  private refactorAPIData(orders: LooksRareV2Data[]): {\n    takerBids: TakerOrder[]\n    makerOrders: MakerOrder[]\n    makerSignatures: string[]\n    totalValue: BigNumber\n    merkleTrees: MerkleTree[]\n  } {\n    let takerBids: TakerOrder[] = []\n    let makerOrders: MakerOrder[] = []\n    let makerSignatures: string[] = []\n    let totalValue: BigNumber = BigNumber.from(0)\n    let merkleTrees: MerkleTree[] = []\n\n    orders.forEach((order) => {\n      makerOrders.push({ ...order.apiOrder })\n\n      makerSignatures.push(order.apiOrder.signature)\n\n      takerBids.push({\n        recipient: order.taker,\n        additionalParameters: '0x',\n      })\n\n      totalValue = totalValue.add(BigNumber.from(order.apiOrder.price))\n\n      merkleTrees.push({\n        root: order.apiOrder.merkleRoot ?? '0x0000000000000000000000000000000000000000000000000000000000000000',\n        proof: order.apiOrder.merkleProof ?? [],\n      })\n    })\n\n    return { takerBids, makerOrders, makerSignatures, totalValue, merkleTrees }\n  }\n}\n","import abi from '../../../abis/NFT20.json'\nimport { Interface } from '@ethersproject/abi'\nimport { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFT20Data = {\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  tokenAmounts: BigNumberish[]\n  recipient: string\n  fee: BigNumberish\n  isV3: boolean\n  value: BigNumberish\n}\n\nexport class NFT20Trade extends NFTTrade<NFT20Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFT20Data[]) {\n    super(Market.NFT20, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFT20Trade.INTERFACE.encodeFunctionData('ethForNft', [\n        order.tokenAddress,\n        order.tokenIds,\n        order.tokenAmounts,\n        order.recipient,\n        order.fee,\n        order.isV3,\n      ])\n      planner.addCommand(CommandType.NFT20, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const pool of this.orders) {\n      for (const tokenId of pool.tokenIds) {\n        buyItems.push({\n          tokenAddress: pool.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/NFTXZap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFTXData = {\n  recipient: string\n  vaultId: BigNumberish\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  value: BigNumber\n  swapCalldata: string\n}\n\nexport class NFTXTrade extends NFTTrade<NFTXData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFTXData[]) {\n    super(Market.NFTX, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFTXTrade.INTERFACE.encodeFunctionData('buyAndRedeem', [\n        order.vaultId,\n        order.tokenIds.length,\n        order.tokenIds,\n        order.swapCalldata,\n        order.recipient,\n      ])\n\n      planner.addCommand(CommandType.NFTX, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const tokenId of order.tokenIds) {\n        buyItems.push({\n          tokenAddress: order.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import { BigNumber, BigNumberish } from 'ethers'\nimport { Interface } from '@ethersproject/abi'\nimport abi from '../../../abis/Seaport.json'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { ETH_ADDRESS } from '../../utils/constants'\n\nexport type SeaportData = {\n  items: Order[]\n  recipient: string // address\n  protocolAddress: string\n  inputTokenProcessing?: InputTokenProcessing[]\n}\n\nexport type InputTokenProcessing = {\n  token: string\n  permit2Permit?: Permit2Permit\n  protocolApproval: boolean\n  permit2TransferFrom: boolean\n}\n\nexport type FulfillmentComponent = {\n  orderIndex: BigNumberish\n  itemIndex: BigNumberish\n}\n\nexport type OfferItem = {\n  itemType: BigNumberish // enum\n  token: string // address\n  identifierOrCriteria: BigNumberish\n  startAmount: BigNumberish\n  endAmount: BigNumberish\n}\n\nexport type ConsiderationItem = OfferItem & {\n  recipient: string\n}\n\nexport type Order = {\n  parameters: OrderParameters\n  signature: string\n}\n\ntype OrderParameters = {\n  offerer: string // address,\n  offer: OfferItem[]\n  consideration: ConsiderationItem[]\n  orderType: BigNumberish // enum\n  startTime: BigNumberish\n  endTime: BigNumberish\n  zoneHash: string // bytes32\n  zone: string // address\n  salt: BigNumberish\n  conduitKey: string // bytes32,\n  totalOriginalConsiderationItems: BigNumberish\n}\n\nexport type AdvancedOrder = Order & {\n  numerator: BigNumber // uint120\n  denominator: BigNumber // uint120\n  extraData: string // bytes\n}\n\nexport class SeaportTrade extends NFTTrade<SeaportData> {\n  public static INTERFACE: Interface = new Interface(abi)\n  public static OPENSEA_CONDUIT_KEY: string = '0x0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000'\n\n  constructor(orders: SeaportData[]) {\n    super(Market.Seaport, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      let advancedOrders: AdvancedOrder[] = []\n      let orderFulfillments: FulfillmentComponent[][] = order.items.map((_, index) => [\n        { orderIndex: index, itemIndex: 0 },\n      ])\n      let considerationFulFillments: FulfillmentComponent[][] = this.getConsiderationFulfillments(order.items)\n\n      for (const item of order.items) {\n        const { advancedOrder } = this.getAdvancedOrderParams(item)\n        advancedOrders.push(advancedOrder)\n      }\n\n      let calldata: string\n      if (advancedOrders.length == 1) {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAdvancedOrder', [\n          advancedOrders[0],\n          [],\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n        ])\n      } else {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAvailableAdvancedOrders', [\n          advancedOrders,\n          [],\n          orderFulfillments,\n          considerationFulFillments,\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n          100, // TODO: look into making this a better number\n        ])\n      }\n\n      if (!!order.inputTokenProcessing) {\n        for (const inputToken of order.inputTokenProcessing)\n          encodeInputTokenOptions(planner, {\n            approval: inputToken.protocolApproval\n              ? { token: inputToken.token, protocol: order.protocolAddress }\n              : undefined,\n            permit2Permit: inputToken.permit2Permit,\n            permit2TransferFrom: inputToken.permit2TransferFrom\n              ? { token: inputToken.token, amount: this.getTotalOrderPrice(order, inputToken.token).toString() }\n              : undefined,\n          })\n      }\n\n      planner.addCommand(\n        this.commandMap(order.protocolAddress),\n        [this.getTotalOrderPrice(order, ETH_ADDRESS).toString(), calldata],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const offer of item.parameters.offer) {\n          buyItems.push({\n            tokenAddress: offer.token,\n            tokenId: offer.identifierOrCriteria,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getInputTokens(): Set<string> {\n    let inputTokens = new Set<string>()\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const consideration of item.parameters.consideration) {\n          const token = consideration.token.toLowerCase()\n          inputTokens.add(token)\n        }\n      }\n    }\n    return inputTokens\n  }\n\n  getTotalOrderPrice(order: SeaportData, token: string = ETH_ADDRESS): BigNumber {\n    let totalOrderPrice = BigNumber.from(0)\n    for (const item of order.items) {\n      totalOrderPrice = totalOrderPrice.add(this.calculateValue(item.parameters.consideration, token))\n    }\n    return totalOrderPrice\n  }\n\n  getTotalPrice(token: string = ETH_ADDRESS): BigNumber {\n    let totalPrice = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        totalPrice = totalPrice.add(this.calculateValue(item.parameters.consideration, token))\n      }\n    }\n    return totalPrice\n  }\n\n  private commandMap(protocolAddress: string): CommandType {\n    switch (protocolAddress.toLowerCase()) {\n      case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc': // Seaport v1.5\n        return CommandType.SEAPORT_V1_5\n      case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n        return CommandType.SEAPORT_V1_4\n      default:\n        throw new Error('unsupported Seaport address')\n    }\n  }\n\n  private getConsiderationFulfillments(protocolDatas: Order[]): FulfillmentComponent[][] {\n    let considerationFulfillments: FulfillmentComponent[][] = []\n    const considerationRecipients: string[] = []\n\n    for (const i in protocolDatas) {\n      const protocolData = protocolDatas[i]\n\n      for (const j in protocolData.parameters.consideration) {\n        const item = protocolData.parameters.consideration[j]\n\n        if (considerationRecipients.findIndex((x) => x === item.recipient) === -1) {\n          considerationRecipients.push(item.recipient)\n        }\n\n        const recipientIndex = considerationRecipients.findIndex((x) => x === item.recipient)\n\n        if (!considerationFulfillments[recipientIndex]) {\n          considerationFulfillments.push([\n            {\n              orderIndex: i,\n              itemIndex: j,\n            },\n          ])\n        } else {\n          considerationFulfillments[recipientIndex].push({\n            orderIndex: i,\n            itemIndex: j,\n          })\n        }\n      }\n    }\n    return considerationFulfillments\n  }\n\n  private getAdvancedOrderParams(data: Order): { advancedOrder: AdvancedOrder } {\n    const advancedOrder = {\n      parameters: data.parameters,\n      numerator: BigNumber.from('1'),\n      denominator: BigNumber.from('1'),\n      signature: data.signature,\n      extraData: '0x00',\n    }\n    return { advancedOrder }\n  }\n\n  private calculateValue(considerations: ConsiderationItem[], token: string): BigNumber {\n    return considerations.reduce(\n      (amt: BigNumber, consideration: ConsiderationItem) =>\n        consideration.token.toLowerCase() == token.toLowerCase() ? amt.add(consideration.startAmount) : amt,\n      BigNumber.from(0)\n    )\n  }\n}\n","import abi from '../../../abis/Sudoswap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype PairSwap = {\n  swapInfo: {\n    pair: string // address\n    nftIds: BigNumberish[]\n  }\n  tokenAddress: string // address\n  maxCost: BigNumberish\n}\n\nexport type SudoswapData = {\n  swaps: PairSwap[]\n  nftRecipient: string\n  ethRecipient: string\n  deadline: BigNumberish\n}\n\nexport class SudoswapTrade extends NFTTrade<SudoswapData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: SudoswapData[]) {\n    super(Market.Sudoswap, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = SudoswapTrade.INTERFACE.encodeFunctionData('robustSwapETHForSpecificNFTs', [\n        order.swaps.map((swap) => {\n          return { swapInfo: swap.swapInfo, maxCost: swap.maxCost }\n        }),\n        order.ethRecipient,\n        order.nftRecipient,\n        order.deadline,\n      ])\n      const value = order.swaps.reduce((prevVal, swap) => {\n        return prevVal.add(swap.maxCost)\n      }, BigNumber.from(0))\n      planner.addCommand(CommandType.SUDOSWAP, [value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        for (const tokenId of swap.swapInfo.nftIds) {\n          buyItems.push({\n            tokenAddress: swap.tokenAddress,\n            tokenId,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        total = total.add(swap.maxCost)\n      }\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/X2Y2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype X2Y2PartialData = {\n  signedInput: string\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n}\n\nexport type X2Y2_721_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC721\n}\n\nexport type X2Y2_1155_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC1155\n  tokenAmount: BigNumberish\n}\n\nexport type X2Y2Data = X2Y2_721_Data | X2Y2_1155_Data\n\nexport class X2Y2Trade extends NFTTrade<X2Y2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: X2Y2Data[]) {\n    super(Market.X2Y2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const functionSelector = X2Y2Trade.INTERFACE.getSighash(X2Y2Trade.INTERFACE.getFunction('run'))\n      const calldata = functionSelector + item.signedInput.slice(2)\n\n      if (item.tokenType == TokenType.ERC721) {\n        planner.addCommand(\n          CommandType.X2Y2_721,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n          config.allowRevert\n        )\n      } else if (item.tokenType == TokenType.ERC1155) {\n        planner.addCommand(\n          CommandType.X2Y2_1155,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId, item.tokenAmount],\n          config.allowRevert\n        )\n      }\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: item.tokenType,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import { MixedRouteSDK, Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount, Ether, Token, TradeType } from '@uniswap/sdk-core'\nimport { Pair, Route as V2Route } from '@uniswap/v2-sdk'\nimport { Pool, Route as V3Route, FeeAmount } from '@uniswap/v3-sdk'\nimport { BigNumber } from 'ethers'\nimport { ETH_ADDRESS, E_ETH_ADDRESS } from './constants'\n\nexport type TokenInRoute = {\n  address: string\n  chainId: number\n  symbol: string\n  decimals: string\n  name?: string\n  buyFeeBps?: string\n  sellFeeBps?: string\n}\n\nexport enum PoolType {\n  V2Pool = 'v2-pool',\n  V3Pool = 'v3-pool',\n}\n\nexport type V2Reserve = {\n  token: TokenInRoute\n  quotient: string\n}\n\nexport type V2PoolInRoute = {\n  type: PoolType.V2Pool\n  address?: string\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  reserve0: V2Reserve\n  reserve1: V2Reserve\n  amountIn?: string\n  amountOut?: string\n}\n\nexport type V3PoolInRoute = {\n  type: PoolType.V3Pool\n  address?: string\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  sqrtRatioX96: string\n  liquidity: string\n  tickCurrent: string\n  fee: string\n  amountIn?: string\n  amountOut?: string\n}\n\nexport type PartialClassicQuote = {\n  // We need tokenIn/Out to support native currency\n  tokenIn: string\n  tokenOut: string\n  tradeType: TradeType\n  route: Array<(V3PoolInRoute | V2PoolInRoute)[]>\n}\n\ninterface RouteResult {\n  routev3: V3Route<Currency, Currency> | null\n  routev2: V2Route<Currency, Currency> | null\n  mixedRoute: MixedRouteSDK<Currency, Currency> | null\n  inputAmount: CurrencyAmount<Currency>\n  outputAmount: CurrencyAmount<Currency>\n}\n\nexport const isNativeCurrency = (address: string) =>\n  address.toLowerCase() === ETH_ADDRESS.toLowerCase() || address.toLowerCase() === E_ETH_ADDRESS.toLowerCase()\n\n// Helper class to convert routing-specific quote entities to RouterTrade entities\n// the returned RouterTrade can then be used to build the UniswapTrade entity in this package\nexport class RouterTradeAdapter {\n  // Generate a RouterTrade using fields from a classic quote response\n  static fromClassicQuote(quote: PartialClassicQuote) {\n    const { route, tokenIn, tokenOut } = quote\n\n    if (!route) throw new Error('Expected route to be present')\n    if (!route.length) throw new Error('Expected there to be at least one route')\n    if (route.some((r) => !r.length)) throw new Error('Expected all routes to have at least one pool')\n    const firstRoute = route[0]\n\n    const tokenInData = firstRoute[0].tokenIn\n    const tokenOutData = firstRoute[firstRoute.length - 1].tokenOut\n\n    if (!tokenInData || !tokenOutData) throw new Error('Expected both tokenIn and tokenOut to be present')\n    if (tokenInData.chainId !== tokenOutData.chainId)\n      throw new Error('Expected tokenIn and tokenOut to be have same chainId')\n\n    const parsedCurrencyIn = RouterTradeAdapter.toCurrency(isNativeCurrency(tokenIn), tokenInData)\n    const parsedCurrencyOut = RouterTradeAdapter.toCurrency(isNativeCurrency(tokenOut), tokenOutData)\n\n    const typedRoutes: RouteResult[] = route.map((subRoute) => {\n      const rawAmountIn = subRoute[0].amountIn\n      const rawAmountOut = subRoute[subRoute.length - 1].amountOut\n\n      if (!rawAmountIn || !rawAmountOut) {\n        throw new Error('Expected both raw amountIn and raw amountOut to be present')\n      }\n\n      const inputAmount = CurrencyAmount.fromRawAmount(parsedCurrencyIn, rawAmountIn)\n      const outputAmount = CurrencyAmount.fromRawAmount(parsedCurrencyOut, rawAmountOut)\n\n      const isOnlyV2 = RouterTradeAdapter.isVersionedRoute<V2PoolInRoute>(PoolType.V2Pool, subRoute)\n      const isOnlyV3 = RouterTradeAdapter.isVersionedRoute<V3PoolInRoute>(PoolType.V3Pool, subRoute)\n\n      return {\n        routev3: isOnlyV3\n          ? new V3Route(\n              (subRoute as V3PoolInRoute[]).map(RouterTradeAdapter.toPool),\n              parsedCurrencyIn,\n              parsedCurrencyOut\n            )\n          : null,\n        routev2: isOnlyV2\n          ? new V2Route(\n              (subRoute as V2PoolInRoute[]).map(RouterTradeAdapter.toPair),\n              parsedCurrencyIn,\n              parsedCurrencyOut\n            )\n          : null,\n        mixedRoute:\n          !isOnlyV3 && !isOnlyV2\n            ? new MixedRouteSDK(subRoute.map(RouterTradeAdapter.toPoolOrPair), parsedCurrencyIn, parsedCurrencyOut)\n            : null,\n        inputAmount,\n        outputAmount,\n      }\n    })\n\n    return new RouterTrade({\n      v2Routes: typedRoutes\n        .filter((route) => route.routev2)\n        .map((route) => ({\n          routev2: route.routev2 as V2Route<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      v3Routes: typedRoutes\n        .filter((route) => route.routev3)\n        .map((route) => ({\n          routev3: route.routev3 as V3Route<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      mixedRoutes: typedRoutes\n        .filter((route) => route.mixedRoute)\n        .map((route) => ({\n          mixedRoute: route.mixedRoute as MixedRouteSDK<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      tradeType: quote.tradeType,\n    })\n  }\n\n  private static toCurrency(isNative: boolean, token: TokenInRoute): Currency {\n    if (isNative) {\n      return Ether.onChain(token.chainId)\n    }\n    return this.toToken(token)\n  }\n\n  private static toPoolOrPair = (pool: V3PoolInRoute | V2PoolInRoute): Pool | Pair => {\n    return pool.type === PoolType.V3Pool ? RouterTradeAdapter.toPool(pool) : RouterTradeAdapter.toPair(pool)\n  }\n\n  private static toToken(token: TokenInRoute): Token {\n    const { chainId, address, decimals, symbol, buyFeeBps, sellFeeBps } = token\n    return new Token(\n      chainId,\n      address,\n      parseInt(decimals.toString()),\n      symbol,\n      /* name */ undefined,\n      false,\n      buyFeeBps ? BigNumber.from(buyFeeBps) : undefined,\n      sellFeeBps ? BigNumber.from(sellFeeBps) : undefined\n    )\n  }\n\n  private static toPool({ fee, sqrtRatioX96, liquidity, tickCurrent, tokenIn, tokenOut }: V3PoolInRoute): Pool {\n    return new Pool(\n      RouterTradeAdapter.toToken(tokenIn),\n      RouterTradeAdapter.toToken(tokenOut),\n      parseInt(fee) as FeeAmount,\n      sqrtRatioX96,\n      liquidity,\n      parseInt(tickCurrent)\n    )\n  }\n\n  private static toPair = ({ reserve0, reserve1 }: V2PoolInRoute): Pair => {\n    return new Pair(\n      CurrencyAmount.fromRawAmount(RouterTradeAdapter.toToken(reserve0.token), reserve0.quotient),\n      CurrencyAmount.fromRawAmount(RouterTradeAdapter.toToken(reserve1.token), reserve1.quotient)\n    )\n  }\n\n  private static isVersionedRoute<T extends V2PoolInRoute | V3PoolInRoute>(\n    type: PoolType,\n    route: (V3PoolInRoute | V2PoolInRoute)[]\n  ): route is T[] {\n    return route.every((pool) => pool.type === type)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumberish } from 'ethers'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { ROUTER_AS_RECIPIENT, WETH_ADDRESS } from '../../utils/constants'\n\nexport class UnwrapWETH implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UnwrapWETH\n  readonly permit2Data: Permit2Permit\n  readonly wethAddress: string\n  readonly amount: BigNumberish\n\n  constructor(amount: BigNumberish, chainId: number, permit2?: Permit2Permit) {\n    this.wethAddress = WETH_ADDRESS(chainId)\n    this.amount = amount\n\n    if (!!permit2) {\n      invariant(\n        permit2.details.token.toLowerCase() === this.wethAddress.toLowerCase(),\n        `must be permitting WETH address: ${this.wethAddress}`\n      )\n      invariant(permit2.details.amount >= amount, `Did not permit enough WETH for unwrapWETH transaction`)\n      this.permit2Data = permit2\n    }\n  }\n\n  encode(planner: RoutePlanner, _: TradeConfig): void {\n    encodeInputTokenOptions(planner, {\n      permit2Permit: this.permit2Data,\n      permit2TransferFrom: {\n        token: this.wethAddress,\n        amount: this.amount.toString(),\n      },\n    })\n    planner.addCommand(CommandType.UNWRAP_WETH, [ROUTER_AS_RECIPIENT, this.amount])\n  }\n}\n"],"names":["RouterTradeType","Market","TokenType","CommandType","NFTTrade","market","orders","this","length","invariant","REVERTIBLE_COMMANDS","Set","SEAPORT_V1_5","SEAPORT_V1_4","NFTX","LOOKS_RARE_V2","X2Y2_721","X2Y2_1155","FOUNDATION","SUDOSWAP","NFT20","EXECUTE_SUB_PLAN","CRYPTOPUNKS","ELEMENT_MARKET","ABI_DEFINITION","PERMIT2_PERMIT","PERMIT2_PERMIT_BATCH","PERMIT2_TRANSFER_FROM","PERMIT2_TRANSFER_FROM_BATCH","PERMIT2_TRANSFER_FROM_STRUCT","V3_SWAP_EXACT_IN","V3_SWAP_EXACT_OUT","V2_SWAP_EXACT_IN","V2_SWAP_EXACT_OUT","WRAP_ETH","UNWRAP_WETH","SWEEP","SWEEP_ERC721","SWEEP_ERC1155","TRANSFER","PAY_PORTION","BALANCE_CHECK_ERC20","OWNER_CHECK_721","OWNER_CHECK_1155","APPROVE_ERC20","RoutePlanner","commands","inputs","_proto","addSubPlan","subplan","addCommand","type","parameters","allowRevert","command","encodedInput","defaultAbiCoder","encode","createCommand","push","has","Error","concat","toString","padStart","CHAIN_CONFIGS","router","weth","creationBlock","WETH_ADDRESS","chainId","CONTRACT_BALANCE","BigNumber","from","pow","ETH_ADDRESS","ZERO_ADDRESS","SENDER_AS_RECIPIENT","ROUTER_AS_RECIPIENT","REFUND_ETH_PRICE_IMPACT_THRESHOLD","Percent","UniswapTrade","trade","options","fee","flatFee","payerIsUser","inputRequiresWrap","useRouterBalance","planner","_config","maximumAmountIn","slippageTolerance","quotient","recipient","swapOptions","outputIsNative","outputAmount","currency","isNative","routerMustCustody","tradeType","TradeType","EXACT_INPUT","routes","swaps","swap","route","protocol","Protocol","V2","addV2Swap","V3","addV3Swap","MIXED","addMixedSwap","minimumAmountOut","feeBips","toHex","multiply","wrapped","address","EXACT_OUTPUT","sub","mul","div","feeAmount","amount","lt","priceImpact","greaterThan","safeMode","key","get","inputAmount","V2Trade","path","map","pool","V3Trade","createUncheckedTrade","encodeRouteToPath","tradeRecipient","pools","Pool","Pair","outputToken","MixedRouteTrade","amountIn","amountOut","sections","partitionMixedRouteByProtocol","isLastSectionInRoute","i","inputToken","input","section","getOutputOfPools","newRouteOriginal","MixedRouteSDK","token0","equals","token1","newRoute","MixedRoute","every","mixedRouteIsAllV3","encodeMixedRouteToPath","liquidityToken","encodePermit","permit2","signature","ethers","utils","arrayify","joinSignature","splitSignature","encodeInputTokenOptions","approval","permit2Permit","token","details","permit2TransferFrom","mapApprovalProtocol","protocolAddress","toLowerCase","SwapRouter","swapCallParameters","trades","config","Array","isArray","nftTrades","filter","_","hasOwnProperty","currentNativeValueInRouter","transactionValue","nftInputTokens","nftTrade","tradePrice","getTotalPrice","Seaport","getInputTokens","forEach","add","uniswapTrade","inputIsNative","inputTokenPermit","UnwrapWETH","encodePlan","swapNFTCallParameters","totalPrice","swapERC20CallParameters","inputCurrency","nativeCurrencyValue","deadline","deadlineOrPreviousBlockhash","undefined","calldata","INTERFACE","encodeFunctionData","value","toHexString","Interface","abi","CryptopunkTrade","_NFTTrade","Cryptopunks","_inheritsLoose","item","tokenId","getBuyItems","buyItems","tokenAddress","CRYPTOPUNK_ADDRESS","tokenType","Cryptopunk","total","FoundationTrade","Foundation","price","referrer","ERC721","LooksRareV2Trade","LooksRareV2","refactorAPIData","takerBids","makerOrders","makerSignatures","totalValue","merkleTrees","apiOrder","collection","collectionType","ERC721_ORDER","ERC1155","itemIds","order","taker","additionalParameters","root","merkleRoot","proof","merkleProof","NFT20Trade","tokenIds","tokenAmounts","isV3","NFTXTrade","vaultId","swapCalldata","SeaportTrade","advancedOrders","orderFulfillments","items","index","orderIndex","itemIndex","considerationFulFillments","getConsiderationFulfillments","getAdvancedOrderParams","advancedOrder","OPENSEA_CONDUIT_KEY","inputTokenProcessing","protocolApproval","getTotalOrderPrice","commandMap","offer","identifierOrCriteria","inputTokens","consideration","totalOrderPrice","calculateValue","protocolDatas","considerationFulfillments","considerationRecipients","protocolData","j","findIndex","x","recipientIndex","_loop","data","numerator","denominator","extraData","considerations","reduce","amt","startAmount","SudoswapTrade","Sudoswap","swapInfo","maxCost","ethRecipient","nftRecipient","prevVal","nftIds","X2Y2Trade","X2Y2","getSighash","getFunction","signedInput","slice","tokenAmount","PoolType","wethAddress","permit2Data","isNativeCurrency","RouterTradeAdapter","fromClassicQuote","quote","tokenIn","tokenOut","some","r","firstRoute","tokenInData","tokenOutData","parsedCurrencyIn","toCurrency","parsedCurrencyOut","typedRoutes","subRoute","rawAmountIn","rawAmountOut","CurrencyAmount","fromRawAmount","isOnlyV2","isVersionedRoute","V2Pool","isOnlyV3","V3Pool","routev3","V3Route","toPool","routev2","V2Route","toPair","mixedRoute","toPoolOrPair","RouterTrade","v2Routes","v3Routes","mixedRoutes","Ether","onChain","toToken","symbol","buyFeeBps","sellFeeBps","Token","parseInt","decimals","sqrtRatioX96","liquidity","tickCurrent","reserve0","reserve1"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"universal-router-sdk.cjs.production.min.js","sources":["../src/entities/Command.ts","../src/entities/NFTTrade.ts","../src/utils/routerCommands.ts","../src/utils/constants.ts","../src/entities/protocols/uniswap.ts","../src/utils/numbers.ts","../src/utils/inputTokens.ts","../src/swapRouter.ts","../src/entities/protocols/cryptopunk.ts","../src/entities/protocols/foundation.ts","../src/entities/protocols/looksRareV2.ts","../src/entities/protocols/nft20.ts","../src/entities/protocols/nftx.ts","../src/entities/protocols/seaport.ts","../src/entities/protocols/sudoswap.ts","../src/entities/protocols/x2y2.ts","../src/utils/routerTradeAdapter.ts","../src/entities/protocols/unwrapWETH.ts"],"sourcesContent":["import { RoutePlanner } from '../utils/routerCommands'\n\nexport type TradeConfig = {\n  allowRevert: boolean\n}\n\nexport enum RouterTradeType {\n  UniswapTrade = 'UniswapTrade',\n  NFTTrade = 'NFTTrade',\n  UnwrapWETH = 'UnwrapWETH',\n}\n\n// interface for entities that can be encoded as a Universal Router command\nexport interface Command {\n  tradeType: RouterTradeType\n  encode(planner: RoutePlanner, config: TradeConfig): void\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { SeaportData } from './protocols/seaport'\nimport { FoundationData } from './protocols/foundation'\nimport { NFTXData } from './protocols/nftx'\nimport { NFT20Data } from './protocols/nft20'\nimport { RoutePlanner } from '../utils/routerCommands'\nimport { Command, RouterTradeType, TradeConfig } from './Command'\nimport { SudoswapData } from './protocols/sudoswap'\nimport { CryptopunkData } from './protocols/cryptopunk'\nimport { X2Y2Data } from './protocols/x2y2'\nimport { ElementData } from './protocols/element-market'\nimport { LooksRareV2Data } from './protocols/looksRareV2'\n\nexport type SupportedProtocolsData =\n  | SeaportData\n  | FoundationData\n  | NFTXData\n  | LooksRareV2Data\n  | X2Y2Data\n  | CryptopunkData\n  | NFT20Data\n  | SudoswapData\n  | ElementData\n\nexport abstract class NFTTrade<T> implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.NFTTrade\n  readonly orders: T[]\n  readonly market: Market\n\n  constructor(market: Market, orders: T[]) {\n    invariant(orders.length > 0, 'no buy Items')\n    this.market = market\n    this.orders = orders\n  }\n\n  abstract encode(planner: RoutePlanner, config: TradeConfig): void\n\n  abstract getBuyItems(): BuyItem[]\n\n  // optional parameter for the markets that accept ERC20s not just ETH\n  abstract getTotalPrice(token?: string): BigNumber\n}\n\nexport type BuyItem = {\n  tokenAddress: string\n  tokenId: BigNumberish\n  tokenType: TokenType\n  amount?: BigNumberish // for 1155\n}\n\nexport enum Market {\n  Foundation = 'foundation',\n  LooksRareV2 = 'looksrareV2',\n  NFT20 = 'nft20',\n  NFTX = 'nftx',\n  Seaport = 'seaport',\n  Sudoswap = 'Sudoswap',\n  Cryptopunks = 'cryptopunks',\n  X2Y2 = 'x2y2',\n  Element = 'element',\n}\n\nexport enum TokenType {\n  ERC721 = 'ERC721',\n  ERC1155 = 'ERC1155',\n  Cryptopunk = 'Cryptopunk',\n}\n","import { defaultAbiCoder } from 'ethers/lib/utils'\n\n/**\n * CommandTypes\n * @description Flags that modify a command's execution\n * @enum {number}\n */\nexport enum CommandType {\n  V3_SWAP_EXACT_IN = 0x00,\n  V3_SWAP_EXACT_OUT = 0x01,\n  PERMIT2_TRANSFER_FROM = 0x02,\n  PERMIT2_PERMIT_BATCH = 0x03,\n  SWEEP = 0x04,\n  TRANSFER = 0x05,\n  PAY_PORTION = 0x06,\n\n  V2_SWAP_EXACT_IN = 0x08,\n  V2_SWAP_EXACT_OUT = 0x09,\n  PERMIT2_PERMIT = 0x0a,\n  WRAP_ETH = 0x0b,\n  UNWRAP_WETH = 0x0c,\n  PERMIT2_TRANSFER_FROM_BATCH = 0x0d,\n  BALANCE_CHECK_ERC20 = 0x0e,\n\n  // NFT-related command types\n  SEAPORT_V1_5 = 0x10,\n  LOOKS_RARE_V2 = 0x11,\n  NFTX = 0x12,\n  CRYPTOPUNKS = 0x13,\n  // 0x14\n  OWNER_CHECK_721 = 0x15,\n  OWNER_CHECK_1155 = 0x16,\n  SWEEP_ERC721 = 0x17,\n\n  X2Y2_721 = 0x18,\n  SUDOSWAP = 0x19,\n  NFT20 = 0x1a,\n  X2Y2_1155 = 0x1b,\n  FOUNDATION = 0x1c,\n  SWEEP_ERC1155 = 0x1d,\n  ELEMENT_MARKET = 0x1e,\n\n  SEAPORT_V1_4 = 0x20,\n  EXECUTE_SUB_PLAN = 0x21,\n  APPROVE_ERC20 = 0x22,\n}\n\nconst ALLOW_REVERT_FLAG = 0x80\n\nconst REVERTIBLE_COMMANDS = new Set<CommandType>([\n  CommandType.SEAPORT_V1_5,\n  CommandType.SEAPORT_V1_4,\n  CommandType.NFTX,\n  CommandType.LOOKS_RARE_V2,\n  CommandType.X2Y2_721,\n  CommandType.X2Y2_1155,\n  CommandType.FOUNDATION,\n  CommandType.SUDOSWAP,\n  CommandType.NFT20,\n  CommandType.EXECUTE_SUB_PLAN,\n  CommandType.CRYPTOPUNKS,\n  CommandType.ELEMENT_MARKET,\n])\n\nconst PERMIT_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce) details,address spender,uint256 sigDeadline)'\n\nconst PERMIT_BATCH_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce)[] details,address spender,uint256 sigDeadline)'\n\nconst PERMIT2_TRANSFER_FROM_STRUCT = '(address from,address to,uint160 amount,address token)'\nconst PERMIT2_TRANSFER_FROM_BATCH_STRUCT = PERMIT2_TRANSFER_FROM_STRUCT + '[]'\n\nconst ABI_DEFINITION: { [key in CommandType]: string[] } = {\n  // Batch Reverts\n  [CommandType.EXECUTE_SUB_PLAN]: ['bytes', 'bytes[]'],\n\n  // Permit2 Actions\n  [CommandType.PERMIT2_PERMIT]: [PERMIT_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_PERMIT_BATCH]: [PERMIT_BATCH_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_TRANSFER_FROM]: ['address', 'address', 'uint160'],\n  [CommandType.PERMIT2_TRANSFER_FROM_BATCH]: [PERMIT2_TRANSFER_FROM_BATCH_STRUCT],\n\n  // Uniswap Actions\n  [CommandType.V3_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V3_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V2_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n  [CommandType.V2_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n\n  // Token Actions and Checks\n  [CommandType.WRAP_ETH]: ['address', 'uint256'],\n  [CommandType.UNWRAP_WETH]: ['address', 'uint256'],\n  [CommandType.SWEEP]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC721]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.TRANSFER]: ['address', 'address', 'uint256'],\n  [CommandType.PAY_PORTION]: ['address', 'address', 'uint256'],\n  [CommandType.BALANCE_CHECK_ERC20]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_721]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.APPROVE_ERC20]: ['address', 'uint256'],\n\n  // NFT Markets\n  [CommandType.SEAPORT_V1_5]: ['uint256', 'bytes'],\n  [CommandType.SEAPORT_V1_4]: ['uint256', 'bytes'],\n  [CommandType.NFTX]: ['uint256', 'bytes'],\n  [CommandType.LOOKS_RARE_V2]: ['uint256', 'bytes'],\n  [CommandType.X2Y2_721]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.X2Y2_1155]: ['uint256', 'bytes', 'address', 'address', 'uint256', 'uint256'],\n  [CommandType.FOUNDATION]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.SUDOSWAP]: ['uint256', 'bytes'],\n  [CommandType.NFT20]: ['uint256', 'bytes'],\n  [CommandType.CRYPTOPUNKS]: ['uint256', 'address', 'uint256'],\n  [CommandType.ELEMENT_MARKET]: ['uint256', 'bytes'],\n}\n\nexport class RoutePlanner {\n  commands: string\n  inputs: string[]\n\n  constructor() {\n    this.commands = '0x'\n    this.inputs = []\n  }\n\n  addSubPlan(subplan: RoutePlanner): void {\n    this.addCommand(CommandType.EXECUTE_SUB_PLAN, [subplan.commands, subplan.inputs], true)\n  }\n\n  addCommand(type: CommandType, parameters: any[], allowRevert = false): void {\n    let command = createCommand(type, parameters)\n    this.inputs.push(command.encodedInput)\n    if (allowRevert) {\n      if (!REVERTIBLE_COMMANDS.has(command.type)) {\n        throw new Error(`command type: ${command.type} cannot be allowed to revert`)\n      }\n      command.type = command.type | ALLOW_REVERT_FLAG\n    }\n\n    this.commands = this.commands.concat(command.type.toString(16).padStart(2, '0'))\n  }\n}\n\nexport type RouterCommand = {\n  type: CommandType\n  encodedInput: string\n}\n\nexport function createCommand(type: CommandType, parameters: any[]): RouterCommand {\n  const encodedInput = defaultAbiCoder.encode(ABI_DEFINITION[type], parameters)\n  return { type, encodedInput }\n}\n","import { BigNumber } from 'ethers'\n\ntype ChainConfig = {\n  router: string\n  creationBlock: number\n  weth: string\n}\n\nconst WETH_NOT_SUPPORTED_ON_CHAIN = '0x0000000000000000000000000000000000000000'\n\nconst CHAIN_CONFIGS: { [key: number]: ChainConfig } = {\n  // mainnet\n  [1]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    creationBlock: 17143817,\n  },\n  // goerli\n  [5]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6',\n    creationBlock: 8940568,\n  },\n  // sepolia\n  [11155111]: {\n    router: '0x1678413030D5f7719e17Ba37e77134268f9b8193',\n    weth: '0xb16F35c0Ae2912430DAc15764477E179D9B9EbEa',\n    creationBlock: 3543575,\n  },\n  // polygon\n  [137]: {\n    router: '0xec7BE89e9d109e7e3Fec59c222CF297125FEFda2',\n    weth: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    creationBlock: 52210153,\n  },\n  //polygon mumbai\n  [80001]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',\n    creationBlock: 35176052,\n  },\n  //optimism\n  [10]: {\n    router: '0xCb1355ff08Ab38bBCE60111F1bb2B784bE25D7e8',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 114702266,\n  },\n  // optimism goerli\n  [420]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 8887728,\n  },\n  // arbitrum\n  [42161]: {\n    router: '0x5E325eDA8064b456f4781070C0738d849c824258',\n    weth: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n    creationBlock: 169472836,\n  },\n  // arbitrum goerli\n  [421613]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3',\n    creationBlock: 18815277,\n  },\n  // celo\n  [42220]: {\n    router: '0x643770e279d5d0733f21d6dc03a8efbabf3255b4',\n    weth: WETH_NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 21407637,\n  },\n  // celo alfajores\n  [44787]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: WETH_NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 17566658,\n  },\n  // binance smart chain\n  [56]: {\n    router: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',\n    weth: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    creationBlock: 35160263,\n  },\n  // avalanche\n  [43114]: {\n    router: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',\n    weth: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    creationBlock: 40237257,\n  },\n  // base goerli\n  [84531]: {\n    router: '0xd0872d928672ae2ff74bdb2f5130ac12229cafaf',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 6915289,\n  },\n  // base mainnet\n  [8453]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 9107268,\n  },\n  [81457]: {\n    router: '0x643770E279d5D0733F21d6DC03A8efbABf3255B4',\n    weth: '0x4300000000000000000000000000000000000004',\n    creationBlock: 1116444,\n  },\n}\n\nexport const UNIVERSAL_ROUTER_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].router\n}\n\nexport const UNIVERSAL_ROUTER_CREATION_BLOCK = (chainId: number): number => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].creationBlock\n}\n\nexport const WETH_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n\n  if (CHAIN_CONFIGS[chainId].weth == WETH_NOT_SUPPORTED_ON_CHAIN) throw new Error(`Chain ${chainId} does not have WETH`)\n\n  return CHAIN_CONFIGS[chainId].weth\n}\n\nexport const PERMIT2_ADDRESS = '0x000000000022D473030F116dDEE9F6B43aC78BA3'\n\nexport const CONTRACT_BALANCE = BigNumber.from(2).pow(255)\nexport const ETH_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const E_ETH_ADDRESS = '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee'\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const MAX_UINT256 = BigNumber.from(2).pow(256).sub(1)\nexport const MAX_UINT160 = BigNumber.from(2).pow(160).sub(1)\n\nexport const SENDER_AS_RECIPIENT = '0x0000000000000000000000000000000000000001'\nexport const ROUTER_AS_RECIPIENT = '0x0000000000000000000000000000000000000002'\n\nexport const OPENSEA_CONDUIT_SPENDER_ID = 0\nexport const SUDOSWAP_SPENDER_ID = 1\n","import { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { Trade as V2Trade, Pair } from '@uniswap/v2-sdk'\nimport { Trade as V3Trade, Pool, encodeRouteToPath } from '@uniswap/v3-sdk'\nimport {\n  Trade as RouterTrade,\n  MixedRouteTrade,\n  Protocol,\n  IRoute,\n  RouteV2,\n  RouteV3,\n  MixedRouteSDK,\n  MixedRoute,\n  SwapOptions as RouterSwapOptions,\n  getOutputOfPools,\n  encodeMixedRouteToPath,\n  partitionMixedRouteByProtocol,\n} from '@uniswap/router-sdk'\nimport { Permit2Permit } from '../../utils/inputTokens'\nimport { Currency, TradeType, CurrencyAmount, Percent } from '@uniswap/sdk-core'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { SENDER_AS_RECIPIENT, ROUTER_AS_RECIPIENT, CONTRACT_BALANCE, ETH_ADDRESS } from '../../utils/constants'\nimport { encodeFeeBips } from '../../utils/numbers'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type FlatFeeOptions = {\n  amount: BigNumberish\n  recipient: string\n}\n\n// the existing router permit object doesn't include enough data for permit2\n// so we extend swap options with the permit2 permit\n// when safe mode is enabled, the SDK will add an extra ETH sweep for security\n// when useRouterBalance is enabled the SDK will use the balance in the router for the swap\nexport type SwapOptions = Omit<RouterSwapOptions, 'inputTokenPermit'> & {\n  useRouterBalance?: boolean\n  inputTokenPermit?: Permit2Permit\n  flatFee?: FlatFeeOptions\n  safeMode?: boolean\n}\n\nconst REFUND_ETH_PRICE_IMPACT_THRESHOLD = new Percent(50, 100)\n\ninterface Swap<TInput extends Currency, TOutput extends Currency> {\n  route: IRoute<TInput, TOutput, Pair | Pool>\n  inputAmount: CurrencyAmount<TInput>\n  outputAmount: CurrencyAmount<TOutput>\n}\n\n// Wrapper for uniswap router-sdk trade entity to encode swaps for Universal Router\n// also translates trade objects from previous (v2, v3) SDKs\nexport class UniswapTrade implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UniswapTrade\n  readonly payerIsUser: boolean\n\n  constructor(public trade: RouterTrade<Currency, Currency, TradeType>, public options: SwapOptions) {\n    if (!!options.fee && !!options.flatFee) throw new Error('Only one fee option permitted')\n\n    if (this.inputRequiresWrap) this.payerIsUser = false\n    else if (this.options.useRouterBalance) this.payerIsUser = false\n    else this.payerIsUser = true\n  }\n\n  get inputRequiresWrap(): boolean {\n    return this.trade.inputAmount.currency.isNative\n  }\n\n  encode(planner: RoutePlanner, _config: TradeConfig): void {\n    // If the input currency is the native currency, we need to wrap it with the router as the recipient\n    if (this.inputRequiresWrap) {\n      // TODO: optimize if only one v2 pool we can directly send this to the pool\n      planner.addCommand(CommandType.WRAP_ETH, [\n        ROUTER_AS_RECIPIENT,\n        this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString(),\n      ])\n    }\n    // The overall recipient at the end of the trade, SENDER_AS_RECIPIENT uses the msg.sender\n    this.options.recipient = this.options.recipient ?? SENDER_AS_RECIPIENT\n\n    // flag for whether we want to perform slippage check on aggregate output of multiple routes\n    //   1. when there are >2 exact input trades. this is only a heuristic,\n    //      as it's still more gas-expensive even in this case, but has benefits\n    //      in that the reversion probability is lower\n    const performAggregatedSlippageCheck =\n      this.trade.tradeType === TradeType.EXACT_INPUT && this.trade.routes.length > 2\n    const outputIsNative = this.trade.outputAmount.currency.isNative\n    const routerMustCustody = performAggregatedSlippageCheck || outputIsNative || hasFeeOption(this.options)\n\n    for (const swap of this.trade.swaps) {\n      switch (swap.route.protocol) {\n        case Protocol.V2:\n          addV2Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        case Protocol.V3:\n          addV3Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        case Protocol.MIXED:\n          addMixedSwap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        default:\n          throw new Error('UNSUPPORTED_TRADE_PROTOCOL')\n      }\n    }\n\n    let minimumAmountOut: BigNumber = BigNumber.from(\n      this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString()\n    )\n\n    // The router custodies for 3 reasons: to unwrap, to take a fee, and/or to do a slippage check\n    if (routerMustCustody) {\n      // If there is a fee, that percentage is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.fee) {\n        const feeBips = encodeFeeBips(this.options.fee.fee)\n        planner.addCommand(CommandType.PAY_PORTION, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.fee.recipient,\n          feeBips,\n        ])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(minimumAmountOut.mul(feeBips).div(10000))\n        }\n      }\n\n      // If there is a flat fee, that absolute amount is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.flatFee) {\n        const feeAmount = this.options.flatFee.amount\n        if (minimumAmountOut.lt(feeAmount)) throw new Error('Flat fee amount greater than minimumAmountOut')\n\n        planner.addCommand(CommandType.TRANSFER, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.flatFee.recipient,\n          feeAmount,\n        ])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(feeAmount)\n        }\n      }\n\n      // The remaining tokens that need to be sent to the user after the fee is taken will be caught\n      // by this if-else clause.\n      if (outputIsNative) {\n        planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, minimumAmountOut])\n      } else {\n        planner.addCommand(CommandType.SWEEP, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.recipient,\n          minimumAmountOut,\n        ])\n      }\n    }\n\n    if (this.inputRequiresWrap && (this.trade.tradeType === TradeType.EXACT_OUTPUT || riskOfPartialFill(this.trade))) {\n      // for exactOutput swaps that take native currency as input\n      // we need to send back the change to the user\n      planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, 0])\n    }\n\n    if (this.options.safeMode) planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, this.options.recipient, 0])\n  }\n}\n\n// encode a uniswap v2 swap\nfunction addV2Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = new V2Trade(\n    route as RouteV2<TInput, TOutput>,\n    tradeType == TradeType.EXACT_INPUT ? inputAmount : outputAmount,\n    tradeType\n  )\n\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n      // if native, we have to unwrap so keep in the router for now\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a uniswap v3 swap\nfunction addV3Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = V3Trade.createUncheckedTrade({\n    route: route as RouteV3<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const path = encodeRouteToPath(route as RouteV3<TInput, TOutput>, trade.tradeType === TradeType.EXACT_OUTPUT)\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a mixed route swap, i.e. including both v2 and v3 pools\nfunction addMixedSwap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  swap: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const { route, inputAmount, outputAmount } = swap\n  const tradeRecipient = routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient\n\n  // single hop, so it can be reduced to plain v2 or v3 swap logic\n  if (route.pools.length === 1) {\n    if (route.pools[0] instanceof Pool) {\n      return addV3Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else if (route.pools[0] instanceof Pair) {\n      return addV2Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else {\n      throw new Error('Invalid route type')\n    }\n  }\n\n  const trade = MixedRouteTrade.createUncheckedTrade({\n    route: route as MixedRoute<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const amountIn = trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient.toString()\n  const amountOut = trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient.toString()\n\n  // logic from\n  // https://github.com/Uniswap/router-sdk/blob/d8eed164e6c79519983844ca8b6a3fc24ebcb8f8/src/swapRouter.ts#L276\n  const sections = partitionMixedRouteByProtocol(route as MixedRoute<TInput, TOutput>)\n  const isLastSectionInRoute = (i: number) => {\n    return i === sections.length - 1\n  }\n\n  let outputToken\n  let inputToken = route.input.wrapped\n\n  for (let i = 0; i < sections.length; i++) {\n    const section = sections[i]\n    /// Now, we get output of this section\n    outputToken = getOutputOfPools(section, inputToken)\n\n    const newRouteOriginal = new MixedRouteSDK(\n      [...section],\n      section[0].token0.equals(inputToken) ? section[0].token0 : section[0].token1,\n      outputToken\n    )\n    const newRoute = new MixedRoute(newRouteOriginal)\n\n    /// Previous output is now input\n    inputToken = outputToken\n\n    const mixedRouteIsAllV3 = (route: MixedRouteSDK<Currency, Currency>) => {\n      return route.pools.every((pool) => pool instanceof Pool)\n    }\n\n    if (mixedRouteIsAllV3(newRoute)) {\n      const path: string = encodeMixedRouteToPath(newRoute)\n\n      planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n        // if not last section: send tokens directly to the first v2 pair of the next section\n        // note: because of the partitioning function we can be sure that the next section is v2\n        isLastSectionInRoute(i) ? tradeRecipient : (sections[i + 1][0] as Pair).liquidityToken.address,\n        i == 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOut\n        path, // path\n        payerIsUser && i === 0, // payerIsUser\n      ])\n    } else {\n      planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n        isLastSectionInRoute(i) ? tradeRecipient : ROUTER_AS_RECIPIENT, // recipient\n        i === 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOutMin\n        newRoute.path.map((pool) => pool.address), // path\n        payerIsUser && i === 0,\n      ])\n    }\n  }\n}\n\n// if price impact is very high, there's a chance of hitting max/min prices resulting in a partial fill of the swap\nfunction riskOfPartialFill(trade: RouterTrade<Currency, Currency, TradeType>): boolean {\n  return trade.priceImpact.greaterThan(REFUND_ETH_PRICE_IMPACT_THRESHOLD)\n}\n\nfunction hasFeeOption(swapOptions: SwapOptions): boolean {\n  return !!swapOptions.fee || !!swapOptions.flatFee\n}\n","import { BigNumber } from 'ethers'\nimport JSBI from 'jsbi'\nimport bn from 'bignumber.js'\nimport { Percent } from '@uniswap/sdk-core'\nimport { toHex } from '@uniswap/v3-sdk'\n\nexport function expandTo18DecimalsBN(n: number): BigNumber {\n  // use bn intermediately to allow decimals in intermediate calculations\n  return BigNumber.from(new bn(n).times(new bn(10).pow(18)).toFixed())\n}\n\nexport function expandTo18Decimals(n: number): JSBI {\n  return JSBI.BigInt(BigNumber.from(n).mul(BigNumber.from(10).pow(18)).toString())\n}\n\nexport function encodeFeeBips(fee: Percent): string {\n  return toHex(fee.multiply(10_000).quotient)\n}\n","import invariant from 'tiny-invariant'\nimport { ethers } from 'ethers'\nimport { PermitSingle } from '@uniswap/permit2-sdk'\nimport { CommandType, RoutePlanner } from './routerCommands'\nimport { OPENSEA_CONDUIT_SPENDER_ID, ROUTER_AS_RECIPIENT, SUDOSWAP_SPENDER_ID } from './constants'\n\nexport interface Permit2Permit extends PermitSingle {\n  signature: string\n}\n\nexport type ApproveProtocol = {\n  token: string\n  protocol: string\n}\n\nexport type Permit2TransferFrom = {\n  token: string\n  amount: string\n  recipient?: string\n}\n\nexport type InputTokenOptions = {\n  approval?: ApproveProtocol\n  permit2Permit?: Permit2Permit\n  permit2TransferFrom?: Permit2TransferFrom\n}\n\nconst SIGNATURE_LENGTH = 65\nconst EIP_2098_SIGNATURE_LENGTH = 64\n\nexport function encodePermit(planner: RoutePlanner, permit2: Permit2Permit): void {\n  let signature = permit2.signature\n\n  const length = ethers.utils.arrayify(permit2.signature).length\n  // signature data provided for EIP-1271 may have length different from ECDSA signature\n  if (length === SIGNATURE_LENGTH || length === EIP_2098_SIGNATURE_LENGTH) {\n    // sanitizes signature to cover edge cases of malformed EIP-2098 sigs and v used as recovery id\n    signature = ethers.utils.joinSignature(ethers.utils.splitSignature(permit2.signature))\n  }\n\n  planner.addCommand(CommandType.PERMIT2_PERMIT, [permit2, signature])\n}\n\n// Handles the encoding of commands needed to gather input tokens for a trade\n// Approval: The router approving another address to take tokens.\n//   note: Only seaport and sudoswap support this action. Approvals are left open.\n// Permit: A Permit2 signature-based Permit to allow the router to access a user's tokens\n// Transfer: A Permit2 TransferFrom of tokens from a user to either the router or another address\nexport function encodeInputTokenOptions(planner: RoutePlanner, options: InputTokenOptions) {\n  // first ensure that all tokens provided for encoding are the same\n  if (!!options.approval && !!options.permit2Permit)\n    invariant(options.approval.token === options.permit2Permit.details.token, `inconsistent token`)\n  if (!!options.approval && !!options.permit2TransferFrom)\n    invariant(options.approval.token === options.permit2TransferFrom.token, `inconsistent token`)\n  if (!!options.permit2TransferFrom && !!options.permit2Permit)\n    invariant(options.permit2TransferFrom.token === options.permit2Permit.details.token, `inconsistent token`)\n\n  // if an options.approval is required, add it\n  if (!!options.approval) {\n    planner.addCommand(CommandType.APPROVE_ERC20, [\n      options.approval.token,\n      mapApprovalProtocol(options.approval.protocol),\n    ])\n  }\n\n  // if this order has a options.permit2Permit, encode it\n  if (!!options.permit2Permit) {\n    encodePermit(planner, options.permit2Permit)\n  }\n\n  if (!!options.permit2TransferFrom) {\n    planner.addCommand(CommandType.PERMIT2_TRANSFER_FROM, [\n      options.permit2TransferFrom.token,\n      options.permit2TransferFrom.recipient ? options.permit2TransferFrom.recipient : ROUTER_AS_RECIPIENT,\n      options.permit2TransferFrom.amount,\n    ])\n  }\n}\n\nfunction mapApprovalProtocol(protocolAddress: string): number {\n  switch (protocolAddress.toLowerCase()) {\n    case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc': // Seaport v1.5\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x2b2e8cda09bba9660dca5cb6233787738ad68329': // Sudoswap\n      return SUDOSWAP_SPENDER_ID\n    default:\n      throw new Error('unsupported protocol address')\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { abi } from '@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { MethodParameters } from '@uniswap/v3-sdk'\nimport { Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, TradeType } from '@uniswap/sdk-core'\nimport { Command, RouterTradeType } from './entities/Command'\nimport { Market, NFTTrade, SupportedProtocolsData } from './entities/NFTTrade'\nimport { UniswapTrade, SwapOptions } from './entities/protocols/uniswap'\nimport { UnwrapWETH } from './entities/protocols/unwrapWETH'\nimport { CommandType, RoutePlanner } from './utils/routerCommands'\nimport { encodePermit } from './utils/inputTokens'\nimport { ROUTER_AS_RECIPIENT, SENDER_AS_RECIPIENT, ETH_ADDRESS } from './utils/constants'\nimport { SeaportTrade } from './entities'\n\nexport type SwapRouterConfig = {\n  sender?: string // address\n  deadline?: BigNumberish\n}\n\ntype SupportedNFTTrade = NFTTrade<SupportedProtocolsData>\n\nexport abstract class SwapRouter {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  public static swapCallParameters(trades: Command[] | Command, config: SwapRouterConfig = {}): MethodParameters {\n    if (!Array.isArray(trades)) trades = [trades]\n\n    const nftTrades = trades.filter((trade, _, []) => trade.hasOwnProperty('market')) as SupportedNFTTrade[]\n    const allowRevert = nftTrades.length == 1 && nftTrades[0].orders.length == 1 ? false : true\n    const planner = new RoutePlanner()\n\n    // track value flow to require the right amount of native value\n    let currentNativeValueInRouter = BigNumber.from(0)\n    let transactionValue = BigNumber.from(0)\n\n    // tracks the input tokens (and ETH) used to buy NFTs to allow us to sweep\n    let nftInputTokens = new Set<string>()\n\n    for (const trade of trades) {\n      /**\n       * is NFTTrade\n       */\n      if (trade.tradeType == RouterTradeType.NFTTrade) {\n        const nftTrade = trade as SupportedNFTTrade\n        nftTrade.encode(planner, { allowRevert })\n        const tradePrice = nftTrade.getTotalPrice()\n\n        if (nftTrade.market == Market.Seaport) {\n          const seaportTrade = nftTrade as SeaportTrade\n          const seaportInputTokens = seaportTrade.getInputTokens()\n          seaportInputTokens.forEach((inputToken) => {\n            nftInputTokens.add(inputToken)\n          })\n        } else {\n          nftInputTokens.add(ETH_ADDRESS)\n        }\n\n        // send enough native value to contract for NFT purchase\n        if (currentNativeValueInRouter.lt(tradePrice)) {\n          transactionValue = transactionValue.add(tradePrice.sub(currentNativeValueInRouter))\n          currentNativeValueInRouter = BigNumber.from(0)\n        } else {\n          currentNativeValueInRouter = currentNativeValueInRouter.sub(tradePrice)\n        }\n        /**\n         * is UniswapTrade\n         */\n      } else if (trade.tradeType == RouterTradeType.UniswapTrade) {\n        const uniswapTrade = trade as UniswapTrade\n        const inputIsNative = uniswapTrade.trade.inputAmount.currency.isNative\n        const outputIsNative = uniswapTrade.trade.outputAmount.currency.isNative\n        const swapOptions = uniswapTrade.options\n\n        invariant(!(inputIsNative && !!swapOptions.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n        if (!!swapOptions.inputTokenPermit) {\n          encodePermit(planner, swapOptions.inputTokenPermit)\n        }\n\n        if (inputIsNative) {\n          transactionValue = transactionValue.add(\n            BigNumber.from(uniswapTrade.trade.maximumAmountIn(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        // track amount of native currency in the router\n        if (outputIsNative && swapOptions.recipient == ROUTER_AS_RECIPIENT) {\n          currentNativeValueInRouter = currentNativeValueInRouter.add(\n            BigNumber.from(uniswapTrade.trade.minimumAmountOut(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        uniswapTrade.encode(planner, { allowRevert: false })\n        /**\n         * is UnwrapWETH\n         */\n      } else if (trade.tradeType == RouterTradeType.UnwrapWETH) {\n        const UnwrapWETH = trade as UnwrapWETH\n        trade.encode(planner, { allowRevert: false })\n        currentNativeValueInRouter = currentNativeValueInRouter.add(UnwrapWETH.amount)\n        /**\n         * else\n         */\n      } else {\n        throw 'trade must be of instance: UniswapTrade or NFTTrade'\n      }\n    }\n\n    // TODO: matches current logic for now, but should eventually only sweep for multiple NFT trades\n    // or NFT trades with potential slippage (i.e. sudo).\n    // Note: NFTXV2 sends excess ETH to the caller (router), not the specified recipient\n    nftInputTokens.forEach((inputToken) => {\n      planner.addCommand(CommandType.SWEEP, [inputToken, SENDER_AS_RECIPIENT, 0])\n    })\n    return SwapRouter.encodePlan(planner, transactionValue, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * This version does not work correctly for Seaport ERC20->NFT purchases\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given swap.\n   * @param trades to produce call parameters for\n   */\n  public static swapNFTCallParameters(trades: SupportedNFTTrade[], config: SwapRouterConfig = {}): MethodParameters {\n    let planner = new RoutePlanner()\n    let totalPrice = BigNumber.from(0)\n\n    const allowRevert = trades.length == 1 && trades[0].orders.length == 1 ? false : true\n\n    for (const trade of trades) {\n      trade.encode(planner, { allowRevert })\n      totalPrice = totalPrice.add(trade.getTotalPrice())\n    }\n\n    planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, SENDER_AS_RECIPIENT, 0])\n    return SwapRouter.encodePlan(planner, totalPrice, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trades to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapERC20CallParameters(\n    trades: RouterTrade<Currency, Currency, TradeType>,\n    options: SwapOptions\n  ): MethodParameters {\n    // TODO: use permit if signature included in swapOptions\n    const planner = new RoutePlanner()\n\n    const trade: UniswapTrade = new UniswapTrade(trades, options)\n\n    const inputCurrency = trade.trade.inputAmount.currency\n    invariant(!(inputCurrency.isNative && !!options.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n    if (options.inputTokenPermit) {\n      encodePermit(planner, options.inputTokenPermit)\n    }\n\n    const nativeCurrencyValue = inputCurrency.isNative\n      ? BigNumber.from(trade.trade.maximumAmountIn(options.slippageTolerance).quotient.toString())\n      : BigNumber.from(0)\n\n    trade.encode(planner, { allowRevert: false })\n    return SwapRouter.encodePlan(planner, nativeCurrencyValue, {\n      deadline: options.deadlineOrPreviousBlockhash ? BigNumber.from(options.deadlineOrPreviousBlockhash) : undefined,\n    })\n  }\n\n  /**\n   * Encodes a planned route into a method name and parameters for the Router contract.\n   * @param planner the planned route\n   * @param nativeCurrencyValue the native currency value of the planned route\n   * @param config the router config\n   */\n  private static encodePlan(\n    planner: RoutePlanner,\n    nativeCurrencyValue: BigNumber,\n    config: SwapRouterConfig = {}\n  ): MethodParameters {\n    const { commands, inputs } = planner\n    const functionSignature = !!config.deadline ? 'execute(bytes,bytes[],uint256)' : 'execute(bytes,bytes[])'\n    const parameters = !!config.deadline ? [commands, inputs, config.deadline] : [commands, inputs]\n    const calldata = SwapRouter.INTERFACE.encodeFunctionData(functionSignature, parameters)\n    return { calldata, value: nativeCurrencyValue.toHexString() }\n  }\n}\n","import { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type CryptopunkData = {\n  tokenId: BigNumberish\n  recipient: string\n  value: BigNumberish\n}\n\nexport class CryptopunkTrade extends NFTTrade<CryptopunkData> {\n  public static CRYPTOPUNK_ADDRESS: string = '0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb'\n\n  constructor(orders: CryptopunkData[]) {\n    super(Market.Cryptopunks, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      planner.addCommand(CommandType.CRYPTOPUNKS, [item.tokenId, item.recipient, item.value], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: CryptopunkTrade.CRYPTOPUNK_ADDRESS,\n        tokenId: item.tokenId,\n        tokenType: TokenType.Cryptopunk,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/Foundation.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type FoundationData = {\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n  referrer: string // address\n}\n\nexport class FoundationTrade extends NFTTrade<FoundationData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: FoundationData[]) {\n    super(Market.Foundation, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const calldata = FoundationTrade.INTERFACE.encodeFunctionData('buyV2', [\n        item.tokenAddress,\n        item.tokenId,\n        item.price,\n        item.referrer,\n      ])\n      planner.addCommand(\n        CommandType.FOUNDATION,\n        [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: TokenType.ERC721,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/LooksRareV2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber } from 'ethers'\nimport { ZERO_ADDRESS } from '../../utils/constants'\n\nexport type MakerOrder = {\n  quoteType: number\n  globalNonce: string\n  subsetNonce: string\n  orderNonce: string\n  strategyId: number\n  collectionType: number\n  collection: string\n  currency: string\n  signer: string\n  startTime: number\n  endTime: number\n  price: string\n  itemIds: string[]\n  amounts: string[]\n  additionalParameters: string\n}\n\nexport type TakerOrder = {\n  recipient: string\n  additionalParameters: string\n}\n\nexport type MerkleProof = {\n  value: string\n  position: number\n}\n\nexport type MerkleTree = {\n  root: string\n  proof: MerkleProof[]\n}\n\nexport type LRV2APIOrder = MakerOrder & {\n  id: string\n  hash: string\n  signature: string\n  createdAt: string\n  merkleRoot?: string\n  merkleProof?: MerkleProof[]\n  status: string\n}\n\nexport type LooksRareV2Data = {\n  apiOrder: LRV2APIOrder\n  taker: string\n}\n\nexport class LooksRareV2Trade extends NFTTrade<LooksRareV2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n  private static ERC721_ORDER = 0\n\n  constructor(orders: LooksRareV2Data[]) {\n    super(Market.LooksRareV2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    const { takerBids, makerOrders, makerSignatures, totalValue, merkleTrees } = this.refactorAPIData(this.orders)\n\n    let calldata\n    if (this.orders.length == 1) {\n      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeTakerBid', [\n        takerBids[0],\n        makerOrders[0],\n        makerSignatures[0],\n        merkleTrees[0],\n        ZERO_ADDRESS, // affiliate\n      ])\n    } else {\n      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeMultipleTakerBids', [\n        takerBids,\n        makerOrders,\n        makerSignatures,\n        merkleTrees,\n        ZERO_ADDRESS, // affiliate\n        false, // isAtomic (we deal with this in allowRevert)\n      ])\n    }\n\n    planner.addCommand(CommandType.LOOKS_RARE_V2, [totalValue, calldata], config.allowRevert)\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      const tokenAddress = item.apiOrder.collection\n      const tokenType =\n        item.apiOrder.collectionType == LooksRareV2Trade.ERC721_ORDER ? TokenType.ERC721 : TokenType.ERC1155\n      for (const tokenId of item.apiOrder.itemIds)\n        buyItems.push({\n          tokenAddress,\n          tokenId,\n          tokenType,\n        })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.apiOrder.price)\n    }\n    return total\n  }\n\n  private refactorAPIData(orders: LooksRareV2Data[]): {\n    takerBids: TakerOrder[]\n    makerOrders: MakerOrder[]\n    makerSignatures: string[]\n    totalValue: BigNumber\n    merkleTrees: MerkleTree[]\n  } {\n    let takerBids: TakerOrder[] = []\n    let makerOrders: MakerOrder[] = []\n    let makerSignatures: string[] = []\n    let totalValue: BigNumber = BigNumber.from(0)\n    let merkleTrees: MerkleTree[] = []\n\n    orders.forEach((order) => {\n      makerOrders.push({ ...order.apiOrder })\n\n      makerSignatures.push(order.apiOrder.signature)\n\n      takerBids.push({\n        recipient: order.taker,\n        additionalParameters: '0x',\n      })\n\n      totalValue = totalValue.add(BigNumber.from(order.apiOrder.price))\n\n      merkleTrees.push({\n        root: order.apiOrder.merkleRoot ?? '0x0000000000000000000000000000000000000000000000000000000000000000',\n        proof: order.apiOrder.merkleProof ?? [],\n      })\n    })\n\n    return { takerBids, makerOrders, makerSignatures, totalValue, merkleTrees }\n  }\n}\n","import abi from '../../../abis/NFT20.json'\nimport { Interface } from '@ethersproject/abi'\nimport { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFT20Data = {\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  tokenAmounts: BigNumberish[]\n  recipient: string\n  fee: BigNumberish\n  isV3: boolean\n  value: BigNumberish\n}\n\nexport class NFT20Trade extends NFTTrade<NFT20Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFT20Data[]) {\n    super(Market.NFT20, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFT20Trade.INTERFACE.encodeFunctionData('ethForNft', [\n        order.tokenAddress,\n        order.tokenIds,\n        order.tokenAmounts,\n        order.recipient,\n        order.fee,\n        order.isV3,\n      ])\n      planner.addCommand(CommandType.NFT20, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const pool of this.orders) {\n      for (const tokenId of pool.tokenIds) {\n        buyItems.push({\n          tokenAddress: pool.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/NFTXZap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFTXData = {\n  recipient: string\n  vaultId: BigNumberish\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  value: BigNumber\n  swapCalldata: string\n}\n\nexport class NFTXTrade extends NFTTrade<NFTXData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFTXData[]) {\n    super(Market.NFTX, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFTXTrade.INTERFACE.encodeFunctionData('buyAndRedeem', [\n        order.vaultId,\n        order.tokenIds.length,\n        order.tokenIds,\n        order.swapCalldata,\n        order.recipient,\n      ])\n\n      planner.addCommand(CommandType.NFTX, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const tokenId of order.tokenIds) {\n        buyItems.push({\n          tokenAddress: order.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import { BigNumber, BigNumberish } from 'ethers'\nimport { Interface } from '@ethersproject/abi'\nimport abi from '../../../abis/Seaport.json'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { ETH_ADDRESS } from '../../utils/constants'\n\nexport type SeaportData = {\n  items: Order[]\n  recipient: string // address\n  protocolAddress: string\n  inputTokenProcessing?: InputTokenProcessing[]\n}\n\nexport type InputTokenProcessing = {\n  token: string\n  permit2Permit?: Permit2Permit\n  protocolApproval: boolean\n  permit2TransferFrom: boolean\n}\n\nexport type FulfillmentComponent = {\n  orderIndex: BigNumberish\n  itemIndex: BigNumberish\n}\n\nexport type OfferItem = {\n  itemType: BigNumberish // enum\n  token: string // address\n  identifierOrCriteria: BigNumberish\n  startAmount: BigNumberish\n  endAmount: BigNumberish\n}\n\nexport type ConsiderationItem = OfferItem & {\n  recipient: string\n}\n\nexport type Order = {\n  parameters: OrderParameters\n  signature: string\n}\n\ntype OrderParameters = {\n  offerer: string // address,\n  offer: OfferItem[]\n  consideration: ConsiderationItem[]\n  orderType: BigNumberish // enum\n  startTime: BigNumberish\n  endTime: BigNumberish\n  zoneHash: string // bytes32\n  zone: string // address\n  salt: BigNumberish\n  conduitKey: string // bytes32,\n  totalOriginalConsiderationItems: BigNumberish\n}\n\nexport type AdvancedOrder = Order & {\n  numerator: BigNumber // uint120\n  denominator: BigNumber // uint120\n  extraData: string // bytes\n}\n\nexport class SeaportTrade extends NFTTrade<SeaportData> {\n  public static INTERFACE: Interface = new Interface(abi)\n  public static OPENSEA_CONDUIT_KEY: string = '0x0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000'\n\n  constructor(orders: SeaportData[]) {\n    super(Market.Seaport, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      let advancedOrders: AdvancedOrder[] = []\n      let orderFulfillments: FulfillmentComponent[][] = order.items.map((_, index) => [\n        { orderIndex: index, itemIndex: 0 },\n      ])\n      let considerationFulFillments: FulfillmentComponent[][] = this.getConsiderationFulfillments(order.items)\n\n      for (const item of order.items) {\n        const { advancedOrder } = this.getAdvancedOrderParams(item)\n        advancedOrders.push(advancedOrder)\n      }\n\n      let calldata: string\n      if (advancedOrders.length == 1) {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAdvancedOrder', [\n          advancedOrders[0],\n          [],\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n        ])\n      } else {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAvailableAdvancedOrders', [\n          advancedOrders,\n          [],\n          orderFulfillments,\n          considerationFulFillments,\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n          100, // TODO: look into making this a better number\n        ])\n      }\n\n      if (!!order.inputTokenProcessing) {\n        for (const inputToken of order.inputTokenProcessing)\n          encodeInputTokenOptions(planner, {\n            approval: inputToken.protocolApproval\n              ? { token: inputToken.token, protocol: order.protocolAddress }\n              : undefined,\n            permit2Permit: inputToken.permit2Permit,\n            permit2TransferFrom: inputToken.permit2TransferFrom\n              ? { token: inputToken.token, amount: this.getTotalOrderPrice(order, inputToken.token).toString() }\n              : undefined,\n          })\n      }\n\n      planner.addCommand(\n        this.commandMap(order.protocolAddress),\n        [this.getTotalOrderPrice(order, ETH_ADDRESS).toString(), calldata],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const offer of item.parameters.offer) {\n          buyItems.push({\n            tokenAddress: offer.token,\n            tokenId: offer.identifierOrCriteria,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getInputTokens(): Set<string> {\n    let inputTokens = new Set<string>()\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const consideration of item.parameters.consideration) {\n          const token = consideration.token.toLowerCase()\n          inputTokens.add(token)\n        }\n      }\n    }\n    return inputTokens\n  }\n\n  getTotalOrderPrice(order: SeaportData, token: string = ETH_ADDRESS): BigNumber {\n    let totalOrderPrice = BigNumber.from(0)\n    for (const item of order.items) {\n      totalOrderPrice = totalOrderPrice.add(this.calculateValue(item.parameters.consideration, token))\n    }\n    return totalOrderPrice\n  }\n\n  getTotalPrice(token: string = ETH_ADDRESS): BigNumber {\n    let totalPrice = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        totalPrice = totalPrice.add(this.calculateValue(item.parameters.consideration, token))\n      }\n    }\n    return totalPrice\n  }\n\n  private commandMap(protocolAddress: string): CommandType {\n    switch (protocolAddress.toLowerCase()) {\n      case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc': // Seaport v1.5\n        return CommandType.SEAPORT_V1_5\n      case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n        return CommandType.SEAPORT_V1_4\n      default:\n        throw new Error('unsupported Seaport address')\n    }\n  }\n\n  private getConsiderationFulfillments(protocolDatas: Order[]): FulfillmentComponent[][] {\n    let considerationFulfillments: FulfillmentComponent[][] = []\n    const considerationRecipients: string[] = []\n\n    for (const i in protocolDatas) {\n      const protocolData = protocolDatas[i]\n\n      for (const j in protocolData.parameters.consideration) {\n        const item = protocolData.parameters.consideration[j]\n\n        if (considerationRecipients.findIndex((x) => x === item.recipient) === -1) {\n          considerationRecipients.push(item.recipient)\n        }\n\n        const recipientIndex = considerationRecipients.findIndex((x) => x === item.recipient)\n\n        if (!considerationFulfillments[recipientIndex]) {\n          considerationFulfillments.push([\n            {\n              orderIndex: i,\n              itemIndex: j,\n            },\n          ])\n        } else {\n          considerationFulfillments[recipientIndex].push({\n            orderIndex: i,\n            itemIndex: j,\n          })\n        }\n      }\n    }\n    return considerationFulfillments\n  }\n\n  private getAdvancedOrderParams(data: Order): { advancedOrder: AdvancedOrder } {\n    const advancedOrder = {\n      parameters: data.parameters,\n      numerator: BigNumber.from('1'),\n      denominator: BigNumber.from('1'),\n      signature: data.signature,\n      extraData: '0x00',\n    }\n    return { advancedOrder }\n  }\n\n  private calculateValue(considerations: ConsiderationItem[], token: string): BigNumber {\n    return considerations.reduce(\n      (amt: BigNumber, consideration: ConsiderationItem) =>\n        consideration.token.toLowerCase() == token.toLowerCase() ? amt.add(consideration.startAmount) : amt,\n      BigNumber.from(0)\n    )\n  }\n}\n","import abi from '../../../abis/Sudoswap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype PairSwap = {\n  swapInfo: {\n    pair: string // address\n    nftIds: BigNumberish[]\n  }\n  tokenAddress: string // address\n  maxCost: BigNumberish\n}\n\nexport type SudoswapData = {\n  swaps: PairSwap[]\n  nftRecipient: string\n  ethRecipient: string\n  deadline: BigNumberish\n}\n\nexport class SudoswapTrade extends NFTTrade<SudoswapData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: SudoswapData[]) {\n    super(Market.Sudoswap, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = SudoswapTrade.INTERFACE.encodeFunctionData('robustSwapETHForSpecificNFTs', [\n        order.swaps.map((swap) => {\n          return { swapInfo: swap.swapInfo, maxCost: swap.maxCost }\n        }),\n        order.ethRecipient,\n        order.nftRecipient,\n        order.deadline,\n      ])\n      const value = order.swaps.reduce((prevVal, swap) => {\n        return prevVal.add(swap.maxCost)\n      }, BigNumber.from(0))\n      planner.addCommand(CommandType.SUDOSWAP, [value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        for (const tokenId of swap.swapInfo.nftIds) {\n          buyItems.push({\n            tokenAddress: swap.tokenAddress,\n            tokenId,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        total = total.add(swap.maxCost)\n      }\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/X2Y2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype X2Y2PartialData = {\n  signedInput: string\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n}\n\nexport type X2Y2_721_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC721\n}\n\nexport type X2Y2_1155_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC1155\n  tokenAmount: BigNumberish\n}\n\nexport type X2Y2Data = X2Y2_721_Data | X2Y2_1155_Data\n\nexport class X2Y2Trade extends NFTTrade<X2Y2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: X2Y2Data[]) {\n    super(Market.X2Y2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const functionSelector = X2Y2Trade.INTERFACE.getSighash(X2Y2Trade.INTERFACE.getFunction('run'))\n      const calldata = functionSelector + item.signedInput.slice(2)\n\n      if (item.tokenType == TokenType.ERC721) {\n        planner.addCommand(\n          CommandType.X2Y2_721,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n          config.allowRevert\n        )\n      } else if (item.tokenType == TokenType.ERC1155) {\n        planner.addCommand(\n          CommandType.X2Y2_1155,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId, item.tokenAmount],\n          config.allowRevert\n        )\n      }\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: item.tokenType,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import { MixedRouteSDK, Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount, Ether, Token, TradeType } from '@uniswap/sdk-core'\nimport { Pair, Route as V2Route } from '@uniswap/v2-sdk'\nimport { Pool, Route as V3Route, FeeAmount } from '@uniswap/v3-sdk'\nimport { BigNumber } from 'ethers'\nimport { ETH_ADDRESS, E_ETH_ADDRESS } from './constants'\n\nexport type TokenInRoute = {\n  address: string\n  chainId: number\n  symbol: string\n  decimals: string\n  name?: string\n  buyFeeBps?: string\n  sellFeeBps?: string\n}\n\nexport enum PoolType {\n  V2Pool = 'v2-pool',\n  V3Pool = 'v3-pool',\n}\n\nexport type V2Reserve = {\n  token: TokenInRoute\n  quotient: string\n}\n\nexport type V2PoolInRoute = {\n  type: PoolType.V2Pool\n  address?: string\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  reserve0: V2Reserve\n  reserve1: V2Reserve\n  amountIn?: string\n  amountOut?: string\n}\n\nexport type V3PoolInRoute = {\n  type: PoolType.V3Pool\n  address?: string\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  sqrtRatioX96: string\n  liquidity: string\n  tickCurrent: string\n  fee: string\n  amountIn?: string\n  amountOut?: string\n}\n\nexport type PartialClassicQuote = {\n  // We need tokenIn/Out to support native currency\n  tokenIn: string\n  tokenOut: string\n  tradeType: TradeType\n  route: Array<(V3PoolInRoute | V2PoolInRoute)[]>\n}\n\ninterface RouteResult {\n  routev3: V3Route<Currency, Currency> | null\n  routev2: V2Route<Currency, Currency> | null\n  mixedRoute: MixedRouteSDK<Currency, Currency> | null\n  inputAmount: CurrencyAmount<Currency>\n  outputAmount: CurrencyAmount<Currency>\n}\n\nexport const isNativeCurrency = (address: string) =>\n  address.toLowerCase() === ETH_ADDRESS.toLowerCase() || address.toLowerCase() === E_ETH_ADDRESS.toLowerCase()\n\n// Helper class to convert routing-specific quote entities to RouterTrade entities\n// the returned RouterTrade can then be used to build the UniswapTrade entity in this package\nexport class RouterTradeAdapter {\n  // Generate a RouterTrade using fields from a classic quote response\n  static fromClassicQuote(quote: PartialClassicQuote) {\n    const { route, tokenIn, tokenOut } = quote\n\n    if (!route) throw new Error('Expected route to be present')\n    if (!route.length) throw new Error('Expected there to be at least one route')\n    if (route.some((r) => !r.length)) throw new Error('Expected all routes to have at least one pool')\n    const firstRoute = route[0]\n\n    const tokenInData = firstRoute[0].tokenIn\n    const tokenOutData = firstRoute[firstRoute.length - 1].tokenOut\n\n    if (!tokenInData || !tokenOutData) throw new Error('Expected both tokenIn and tokenOut to be present')\n    if (tokenInData.chainId !== tokenOutData.chainId)\n      throw new Error('Expected tokenIn and tokenOut to be have same chainId')\n\n    const parsedCurrencyIn = RouterTradeAdapter.toCurrency(isNativeCurrency(tokenIn), tokenInData)\n    const parsedCurrencyOut = RouterTradeAdapter.toCurrency(isNativeCurrency(tokenOut), tokenOutData)\n\n    const typedRoutes: RouteResult[] = route.map((subRoute) => {\n      const rawAmountIn = subRoute[0].amountIn\n      const rawAmountOut = subRoute[subRoute.length - 1].amountOut\n\n      if (!rawAmountIn || !rawAmountOut) {\n        throw new Error('Expected both raw amountIn and raw amountOut to be present')\n      }\n\n      const inputAmount = CurrencyAmount.fromRawAmount(parsedCurrencyIn, rawAmountIn)\n      const outputAmount = CurrencyAmount.fromRawAmount(parsedCurrencyOut, rawAmountOut)\n\n      const isOnlyV2 = RouterTradeAdapter.isVersionedRoute<V2PoolInRoute>(PoolType.V2Pool, subRoute)\n      const isOnlyV3 = RouterTradeAdapter.isVersionedRoute<V3PoolInRoute>(PoolType.V3Pool, subRoute)\n\n      return {\n        routev3: isOnlyV3\n          ? new V3Route(\n              (subRoute as V3PoolInRoute[]).map(RouterTradeAdapter.toPool),\n              parsedCurrencyIn,\n              parsedCurrencyOut\n            )\n          : null,\n        routev2: isOnlyV2\n          ? new V2Route(\n              (subRoute as V2PoolInRoute[]).map(RouterTradeAdapter.toPair),\n              parsedCurrencyIn,\n              parsedCurrencyOut\n            )\n          : null,\n        mixedRoute:\n          !isOnlyV3 && !isOnlyV2\n            ? new MixedRouteSDK(subRoute.map(RouterTradeAdapter.toPoolOrPair), parsedCurrencyIn, parsedCurrencyOut)\n            : null,\n        inputAmount,\n        outputAmount,\n      }\n    })\n\n    return new RouterTrade({\n      v2Routes: typedRoutes\n        .filter((route) => route.routev2)\n        .map((route) => ({\n          routev2: route.routev2 as V2Route<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      v3Routes: typedRoutes\n        .filter((route) => route.routev3)\n        .map((route) => ({\n          routev3: route.routev3 as V3Route<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      mixedRoutes: typedRoutes\n        .filter((route) => route.mixedRoute)\n        .map((route) => ({\n          mixedRoute: route.mixedRoute as MixedRouteSDK<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      tradeType: quote.tradeType,\n    })\n  }\n\n  private static toCurrency(isNative: boolean, token: TokenInRoute): Currency {\n    if (isNative) {\n      return Ether.onChain(token.chainId)\n    }\n    return this.toToken(token)\n  }\n\n  private static toPoolOrPair = (pool: V3PoolInRoute | V2PoolInRoute): Pool | Pair => {\n    return pool.type === PoolType.V3Pool ? RouterTradeAdapter.toPool(pool) : RouterTradeAdapter.toPair(pool)\n  }\n\n  private static toToken(token: TokenInRoute): Token {\n    const { chainId, address, decimals, symbol, buyFeeBps, sellFeeBps } = token\n    return new Token(\n      chainId,\n      address,\n      parseInt(decimals.toString()),\n      symbol,\n      /* name */ undefined,\n      false,\n      buyFeeBps ? BigNumber.from(buyFeeBps) : undefined,\n      sellFeeBps ? BigNumber.from(sellFeeBps) : undefined\n    )\n  }\n\n  private static toPool({ fee, sqrtRatioX96, liquidity, tickCurrent, tokenIn, tokenOut }: V3PoolInRoute): Pool {\n    return new Pool(\n      RouterTradeAdapter.toToken(tokenIn),\n      RouterTradeAdapter.toToken(tokenOut),\n      parseInt(fee) as FeeAmount,\n      sqrtRatioX96,\n      liquidity,\n      parseInt(tickCurrent)\n    )\n  }\n\n  private static toPair = ({ reserve0, reserve1 }: V2PoolInRoute): Pair => {\n    return new Pair(\n      CurrencyAmount.fromRawAmount(RouterTradeAdapter.toToken(reserve0.token), reserve0.quotient),\n      CurrencyAmount.fromRawAmount(RouterTradeAdapter.toToken(reserve1.token), reserve1.quotient)\n    )\n  }\n\n  private static isVersionedRoute<T extends V2PoolInRoute | V3PoolInRoute>(\n    type: PoolType,\n    route: (V3PoolInRoute | V2PoolInRoute)[]\n  ): route is T[] {\n    return route.every((pool) => pool.type === type)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumberish } from 'ethers'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { ROUTER_AS_RECIPIENT, WETH_ADDRESS } from '../../utils/constants'\n\nexport class UnwrapWETH implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UnwrapWETH\n  readonly permit2Data: Permit2Permit\n  readonly wethAddress: string\n  readonly amount: BigNumberish\n\n  constructor(amount: BigNumberish, chainId: number, permit2?: Permit2Permit) {\n    this.wethAddress = WETH_ADDRESS(chainId)\n    this.amount = amount\n\n    if (!!permit2) {\n      invariant(\n        permit2.details.token.toLowerCase() === this.wethAddress.toLowerCase(),\n        `must be permitting WETH address: ${this.wethAddress}`\n      )\n      invariant(permit2.details.amount >= amount, `Did not permit enough WETH for unwrapWETH transaction`)\n      this.permit2Data = permit2\n    }\n  }\n\n  encode(planner: RoutePlanner, _: TradeConfig): void {\n    encodeInputTokenOptions(planner, {\n      permit2Permit: this.permit2Data,\n      permit2TransferFrom: {\n        token: this.wethAddress,\n        amount: this.amount.toString(),\n      },\n    })\n    planner.addCommand(CommandType.UNWRAP_WETH, [ROUTER_AS_RECIPIENT, this.amount])\n  }\n}\n"],"names":["RouterTradeType","Market","TokenType","CommandType","NFTTrade","market","orders","this","length","invariant","REVERTIBLE_COMMANDS","Set","SEAPORT_V1_5","SEAPORT_V1_4","NFTX","LOOKS_RARE_V2","X2Y2_721","X2Y2_1155","FOUNDATION","SUDOSWAP","NFT20","EXECUTE_SUB_PLAN","CRYPTOPUNKS","ELEMENT_MARKET","ABI_DEFINITION","PERMIT2_PERMIT","PERMIT2_PERMIT_BATCH","PERMIT2_TRANSFER_FROM","PERMIT2_TRANSFER_FROM_BATCH","PERMIT2_TRANSFER_FROM_STRUCT","V3_SWAP_EXACT_IN","V3_SWAP_EXACT_OUT","V2_SWAP_EXACT_IN","V2_SWAP_EXACT_OUT","WRAP_ETH","UNWRAP_WETH","SWEEP","SWEEP_ERC721","SWEEP_ERC1155","TRANSFER","PAY_PORTION","BALANCE_CHECK_ERC20","OWNER_CHECK_721","OWNER_CHECK_1155","APPROVE_ERC20","RoutePlanner","commands","inputs","_proto","addSubPlan","subplan","addCommand","type","parameters","allowRevert","command","encodedInput","defaultAbiCoder","encode","createCommand","push","has","Error","concat","toString","padStart","CHAIN_CONFIGS","router","weth","creationBlock","WETH_ADDRESS","chainId","CONTRACT_BALANCE","BigNumber","from","pow","ETH_ADDRESS","ZERO_ADDRESS","SENDER_AS_RECIPIENT","ROUTER_AS_RECIPIENT","REFUND_ETH_PRICE_IMPACT_THRESHOLD","Percent","UniswapTrade","trade","options","fee","flatFee","payerIsUser","inputRequiresWrap","useRouterBalance","planner","_config","maximumAmountIn","slippageTolerance","quotient","recipient","swapOptions","outputIsNative","outputAmount","currency","isNative","routerMustCustody","tradeType","TradeType","EXACT_INPUT","routes","swaps","swap","route","protocol","Protocol","V2","addV2Swap","V3","addV3Swap","MIXED","addMixedSwap","minimumAmountOut","feeBips","toHex","multiply","wrapped","address","EXACT_OUTPUT","sub","mul","div","feeAmount","amount","lt","priceImpact","greaterThan","safeMode","key","get","inputAmount","V2Trade","path","map","pool","V3Trade","createUncheckedTrade","encodeRouteToPath","tradeRecipient","pools","Pool","Pair","outputToken","MixedRouteTrade","amountIn","amountOut","sections","partitionMixedRouteByProtocol","isLastSectionInRoute","i","inputToken","input","section","getOutputOfPools","newRouteOriginal","MixedRouteSDK","token0","equals","token1","newRoute","MixedRoute","every","mixedRouteIsAllV3","encodeMixedRouteToPath","liquidityToken","encodePermit","permit2","signature","ethers","utils","arrayify","joinSignature","splitSignature","encodeInputTokenOptions","approval","permit2Permit","token","details","permit2TransferFrom","mapApprovalProtocol","protocolAddress","toLowerCase","SwapRouter","swapCallParameters","trades","config","Array","isArray","nftTrades","filter","_","hasOwnProperty","currentNativeValueInRouter","transactionValue","nftInputTokens","nftTrade","tradePrice","getTotalPrice","Seaport","getInputTokens","forEach","add","uniswapTrade","inputIsNative","inputTokenPermit","UnwrapWETH","encodePlan","swapNFTCallParameters","totalPrice","swapERC20CallParameters","inputCurrency","nativeCurrencyValue","deadline","deadlineOrPreviousBlockhash","undefined","calldata","INTERFACE","encodeFunctionData","value","toHexString","Interface","abi","CryptopunkTrade","_NFTTrade","Cryptopunks","_inheritsLoose","item","tokenId","getBuyItems","buyItems","tokenAddress","CRYPTOPUNK_ADDRESS","tokenType","Cryptopunk","total","FoundationTrade","Foundation","price","referrer","ERC721","LooksRareV2Trade","LooksRareV2","refactorAPIData","takerBids","makerOrders","makerSignatures","totalValue","merkleTrees","apiOrder","collection","collectionType","ERC721_ORDER","ERC1155","itemIds","order","taker","additionalParameters","root","merkleRoot","proof","merkleProof","NFT20Trade","tokenIds","tokenAmounts","isV3","NFTXTrade","vaultId","swapCalldata","SeaportTrade","advancedOrders","orderFulfillments","items","index","orderIndex","itemIndex","considerationFulFillments","getConsiderationFulfillments","getAdvancedOrderParams","advancedOrder","OPENSEA_CONDUIT_KEY","inputTokenProcessing","protocolApproval","getTotalOrderPrice","commandMap","offer","identifierOrCriteria","inputTokens","consideration","totalOrderPrice","calculateValue","protocolDatas","considerationFulfillments","considerationRecipients","protocolData","j","findIndex","x","recipientIndex","_loop","data","numerator","denominator","extraData","considerations","reduce","amt","startAmount","SudoswapTrade","Sudoswap","swapInfo","maxCost","ethRecipient","nftRecipient","prevVal","nftIds","X2Y2Trade","X2Y2","getSighash","getFunction","signedInput","slice","tokenAmount","PoolType","wethAddress","permit2Data","isNativeCurrency","RouterTradeAdapter","fromClassicQuote","quote","tokenIn","tokenOut","some","r","firstRoute","tokenInData","tokenOutData","parsedCurrencyIn","toCurrency","parsedCurrencyOut","typedRoutes","subRoute","rawAmountIn","rawAmountOut","CurrencyAmount","fromRawAmount","isOnlyV2","isVersionedRoute","V2Pool","isOnlyV3","V3Pool","routev3","V3Route","toPool","routev2","V2Route","toPair","mixedRoute","toPoolOrPair","RouterTrade","v2Routes","v3Routes","mixedRoutes","Ether","onChain","toToken","symbol","buyFeeBps","sellFeeBps","Token","parseInt","decimals","sqrtRatioX96","liquidity","tickCurrent","reserve0","reserve1"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.esm.js b/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.esm.js
index 17e6e21..0d7152a 100644
--- a/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.esm.js
+++ b/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.esm.js
@@ -210,8 +210,8 @@ var CHAIN_CONFIGS = (_CHAIN_CONFIGS = {}, _CHAIN_CONFIGS[1] = {
   weth: '0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6',
   creationBlock: 8940568
 }, _CHAIN_CONFIGS[11155111] = {
-  router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
-  weth: '0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14',
+  router: '0x1678413030D5f7719e17Ba37e77134268f9b8193',
+  weth: '0xb16F35c0Ae2912430DAc15764477E179D9B9EbEa',
   creationBlock: 3543575
 }, _CHAIN_CONFIGS[137] = {
   router: '0xec7BE89e9d109e7e3Fec59c222CF297125FEFda2',
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.esm.js.map b/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.esm.js.map
index e113e4c..684d3a5 100644
--- a/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.esm.js.map
+++ b/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.esm.js.map
@@ -1 +1 @@
-{"version":3,"file":"universal-router-sdk.esm.js","sources":["../src/entities/Command.ts","../src/entities/NFTTrade.ts","../src/utils/routerCommands.ts","../src/utils/constants.ts","../src/utils/numbers.ts","../src/entities/protocols/uniswap.ts","../src/utils/inputTokens.ts","../src/swapRouter.ts","../src/entities/protocols/cryptopunk.ts","../src/entities/protocols/foundation.ts","../src/entities/protocols/looksRareV2.ts","../src/entities/protocols/nft20.ts","../src/entities/protocols/nftx.ts","../src/entities/protocols/seaport.ts","../src/entities/protocols/sudoswap.ts","../src/entities/protocols/x2y2.ts","../src/entities/protocols/unwrapWETH.ts","../src/utils/routerTradeAdapter.ts"],"sourcesContent":["import { RoutePlanner } from '../utils/routerCommands'\n\nexport type TradeConfig = {\n  allowRevert: boolean\n}\n\nexport enum RouterTradeType {\n  UniswapTrade = 'UniswapTrade',\n  NFTTrade = 'NFTTrade',\n  UnwrapWETH = 'UnwrapWETH',\n}\n\n// interface for entities that can be encoded as a Universal Router command\nexport interface Command {\n  tradeType: RouterTradeType\n  encode(planner: RoutePlanner, config: TradeConfig): void\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { SeaportData } from './protocols/seaport'\nimport { FoundationData } from './protocols/foundation'\nimport { NFTXData } from './protocols/nftx'\nimport { NFT20Data } from './protocols/nft20'\nimport { RoutePlanner } from '../utils/routerCommands'\nimport { Command, RouterTradeType, TradeConfig } from './Command'\nimport { SudoswapData } from './protocols/sudoswap'\nimport { CryptopunkData } from './protocols/cryptopunk'\nimport { X2Y2Data } from './protocols/x2y2'\nimport { ElementData } from './protocols/element-market'\nimport { LooksRareV2Data } from './protocols/looksRareV2'\n\nexport type SupportedProtocolsData =\n  | SeaportData\n  | FoundationData\n  | NFTXData\n  | LooksRareV2Data\n  | X2Y2Data\n  | CryptopunkData\n  | NFT20Data\n  | SudoswapData\n  | ElementData\n\nexport abstract class NFTTrade<T> implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.NFTTrade\n  readonly orders: T[]\n  readonly market: Market\n\n  constructor(market: Market, orders: T[]) {\n    invariant(orders.length > 0, 'no buy Items')\n    this.market = market\n    this.orders = orders\n  }\n\n  abstract encode(planner: RoutePlanner, config: TradeConfig): void\n\n  abstract getBuyItems(): BuyItem[]\n\n  // optional parameter for the markets that accept ERC20s not just ETH\n  abstract getTotalPrice(token?: string): BigNumber\n}\n\nexport type BuyItem = {\n  tokenAddress: string\n  tokenId: BigNumberish\n  tokenType: TokenType\n  amount?: BigNumberish // for 1155\n}\n\nexport enum Market {\n  Foundation = 'foundation',\n  LooksRareV2 = 'looksrareV2',\n  NFT20 = 'nft20',\n  NFTX = 'nftx',\n  Seaport = 'seaport',\n  Sudoswap = 'Sudoswap',\n  Cryptopunks = 'cryptopunks',\n  X2Y2 = 'x2y2',\n  Element = 'element',\n}\n\nexport enum TokenType {\n  ERC721 = 'ERC721',\n  ERC1155 = 'ERC1155',\n  Cryptopunk = 'Cryptopunk',\n}\n","import { defaultAbiCoder } from 'ethers/lib/utils'\n\n/**\n * CommandTypes\n * @description Flags that modify a command's execution\n * @enum {number}\n */\nexport enum CommandType {\n  V3_SWAP_EXACT_IN = 0x00,\n  V3_SWAP_EXACT_OUT = 0x01,\n  PERMIT2_TRANSFER_FROM = 0x02,\n  PERMIT2_PERMIT_BATCH = 0x03,\n  SWEEP = 0x04,\n  TRANSFER = 0x05,\n  PAY_PORTION = 0x06,\n\n  V2_SWAP_EXACT_IN = 0x08,\n  V2_SWAP_EXACT_OUT = 0x09,\n  PERMIT2_PERMIT = 0x0a,\n  WRAP_ETH = 0x0b,\n  UNWRAP_WETH = 0x0c,\n  PERMIT2_TRANSFER_FROM_BATCH = 0x0d,\n  BALANCE_CHECK_ERC20 = 0x0e,\n\n  // NFT-related command types\n  SEAPORT_V1_5 = 0x10,\n  LOOKS_RARE_V2 = 0x11,\n  NFTX = 0x12,\n  CRYPTOPUNKS = 0x13,\n  // 0x14\n  OWNER_CHECK_721 = 0x15,\n  OWNER_CHECK_1155 = 0x16,\n  SWEEP_ERC721 = 0x17,\n\n  X2Y2_721 = 0x18,\n  SUDOSWAP = 0x19,\n  NFT20 = 0x1a,\n  X2Y2_1155 = 0x1b,\n  FOUNDATION = 0x1c,\n  SWEEP_ERC1155 = 0x1d,\n  ELEMENT_MARKET = 0x1e,\n\n  SEAPORT_V1_4 = 0x20,\n  EXECUTE_SUB_PLAN = 0x21,\n  APPROVE_ERC20 = 0x22,\n}\n\nconst ALLOW_REVERT_FLAG = 0x80\n\nconst REVERTIBLE_COMMANDS = new Set<CommandType>([\n  CommandType.SEAPORT_V1_5,\n  CommandType.SEAPORT_V1_4,\n  CommandType.NFTX,\n  CommandType.LOOKS_RARE_V2,\n  CommandType.X2Y2_721,\n  CommandType.X2Y2_1155,\n  CommandType.FOUNDATION,\n  CommandType.SUDOSWAP,\n  CommandType.NFT20,\n  CommandType.EXECUTE_SUB_PLAN,\n  CommandType.CRYPTOPUNKS,\n  CommandType.ELEMENT_MARKET,\n])\n\nconst PERMIT_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce) details,address spender,uint256 sigDeadline)'\n\nconst PERMIT_BATCH_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce)[] details,address spender,uint256 sigDeadline)'\n\nconst PERMIT2_TRANSFER_FROM_STRUCT = '(address from,address to,uint160 amount,address token)'\nconst PERMIT2_TRANSFER_FROM_BATCH_STRUCT = PERMIT2_TRANSFER_FROM_STRUCT + '[]'\n\nconst ABI_DEFINITION: { [key in CommandType]: string[] } = {\n  // Batch Reverts\n  [CommandType.EXECUTE_SUB_PLAN]: ['bytes', 'bytes[]'],\n\n  // Permit2 Actions\n  [CommandType.PERMIT2_PERMIT]: [PERMIT_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_PERMIT_BATCH]: [PERMIT_BATCH_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_TRANSFER_FROM]: ['address', 'address', 'uint160'],\n  [CommandType.PERMIT2_TRANSFER_FROM_BATCH]: [PERMIT2_TRANSFER_FROM_BATCH_STRUCT],\n\n  // Uniswap Actions\n  [CommandType.V3_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V3_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V2_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n  [CommandType.V2_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n\n  // Token Actions and Checks\n  [CommandType.WRAP_ETH]: ['address', 'uint256'],\n  [CommandType.UNWRAP_WETH]: ['address', 'uint256'],\n  [CommandType.SWEEP]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC721]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.TRANSFER]: ['address', 'address', 'uint256'],\n  [CommandType.PAY_PORTION]: ['address', 'address', 'uint256'],\n  [CommandType.BALANCE_CHECK_ERC20]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_721]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.APPROVE_ERC20]: ['address', 'uint256'],\n\n  // NFT Markets\n  [CommandType.SEAPORT_V1_5]: ['uint256', 'bytes'],\n  [CommandType.SEAPORT_V1_4]: ['uint256', 'bytes'],\n  [CommandType.NFTX]: ['uint256', 'bytes'],\n  [CommandType.LOOKS_RARE_V2]: ['uint256', 'bytes'],\n  [CommandType.X2Y2_721]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.X2Y2_1155]: ['uint256', 'bytes', 'address', 'address', 'uint256', 'uint256'],\n  [CommandType.FOUNDATION]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.SUDOSWAP]: ['uint256', 'bytes'],\n  [CommandType.NFT20]: ['uint256', 'bytes'],\n  [CommandType.CRYPTOPUNKS]: ['uint256', 'address', 'uint256'],\n  [CommandType.ELEMENT_MARKET]: ['uint256', 'bytes'],\n}\n\nexport class RoutePlanner {\n  commands: string\n  inputs: string[]\n\n  constructor() {\n    this.commands = '0x'\n    this.inputs = []\n  }\n\n  addSubPlan(subplan: RoutePlanner): void {\n    this.addCommand(CommandType.EXECUTE_SUB_PLAN, [subplan.commands, subplan.inputs], true)\n  }\n\n  addCommand(type: CommandType, parameters: any[], allowRevert = false): void {\n    let command = createCommand(type, parameters)\n    this.inputs.push(command.encodedInput)\n    if (allowRevert) {\n      if (!REVERTIBLE_COMMANDS.has(command.type)) {\n        throw new Error(`command type: ${command.type} cannot be allowed to revert`)\n      }\n      command.type = command.type | ALLOW_REVERT_FLAG\n    }\n\n    this.commands = this.commands.concat(command.type.toString(16).padStart(2, '0'))\n  }\n}\n\nexport type RouterCommand = {\n  type: CommandType\n  encodedInput: string\n}\n\nexport function createCommand(type: CommandType, parameters: any[]): RouterCommand {\n  const encodedInput = defaultAbiCoder.encode(ABI_DEFINITION[type], parameters)\n  return { type, encodedInput }\n}\n","import { BigNumber } from 'ethers'\n\ntype ChainConfig = {\n  router: string\n  creationBlock: number\n  weth: string\n}\n\nconst WETH_NOT_SUPPORTED_ON_CHAIN = '0x0000000000000000000000000000000000000000'\n\nconst CHAIN_CONFIGS: { [key: number]: ChainConfig } = {\n  // mainnet\n  [1]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    creationBlock: 17143817,\n  },\n  // goerli\n  [5]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6',\n    creationBlock: 8940568,\n  },\n  // sepolia\n  [11155111]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14',\n    creationBlock: 3543575,\n  },\n  // polygon\n  [137]: {\n    router: '0xec7BE89e9d109e7e3Fec59c222CF297125FEFda2',\n    weth: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    creationBlock: 52210153,\n  },\n  //polygon mumbai\n  [80001]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',\n    creationBlock: 35176052,\n  },\n  //optimism\n  [10]: {\n    router: '0xCb1355ff08Ab38bBCE60111F1bb2B784bE25D7e8',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 114702266,\n  },\n  // optimism goerli\n  [420]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 8887728,\n  },\n  // arbitrum\n  [42161]: {\n    router: '0x5E325eDA8064b456f4781070C0738d849c824258',\n    weth: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n    creationBlock: 169472836,\n  },\n  // arbitrum goerli\n  [421613]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3',\n    creationBlock: 18815277,\n  },\n  // celo\n  [42220]: {\n    router: '0x643770e279d5d0733f21d6dc03a8efbabf3255b4',\n    weth: WETH_NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 21407637,\n  },\n  // celo alfajores\n  [44787]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: WETH_NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 17566658,\n  },\n  // binance smart chain\n  [56]: {\n    router: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',\n    weth: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    creationBlock: 35160263,\n  },\n  // avalanche\n  [43114]: {\n    router: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',\n    weth: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    creationBlock: 40237257,\n  },\n  // base goerli\n  [84531]: {\n    router: '0xd0872d928672ae2ff74bdb2f5130ac12229cafaf',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 6915289,\n  },\n  // base mainnet\n  [8453]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 9107268,\n  },\n  [81457]: {\n    router: '0x643770E279d5D0733F21d6DC03A8efbABf3255B4',\n    weth: '0x4300000000000000000000000000000000000004',\n    creationBlock: 1116444,\n  },\n}\n\nexport const UNIVERSAL_ROUTER_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].router\n}\n\nexport const UNIVERSAL_ROUTER_CREATION_BLOCK = (chainId: number): number => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].creationBlock\n}\n\nexport const WETH_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n\n  if (CHAIN_CONFIGS[chainId].weth == WETH_NOT_SUPPORTED_ON_CHAIN) throw new Error(`Chain ${chainId} does not have WETH`)\n\n  return CHAIN_CONFIGS[chainId].weth\n}\n\nexport const PERMIT2_ADDRESS = '0x000000000022D473030F116dDEE9F6B43aC78BA3'\n\nexport const CONTRACT_BALANCE = BigNumber.from(2).pow(255)\nexport const ETH_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const E_ETH_ADDRESS = '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee'\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const MAX_UINT256 = BigNumber.from(2).pow(256).sub(1)\nexport const MAX_UINT160 = BigNumber.from(2).pow(160).sub(1)\n\nexport const SENDER_AS_RECIPIENT = '0x0000000000000000000000000000000000000001'\nexport const ROUTER_AS_RECIPIENT = '0x0000000000000000000000000000000000000002'\n\nexport const OPENSEA_CONDUIT_SPENDER_ID = 0\nexport const SUDOSWAP_SPENDER_ID = 1\n","import { BigNumber } from 'ethers'\nimport JSBI from 'jsbi'\nimport bn from 'bignumber.js'\nimport { Percent } from '@uniswap/sdk-core'\nimport { toHex } from '@uniswap/v3-sdk'\n\nexport function expandTo18DecimalsBN(n: number): BigNumber {\n  // use bn intermediately to allow decimals in intermediate calculations\n  return BigNumber.from(new bn(n).times(new bn(10).pow(18)).toFixed())\n}\n\nexport function expandTo18Decimals(n: number): JSBI {\n  return JSBI.BigInt(BigNumber.from(n).mul(BigNumber.from(10).pow(18)).toString())\n}\n\nexport function encodeFeeBips(fee: Percent): string {\n  return toHex(fee.multiply(10_000).quotient)\n}\n","import { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { Trade as V2Trade, Pair } from '@uniswap/v2-sdk'\nimport { Trade as V3Trade, Pool, encodeRouteToPath } from '@uniswap/v3-sdk'\nimport {\n  Trade as RouterTrade,\n  MixedRouteTrade,\n  Protocol,\n  IRoute,\n  RouteV2,\n  RouteV3,\n  MixedRouteSDK,\n  MixedRoute,\n  SwapOptions as RouterSwapOptions,\n  getOutputOfPools,\n  encodeMixedRouteToPath,\n  partitionMixedRouteByProtocol,\n} from '@uniswap/router-sdk'\nimport { Permit2Permit } from '../../utils/inputTokens'\nimport { Currency, TradeType, CurrencyAmount, Percent } from '@uniswap/sdk-core'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { SENDER_AS_RECIPIENT, ROUTER_AS_RECIPIENT, CONTRACT_BALANCE, ETH_ADDRESS } from '../../utils/constants'\nimport { encodeFeeBips } from '../../utils/numbers'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type FlatFeeOptions = {\n  amount: BigNumberish\n  recipient: string\n}\n\n// the existing router permit object doesn't include enough data for permit2\n// so we extend swap options with the permit2 permit\n// when safe mode is enabled, the SDK will add an extra ETH sweep for security\n// when useRouterBalance is enabled the SDK will use the balance in the router for the swap\nexport type SwapOptions = Omit<RouterSwapOptions, 'inputTokenPermit'> & {\n  useRouterBalance?: boolean\n  inputTokenPermit?: Permit2Permit\n  flatFee?: FlatFeeOptions\n  safeMode?: boolean\n}\n\nconst REFUND_ETH_PRICE_IMPACT_THRESHOLD = new Percent(50, 100)\n\ninterface Swap<TInput extends Currency, TOutput extends Currency> {\n  route: IRoute<TInput, TOutput, Pair | Pool>\n  inputAmount: CurrencyAmount<TInput>\n  outputAmount: CurrencyAmount<TOutput>\n}\n\n// Wrapper for uniswap router-sdk trade entity to encode swaps for Universal Router\n// also translates trade objects from previous (v2, v3) SDKs\nexport class UniswapTrade implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UniswapTrade\n  readonly payerIsUser: boolean\n\n  constructor(public trade: RouterTrade<Currency, Currency, TradeType>, public options: SwapOptions) {\n    if (!!options.fee && !!options.flatFee) throw new Error('Only one fee option permitted')\n\n    if (this.inputRequiresWrap) this.payerIsUser = false\n    else if (this.options.useRouterBalance) this.payerIsUser = false\n    else this.payerIsUser = true\n  }\n\n  get inputRequiresWrap(): boolean {\n    return this.trade.inputAmount.currency.isNative\n  }\n\n  encode(planner: RoutePlanner, _config: TradeConfig): void {\n    // If the input currency is the native currency, we need to wrap it with the router as the recipient\n    if (this.inputRequiresWrap) {\n      // TODO: optimize if only one v2 pool we can directly send this to the pool\n      planner.addCommand(CommandType.WRAP_ETH, [\n        ROUTER_AS_RECIPIENT,\n        this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString(),\n      ])\n    }\n    // The overall recipient at the end of the trade, SENDER_AS_RECIPIENT uses the msg.sender\n    this.options.recipient = this.options.recipient ?? SENDER_AS_RECIPIENT\n\n    // flag for whether we want to perform slippage check on aggregate output of multiple routes\n    //   1. when there are >2 exact input trades. this is only a heuristic,\n    //      as it's still more gas-expensive even in this case, but has benefits\n    //      in that the reversion probability is lower\n    const performAggregatedSlippageCheck =\n      this.trade.tradeType === TradeType.EXACT_INPUT && this.trade.routes.length > 2\n    const outputIsNative = this.trade.outputAmount.currency.isNative\n    const routerMustCustody = performAggregatedSlippageCheck || outputIsNative || hasFeeOption(this.options)\n\n    for (const swap of this.trade.swaps) {\n      switch (swap.route.protocol) {\n        case Protocol.V2:\n          addV2Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        case Protocol.V3:\n          addV3Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        case Protocol.MIXED:\n          addMixedSwap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        default:\n          throw new Error('UNSUPPORTED_TRADE_PROTOCOL')\n      }\n    }\n\n    let minimumAmountOut: BigNumber = BigNumber.from(\n      this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString()\n    )\n\n    // The router custodies for 3 reasons: to unwrap, to take a fee, and/or to do a slippage check\n    if (routerMustCustody) {\n      // If there is a fee, that percentage is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.fee) {\n        const feeBips = encodeFeeBips(this.options.fee.fee)\n        planner.addCommand(CommandType.PAY_PORTION, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.fee.recipient,\n          feeBips,\n        ])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(minimumAmountOut.mul(feeBips).div(10000))\n        }\n      }\n\n      // If there is a flat fee, that absolute amount is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.flatFee) {\n        const feeAmount = this.options.flatFee.amount\n        if (minimumAmountOut.lt(feeAmount)) throw new Error('Flat fee amount greater than minimumAmountOut')\n\n        planner.addCommand(CommandType.TRANSFER, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.flatFee.recipient,\n          feeAmount,\n        ])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(feeAmount)\n        }\n      }\n\n      // The remaining tokens that need to be sent to the user after the fee is taken will be caught\n      // by this if-else clause.\n      if (outputIsNative) {\n        planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, minimumAmountOut])\n      } else {\n        planner.addCommand(CommandType.SWEEP, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.recipient,\n          minimumAmountOut,\n        ])\n      }\n    }\n\n    if (this.inputRequiresWrap && (this.trade.tradeType === TradeType.EXACT_OUTPUT || riskOfPartialFill(this.trade))) {\n      // for exactOutput swaps that take native currency as input\n      // we need to send back the change to the user\n      planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, 0])\n    }\n\n    if (this.options.safeMode) planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, this.options.recipient, 0])\n  }\n}\n\n// encode a uniswap v2 swap\nfunction addV2Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = new V2Trade(\n    route as RouteV2<TInput, TOutput>,\n    tradeType == TradeType.EXACT_INPUT ? inputAmount : outputAmount,\n    tradeType\n  )\n\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n      // if native, we have to unwrap so keep in the router for now\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a uniswap v3 swap\nfunction addV3Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = V3Trade.createUncheckedTrade({\n    route: route as RouteV3<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const path = encodeRouteToPath(route as RouteV3<TInput, TOutput>, trade.tradeType === TradeType.EXACT_OUTPUT)\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a mixed route swap, i.e. including both v2 and v3 pools\nfunction addMixedSwap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  swap: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const { route, inputAmount, outputAmount } = swap\n  const tradeRecipient = routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient\n\n  // single hop, so it can be reduced to plain v2 or v3 swap logic\n  if (route.pools.length === 1) {\n    if (route.pools[0] instanceof Pool) {\n      return addV3Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else if (route.pools[0] instanceof Pair) {\n      return addV2Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else {\n      throw new Error('Invalid route type')\n    }\n  }\n\n  const trade = MixedRouteTrade.createUncheckedTrade({\n    route: route as MixedRoute<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const amountIn = trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient.toString()\n  const amountOut = trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient.toString()\n\n  // logic from\n  // https://github.com/Uniswap/router-sdk/blob/d8eed164e6c79519983844ca8b6a3fc24ebcb8f8/src/swapRouter.ts#L276\n  const sections = partitionMixedRouteByProtocol(route as MixedRoute<TInput, TOutput>)\n  const isLastSectionInRoute = (i: number) => {\n    return i === sections.length - 1\n  }\n\n  let outputToken\n  let inputToken = route.input.wrapped\n\n  for (let i = 0; i < sections.length; i++) {\n    const section = sections[i]\n    /// Now, we get output of this section\n    outputToken = getOutputOfPools(section, inputToken)\n\n    const newRouteOriginal = new MixedRouteSDK(\n      [...section],\n      section[0].token0.equals(inputToken) ? section[0].token0 : section[0].token1,\n      outputToken\n    )\n    const newRoute = new MixedRoute(newRouteOriginal)\n\n    /// Previous output is now input\n    inputToken = outputToken\n\n    const mixedRouteIsAllV3 = (route: MixedRouteSDK<Currency, Currency>) => {\n      return route.pools.every((pool) => pool instanceof Pool)\n    }\n\n    if (mixedRouteIsAllV3(newRoute)) {\n      const path: string = encodeMixedRouteToPath(newRoute)\n\n      planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n        // if not last section: send tokens directly to the first v2 pair of the next section\n        // note: because of the partitioning function we can be sure that the next section is v2\n        isLastSectionInRoute(i) ? tradeRecipient : (sections[i + 1][0] as Pair).liquidityToken.address,\n        i == 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOut\n        path, // path\n        payerIsUser && i === 0, // payerIsUser\n      ])\n    } else {\n      planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n        isLastSectionInRoute(i) ? tradeRecipient : ROUTER_AS_RECIPIENT, // recipient\n        i === 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOutMin\n        newRoute.path.map((pool) => pool.address), // path\n        payerIsUser && i === 0,\n      ])\n    }\n  }\n}\n\n// if price impact is very high, there's a chance of hitting max/min prices resulting in a partial fill of the swap\nfunction riskOfPartialFill(trade: RouterTrade<Currency, Currency, TradeType>): boolean {\n  return trade.priceImpact.greaterThan(REFUND_ETH_PRICE_IMPACT_THRESHOLD)\n}\n\nfunction hasFeeOption(swapOptions: SwapOptions): boolean {\n  return !!swapOptions.fee || !!swapOptions.flatFee\n}\n","import invariant from 'tiny-invariant'\nimport { ethers } from 'ethers'\nimport { PermitSingle } from '@uniswap/permit2-sdk'\nimport { CommandType, RoutePlanner } from './routerCommands'\nimport { OPENSEA_CONDUIT_SPENDER_ID, ROUTER_AS_RECIPIENT, SUDOSWAP_SPENDER_ID } from './constants'\n\nexport interface Permit2Permit extends PermitSingle {\n  signature: string\n}\n\nexport type ApproveProtocol = {\n  token: string\n  protocol: string\n}\n\nexport type Permit2TransferFrom = {\n  token: string\n  amount: string\n  recipient?: string\n}\n\nexport type InputTokenOptions = {\n  approval?: ApproveProtocol\n  permit2Permit?: Permit2Permit\n  permit2TransferFrom?: Permit2TransferFrom\n}\n\nconst SIGNATURE_LENGTH = 65\nconst EIP_2098_SIGNATURE_LENGTH = 64\n\nexport function encodePermit(planner: RoutePlanner, permit2: Permit2Permit): void {\n  let signature = permit2.signature\n\n  const length = ethers.utils.arrayify(permit2.signature).length\n  // signature data provided for EIP-1271 may have length different from ECDSA signature\n  if (length === SIGNATURE_LENGTH || length === EIP_2098_SIGNATURE_LENGTH) {\n    // sanitizes signature to cover edge cases of malformed EIP-2098 sigs and v used as recovery id\n    signature = ethers.utils.joinSignature(ethers.utils.splitSignature(permit2.signature))\n  }\n\n  planner.addCommand(CommandType.PERMIT2_PERMIT, [permit2, signature])\n}\n\n// Handles the encoding of commands needed to gather input tokens for a trade\n// Approval: The router approving another address to take tokens.\n//   note: Only seaport and sudoswap support this action. Approvals are left open.\n// Permit: A Permit2 signature-based Permit to allow the router to access a user's tokens\n// Transfer: A Permit2 TransferFrom of tokens from a user to either the router or another address\nexport function encodeInputTokenOptions(planner: RoutePlanner, options: InputTokenOptions) {\n  // first ensure that all tokens provided for encoding are the same\n  if (!!options.approval && !!options.permit2Permit)\n    invariant(options.approval.token === options.permit2Permit.details.token, `inconsistent token`)\n  if (!!options.approval && !!options.permit2TransferFrom)\n    invariant(options.approval.token === options.permit2TransferFrom.token, `inconsistent token`)\n  if (!!options.permit2TransferFrom && !!options.permit2Permit)\n    invariant(options.permit2TransferFrom.token === options.permit2Permit.details.token, `inconsistent token`)\n\n  // if an options.approval is required, add it\n  if (!!options.approval) {\n    planner.addCommand(CommandType.APPROVE_ERC20, [\n      options.approval.token,\n      mapApprovalProtocol(options.approval.protocol),\n    ])\n  }\n\n  // if this order has a options.permit2Permit, encode it\n  if (!!options.permit2Permit) {\n    encodePermit(planner, options.permit2Permit)\n  }\n\n  if (!!options.permit2TransferFrom) {\n    planner.addCommand(CommandType.PERMIT2_TRANSFER_FROM, [\n      options.permit2TransferFrom.token,\n      options.permit2TransferFrom.recipient ? options.permit2TransferFrom.recipient : ROUTER_AS_RECIPIENT,\n      options.permit2TransferFrom.amount,\n    ])\n  }\n}\n\nfunction mapApprovalProtocol(protocolAddress: string): number {\n  switch (protocolAddress.toLowerCase()) {\n    case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc': // Seaport v1.5\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x2b2e8cda09bba9660dca5cb6233787738ad68329': // Sudoswap\n      return SUDOSWAP_SPENDER_ID\n    default:\n      throw new Error('unsupported protocol address')\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { abi } from '@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { MethodParameters } from '@uniswap/v3-sdk'\nimport { Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, TradeType } from '@uniswap/sdk-core'\nimport { Command, RouterTradeType } from './entities/Command'\nimport { Market, NFTTrade, SupportedProtocolsData } from './entities/NFTTrade'\nimport { UniswapTrade, SwapOptions } from './entities/protocols/uniswap'\nimport { UnwrapWETH } from './entities/protocols/unwrapWETH'\nimport { CommandType, RoutePlanner } from './utils/routerCommands'\nimport { encodePermit } from './utils/inputTokens'\nimport { ROUTER_AS_RECIPIENT, SENDER_AS_RECIPIENT, ETH_ADDRESS } from './utils/constants'\nimport { SeaportTrade } from './entities'\n\nexport type SwapRouterConfig = {\n  sender?: string // address\n  deadline?: BigNumberish\n}\n\ntype SupportedNFTTrade = NFTTrade<SupportedProtocolsData>\n\nexport abstract class SwapRouter {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  public static swapCallParameters(trades: Command[] | Command, config: SwapRouterConfig = {}): MethodParameters {\n    if (!Array.isArray(trades)) trades = [trades]\n\n    const nftTrades = trades.filter((trade, _, []) => trade.hasOwnProperty('market')) as SupportedNFTTrade[]\n    const allowRevert = nftTrades.length == 1 && nftTrades[0].orders.length == 1 ? false : true\n    const planner = new RoutePlanner()\n\n    // track value flow to require the right amount of native value\n    let currentNativeValueInRouter = BigNumber.from(0)\n    let transactionValue = BigNumber.from(0)\n\n    // tracks the input tokens (and ETH) used to buy NFTs to allow us to sweep\n    let nftInputTokens = new Set<string>()\n\n    for (const trade of trades) {\n      /**\n       * is NFTTrade\n       */\n      if (trade.tradeType == RouterTradeType.NFTTrade) {\n        const nftTrade = trade as SupportedNFTTrade\n        nftTrade.encode(planner, { allowRevert })\n        const tradePrice = nftTrade.getTotalPrice()\n\n        if (nftTrade.market == Market.Seaport) {\n          const seaportTrade = nftTrade as SeaportTrade\n          const seaportInputTokens = seaportTrade.getInputTokens()\n          seaportInputTokens.forEach((inputToken) => {\n            nftInputTokens.add(inputToken)\n          })\n        } else {\n          nftInputTokens.add(ETH_ADDRESS)\n        }\n\n        // send enough native value to contract for NFT purchase\n        if (currentNativeValueInRouter.lt(tradePrice)) {\n          transactionValue = transactionValue.add(tradePrice.sub(currentNativeValueInRouter))\n          currentNativeValueInRouter = BigNumber.from(0)\n        } else {\n          currentNativeValueInRouter = currentNativeValueInRouter.sub(tradePrice)\n        }\n        /**\n         * is UniswapTrade\n         */\n      } else if (trade.tradeType == RouterTradeType.UniswapTrade) {\n        const uniswapTrade = trade as UniswapTrade\n        const inputIsNative = uniswapTrade.trade.inputAmount.currency.isNative\n        const outputIsNative = uniswapTrade.trade.outputAmount.currency.isNative\n        const swapOptions = uniswapTrade.options\n\n        invariant(!(inputIsNative && !!swapOptions.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n        if (!!swapOptions.inputTokenPermit) {\n          encodePermit(planner, swapOptions.inputTokenPermit)\n        }\n\n        if (inputIsNative) {\n          transactionValue = transactionValue.add(\n            BigNumber.from(uniswapTrade.trade.maximumAmountIn(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        // track amount of native currency in the router\n        if (outputIsNative && swapOptions.recipient == ROUTER_AS_RECIPIENT) {\n          currentNativeValueInRouter = currentNativeValueInRouter.add(\n            BigNumber.from(uniswapTrade.trade.minimumAmountOut(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        uniswapTrade.encode(planner, { allowRevert: false })\n        /**\n         * is UnwrapWETH\n         */\n      } else if (trade.tradeType == RouterTradeType.UnwrapWETH) {\n        const UnwrapWETH = trade as UnwrapWETH\n        trade.encode(planner, { allowRevert: false })\n        currentNativeValueInRouter = currentNativeValueInRouter.add(UnwrapWETH.amount)\n        /**\n         * else\n         */\n      } else {\n        throw 'trade must be of instance: UniswapTrade or NFTTrade'\n      }\n    }\n\n    // TODO: matches current logic for now, but should eventually only sweep for multiple NFT trades\n    // or NFT trades with potential slippage (i.e. sudo).\n    // Note: NFTXV2 sends excess ETH to the caller (router), not the specified recipient\n    nftInputTokens.forEach((inputToken) => {\n      planner.addCommand(CommandType.SWEEP, [inputToken, SENDER_AS_RECIPIENT, 0])\n    })\n    return SwapRouter.encodePlan(planner, transactionValue, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * This version does not work correctly for Seaport ERC20->NFT purchases\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given swap.\n   * @param trades to produce call parameters for\n   */\n  public static swapNFTCallParameters(trades: SupportedNFTTrade[], config: SwapRouterConfig = {}): MethodParameters {\n    let planner = new RoutePlanner()\n    let totalPrice = BigNumber.from(0)\n\n    const allowRevert = trades.length == 1 && trades[0].orders.length == 1 ? false : true\n\n    for (const trade of trades) {\n      trade.encode(planner, { allowRevert })\n      totalPrice = totalPrice.add(trade.getTotalPrice())\n    }\n\n    planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, SENDER_AS_RECIPIENT, 0])\n    return SwapRouter.encodePlan(planner, totalPrice, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trades to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapERC20CallParameters(\n    trades: RouterTrade<Currency, Currency, TradeType>,\n    options: SwapOptions\n  ): MethodParameters {\n    // TODO: use permit if signature included in swapOptions\n    const planner = new RoutePlanner()\n\n    const trade: UniswapTrade = new UniswapTrade(trades, options)\n\n    const inputCurrency = trade.trade.inputAmount.currency\n    invariant(!(inputCurrency.isNative && !!options.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n    if (options.inputTokenPermit) {\n      encodePermit(planner, options.inputTokenPermit)\n    }\n\n    const nativeCurrencyValue = inputCurrency.isNative\n      ? BigNumber.from(trade.trade.maximumAmountIn(options.slippageTolerance).quotient.toString())\n      : BigNumber.from(0)\n\n    trade.encode(planner, { allowRevert: false })\n    return SwapRouter.encodePlan(planner, nativeCurrencyValue, {\n      deadline: options.deadlineOrPreviousBlockhash ? BigNumber.from(options.deadlineOrPreviousBlockhash) : undefined,\n    })\n  }\n\n  /**\n   * Encodes a planned route into a method name and parameters for the Router contract.\n   * @param planner the planned route\n   * @param nativeCurrencyValue the native currency value of the planned route\n   * @param config the router config\n   */\n  private static encodePlan(\n    planner: RoutePlanner,\n    nativeCurrencyValue: BigNumber,\n    config: SwapRouterConfig = {}\n  ): MethodParameters {\n    const { commands, inputs } = planner\n    const functionSignature = !!config.deadline ? 'execute(bytes,bytes[],uint256)' : 'execute(bytes,bytes[])'\n    const parameters = !!config.deadline ? [commands, inputs, config.deadline] : [commands, inputs]\n    const calldata = SwapRouter.INTERFACE.encodeFunctionData(functionSignature, parameters)\n    return { calldata, value: nativeCurrencyValue.toHexString() }\n  }\n}\n","import { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type CryptopunkData = {\n  tokenId: BigNumberish\n  recipient: string\n  value: BigNumberish\n}\n\nexport class CryptopunkTrade extends NFTTrade<CryptopunkData> {\n  public static CRYPTOPUNK_ADDRESS: string = '0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb'\n\n  constructor(orders: CryptopunkData[]) {\n    super(Market.Cryptopunks, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      planner.addCommand(CommandType.CRYPTOPUNKS, [item.tokenId, item.recipient, item.value], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: CryptopunkTrade.CRYPTOPUNK_ADDRESS,\n        tokenId: item.tokenId,\n        tokenType: TokenType.Cryptopunk,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/Foundation.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type FoundationData = {\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n  referrer: string // address\n}\n\nexport class FoundationTrade extends NFTTrade<FoundationData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: FoundationData[]) {\n    super(Market.Foundation, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const calldata = FoundationTrade.INTERFACE.encodeFunctionData('buyV2', [\n        item.tokenAddress,\n        item.tokenId,\n        item.price,\n        item.referrer,\n      ])\n      planner.addCommand(\n        CommandType.FOUNDATION,\n        [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: TokenType.ERC721,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/LooksRareV2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber } from 'ethers'\nimport { ZERO_ADDRESS } from '../../utils/constants'\n\nexport type MakerOrder = {\n  quoteType: number\n  globalNonce: string\n  subsetNonce: string\n  orderNonce: string\n  strategyId: number\n  collectionType: number\n  collection: string\n  currency: string\n  signer: string\n  startTime: number\n  endTime: number\n  price: string\n  itemIds: string[]\n  amounts: string[]\n  additionalParameters: string\n}\n\nexport type TakerOrder = {\n  recipient: string\n  additionalParameters: string\n}\n\nexport type MerkleProof = {\n  value: string\n  position: number\n}\n\nexport type MerkleTree = {\n  root: string\n  proof: MerkleProof[]\n}\n\nexport type LRV2APIOrder = MakerOrder & {\n  id: string\n  hash: string\n  signature: string\n  createdAt: string\n  merkleRoot?: string\n  merkleProof?: MerkleProof[]\n  status: string\n}\n\nexport type LooksRareV2Data = {\n  apiOrder: LRV2APIOrder\n  taker: string\n}\n\nexport class LooksRareV2Trade extends NFTTrade<LooksRareV2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n  private static ERC721_ORDER = 0\n\n  constructor(orders: LooksRareV2Data[]) {\n    super(Market.LooksRareV2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    const { takerBids, makerOrders, makerSignatures, totalValue, merkleTrees } = this.refactorAPIData(this.orders)\n\n    let calldata\n    if (this.orders.length == 1) {\n      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeTakerBid', [\n        takerBids[0],\n        makerOrders[0],\n        makerSignatures[0],\n        merkleTrees[0],\n        ZERO_ADDRESS, // affiliate\n      ])\n    } else {\n      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeMultipleTakerBids', [\n        takerBids,\n        makerOrders,\n        makerSignatures,\n        merkleTrees,\n        ZERO_ADDRESS, // affiliate\n        false, // isAtomic (we deal with this in allowRevert)\n      ])\n    }\n\n    planner.addCommand(CommandType.LOOKS_RARE_V2, [totalValue, calldata], config.allowRevert)\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      const tokenAddress = item.apiOrder.collection\n      const tokenType =\n        item.apiOrder.collectionType == LooksRareV2Trade.ERC721_ORDER ? TokenType.ERC721 : TokenType.ERC1155\n      for (const tokenId of item.apiOrder.itemIds)\n        buyItems.push({\n          tokenAddress,\n          tokenId,\n          tokenType,\n        })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.apiOrder.price)\n    }\n    return total\n  }\n\n  private refactorAPIData(orders: LooksRareV2Data[]): {\n    takerBids: TakerOrder[]\n    makerOrders: MakerOrder[]\n    makerSignatures: string[]\n    totalValue: BigNumber\n    merkleTrees: MerkleTree[]\n  } {\n    let takerBids: TakerOrder[] = []\n    let makerOrders: MakerOrder[] = []\n    let makerSignatures: string[] = []\n    let totalValue: BigNumber = BigNumber.from(0)\n    let merkleTrees: MerkleTree[] = []\n\n    orders.forEach((order) => {\n      makerOrders.push({ ...order.apiOrder })\n\n      makerSignatures.push(order.apiOrder.signature)\n\n      takerBids.push({\n        recipient: order.taker,\n        additionalParameters: '0x',\n      })\n\n      totalValue = totalValue.add(BigNumber.from(order.apiOrder.price))\n\n      merkleTrees.push({\n        root: order.apiOrder.merkleRoot ?? '0x0000000000000000000000000000000000000000000000000000000000000000',\n        proof: order.apiOrder.merkleProof ?? [],\n      })\n    })\n\n    return { takerBids, makerOrders, makerSignatures, totalValue, merkleTrees }\n  }\n}\n","import abi from '../../../abis/NFT20.json'\nimport { Interface } from '@ethersproject/abi'\nimport { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFT20Data = {\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  tokenAmounts: BigNumberish[]\n  recipient: string\n  fee: BigNumberish\n  isV3: boolean\n  value: BigNumberish\n}\n\nexport class NFT20Trade extends NFTTrade<NFT20Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFT20Data[]) {\n    super(Market.NFT20, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFT20Trade.INTERFACE.encodeFunctionData('ethForNft', [\n        order.tokenAddress,\n        order.tokenIds,\n        order.tokenAmounts,\n        order.recipient,\n        order.fee,\n        order.isV3,\n      ])\n      planner.addCommand(CommandType.NFT20, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const pool of this.orders) {\n      for (const tokenId of pool.tokenIds) {\n        buyItems.push({\n          tokenAddress: pool.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/NFTXZap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFTXData = {\n  recipient: string\n  vaultId: BigNumberish\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  value: BigNumber\n  swapCalldata: string\n}\n\nexport class NFTXTrade extends NFTTrade<NFTXData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFTXData[]) {\n    super(Market.NFTX, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFTXTrade.INTERFACE.encodeFunctionData('buyAndRedeem', [\n        order.vaultId,\n        order.tokenIds.length,\n        order.tokenIds,\n        order.swapCalldata,\n        order.recipient,\n      ])\n\n      planner.addCommand(CommandType.NFTX, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const tokenId of order.tokenIds) {\n        buyItems.push({\n          tokenAddress: order.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import { BigNumber, BigNumberish } from 'ethers'\nimport { Interface } from '@ethersproject/abi'\nimport abi from '../../../abis/Seaport.json'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { ETH_ADDRESS } from '../../utils/constants'\n\nexport type SeaportData = {\n  items: Order[]\n  recipient: string // address\n  protocolAddress: string\n  inputTokenProcessing?: InputTokenProcessing[]\n}\n\nexport type InputTokenProcessing = {\n  token: string\n  permit2Permit?: Permit2Permit\n  protocolApproval: boolean\n  permit2TransferFrom: boolean\n}\n\nexport type FulfillmentComponent = {\n  orderIndex: BigNumberish\n  itemIndex: BigNumberish\n}\n\nexport type OfferItem = {\n  itemType: BigNumberish // enum\n  token: string // address\n  identifierOrCriteria: BigNumberish\n  startAmount: BigNumberish\n  endAmount: BigNumberish\n}\n\nexport type ConsiderationItem = OfferItem & {\n  recipient: string\n}\n\nexport type Order = {\n  parameters: OrderParameters\n  signature: string\n}\n\ntype OrderParameters = {\n  offerer: string // address,\n  offer: OfferItem[]\n  consideration: ConsiderationItem[]\n  orderType: BigNumberish // enum\n  startTime: BigNumberish\n  endTime: BigNumberish\n  zoneHash: string // bytes32\n  zone: string // address\n  salt: BigNumberish\n  conduitKey: string // bytes32,\n  totalOriginalConsiderationItems: BigNumberish\n}\n\nexport type AdvancedOrder = Order & {\n  numerator: BigNumber // uint120\n  denominator: BigNumber // uint120\n  extraData: string // bytes\n}\n\nexport class SeaportTrade extends NFTTrade<SeaportData> {\n  public static INTERFACE: Interface = new Interface(abi)\n  public static OPENSEA_CONDUIT_KEY: string = '0x0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000'\n\n  constructor(orders: SeaportData[]) {\n    super(Market.Seaport, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      let advancedOrders: AdvancedOrder[] = []\n      let orderFulfillments: FulfillmentComponent[][] = order.items.map((_, index) => [\n        { orderIndex: index, itemIndex: 0 },\n      ])\n      let considerationFulFillments: FulfillmentComponent[][] = this.getConsiderationFulfillments(order.items)\n\n      for (const item of order.items) {\n        const { advancedOrder } = this.getAdvancedOrderParams(item)\n        advancedOrders.push(advancedOrder)\n      }\n\n      let calldata: string\n      if (advancedOrders.length == 1) {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAdvancedOrder', [\n          advancedOrders[0],\n          [],\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n        ])\n      } else {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAvailableAdvancedOrders', [\n          advancedOrders,\n          [],\n          orderFulfillments,\n          considerationFulFillments,\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n          100, // TODO: look into making this a better number\n        ])\n      }\n\n      if (!!order.inputTokenProcessing) {\n        for (const inputToken of order.inputTokenProcessing)\n          encodeInputTokenOptions(planner, {\n            approval: inputToken.protocolApproval\n              ? { token: inputToken.token, protocol: order.protocolAddress }\n              : undefined,\n            permit2Permit: inputToken.permit2Permit,\n            permit2TransferFrom: inputToken.permit2TransferFrom\n              ? { token: inputToken.token, amount: this.getTotalOrderPrice(order, inputToken.token).toString() }\n              : undefined,\n          })\n      }\n\n      planner.addCommand(\n        this.commandMap(order.protocolAddress),\n        [this.getTotalOrderPrice(order, ETH_ADDRESS).toString(), calldata],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const offer of item.parameters.offer) {\n          buyItems.push({\n            tokenAddress: offer.token,\n            tokenId: offer.identifierOrCriteria,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getInputTokens(): Set<string> {\n    let inputTokens = new Set<string>()\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const consideration of item.parameters.consideration) {\n          const token = consideration.token.toLowerCase()\n          inputTokens.add(token)\n        }\n      }\n    }\n    return inputTokens\n  }\n\n  getTotalOrderPrice(order: SeaportData, token: string = ETH_ADDRESS): BigNumber {\n    let totalOrderPrice = BigNumber.from(0)\n    for (const item of order.items) {\n      totalOrderPrice = totalOrderPrice.add(this.calculateValue(item.parameters.consideration, token))\n    }\n    return totalOrderPrice\n  }\n\n  getTotalPrice(token: string = ETH_ADDRESS): BigNumber {\n    let totalPrice = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        totalPrice = totalPrice.add(this.calculateValue(item.parameters.consideration, token))\n      }\n    }\n    return totalPrice\n  }\n\n  private commandMap(protocolAddress: string): CommandType {\n    switch (protocolAddress.toLowerCase()) {\n      case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc': // Seaport v1.5\n        return CommandType.SEAPORT_V1_5\n      case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n        return CommandType.SEAPORT_V1_4\n      default:\n        throw new Error('unsupported Seaport address')\n    }\n  }\n\n  private getConsiderationFulfillments(protocolDatas: Order[]): FulfillmentComponent[][] {\n    let considerationFulfillments: FulfillmentComponent[][] = []\n    const considerationRecipients: string[] = []\n\n    for (const i in protocolDatas) {\n      const protocolData = protocolDatas[i]\n\n      for (const j in protocolData.parameters.consideration) {\n        const item = protocolData.parameters.consideration[j]\n\n        if (considerationRecipients.findIndex((x) => x === item.recipient) === -1) {\n          considerationRecipients.push(item.recipient)\n        }\n\n        const recipientIndex = considerationRecipients.findIndex((x) => x === item.recipient)\n\n        if (!considerationFulfillments[recipientIndex]) {\n          considerationFulfillments.push([\n            {\n              orderIndex: i,\n              itemIndex: j,\n            },\n          ])\n        } else {\n          considerationFulfillments[recipientIndex].push({\n            orderIndex: i,\n            itemIndex: j,\n          })\n        }\n      }\n    }\n    return considerationFulfillments\n  }\n\n  private getAdvancedOrderParams(data: Order): { advancedOrder: AdvancedOrder } {\n    const advancedOrder = {\n      parameters: data.parameters,\n      numerator: BigNumber.from('1'),\n      denominator: BigNumber.from('1'),\n      signature: data.signature,\n      extraData: '0x00',\n    }\n    return { advancedOrder }\n  }\n\n  private calculateValue(considerations: ConsiderationItem[], token: string): BigNumber {\n    return considerations.reduce(\n      (amt: BigNumber, consideration: ConsiderationItem) =>\n        consideration.token.toLowerCase() == token.toLowerCase() ? amt.add(consideration.startAmount) : amt,\n      BigNumber.from(0)\n    )\n  }\n}\n","import abi from '../../../abis/Sudoswap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype PairSwap = {\n  swapInfo: {\n    pair: string // address\n    nftIds: BigNumberish[]\n  }\n  tokenAddress: string // address\n  maxCost: BigNumberish\n}\n\nexport type SudoswapData = {\n  swaps: PairSwap[]\n  nftRecipient: string\n  ethRecipient: string\n  deadline: BigNumberish\n}\n\nexport class SudoswapTrade extends NFTTrade<SudoswapData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: SudoswapData[]) {\n    super(Market.Sudoswap, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = SudoswapTrade.INTERFACE.encodeFunctionData('robustSwapETHForSpecificNFTs', [\n        order.swaps.map((swap) => {\n          return { swapInfo: swap.swapInfo, maxCost: swap.maxCost }\n        }),\n        order.ethRecipient,\n        order.nftRecipient,\n        order.deadline,\n      ])\n      const value = order.swaps.reduce((prevVal, swap) => {\n        return prevVal.add(swap.maxCost)\n      }, BigNumber.from(0))\n      planner.addCommand(CommandType.SUDOSWAP, [value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        for (const tokenId of swap.swapInfo.nftIds) {\n          buyItems.push({\n            tokenAddress: swap.tokenAddress,\n            tokenId,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        total = total.add(swap.maxCost)\n      }\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/X2Y2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype X2Y2PartialData = {\n  signedInput: string\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n}\n\nexport type X2Y2_721_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC721\n}\n\nexport type X2Y2_1155_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC1155\n  tokenAmount: BigNumberish\n}\n\nexport type X2Y2Data = X2Y2_721_Data | X2Y2_1155_Data\n\nexport class X2Y2Trade extends NFTTrade<X2Y2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: X2Y2Data[]) {\n    super(Market.X2Y2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const functionSelector = X2Y2Trade.INTERFACE.getSighash(X2Y2Trade.INTERFACE.getFunction('run'))\n      const calldata = functionSelector + item.signedInput.slice(2)\n\n      if (item.tokenType == TokenType.ERC721) {\n        planner.addCommand(\n          CommandType.X2Y2_721,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n          config.allowRevert\n        )\n      } else if (item.tokenType == TokenType.ERC1155) {\n        planner.addCommand(\n          CommandType.X2Y2_1155,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId, item.tokenAmount],\n          config.allowRevert\n        )\n      }\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: item.tokenType,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumberish } from 'ethers'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { ROUTER_AS_RECIPIENT, WETH_ADDRESS } from '../../utils/constants'\n\nexport class UnwrapWETH implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UnwrapWETH\n  readonly permit2Data: Permit2Permit\n  readonly wethAddress: string\n  readonly amount: BigNumberish\n\n  constructor(amount: BigNumberish, chainId: number, permit2?: Permit2Permit) {\n    this.wethAddress = WETH_ADDRESS(chainId)\n    this.amount = amount\n\n    if (!!permit2) {\n      invariant(\n        permit2.details.token.toLowerCase() === this.wethAddress.toLowerCase(),\n        `must be permitting WETH address: ${this.wethAddress}`\n      )\n      invariant(permit2.details.amount >= amount, `Did not permit enough WETH for unwrapWETH transaction`)\n      this.permit2Data = permit2\n    }\n  }\n\n  encode(planner: RoutePlanner, _: TradeConfig): void {\n    encodeInputTokenOptions(planner, {\n      permit2Permit: this.permit2Data,\n      permit2TransferFrom: {\n        token: this.wethAddress,\n        amount: this.amount.toString(),\n      },\n    })\n    planner.addCommand(CommandType.UNWRAP_WETH, [ROUTER_AS_RECIPIENT, this.amount])\n  }\n}\n","import { MixedRouteSDK, Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount, Ether, Token, TradeType } from '@uniswap/sdk-core'\nimport { Pair, Route as V2Route } from '@uniswap/v2-sdk'\nimport { Pool, Route as V3Route, FeeAmount } from '@uniswap/v3-sdk'\nimport { BigNumber } from 'ethers'\nimport { ETH_ADDRESS, E_ETH_ADDRESS } from './constants'\n\nexport type TokenInRoute = {\n  address: string\n  chainId: number\n  symbol: string\n  decimals: string\n  name?: string\n  buyFeeBps?: string\n  sellFeeBps?: string\n}\n\nexport enum PoolType {\n  V2Pool = 'v2-pool',\n  V3Pool = 'v3-pool',\n}\n\nexport type V2Reserve = {\n  token: TokenInRoute\n  quotient: string\n}\n\nexport type V2PoolInRoute = {\n  type: PoolType.V2Pool\n  address?: string\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  reserve0: V2Reserve\n  reserve1: V2Reserve\n  amountIn?: string\n  amountOut?: string\n}\n\nexport type V3PoolInRoute = {\n  type: PoolType.V3Pool\n  address?: string\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  sqrtRatioX96: string\n  liquidity: string\n  tickCurrent: string\n  fee: string\n  amountIn?: string\n  amountOut?: string\n}\n\nexport type PartialClassicQuote = {\n  // We need tokenIn/Out to support native currency\n  tokenIn: string\n  tokenOut: string\n  tradeType: TradeType\n  route: Array<(V3PoolInRoute | V2PoolInRoute)[]>\n}\n\ninterface RouteResult {\n  routev3: V3Route<Currency, Currency> | null\n  routev2: V2Route<Currency, Currency> | null\n  mixedRoute: MixedRouteSDK<Currency, Currency> | null\n  inputAmount: CurrencyAmount<Currency>\n  outputAmount: CurrencyAmount<Currency>\n}\n\nexport const isNativeCurrency = (address: string) =>\n  address.toLowerCase() === ETH_ADDRESS.toLowerCase() || address.toLowerCase() === E_ETH_ADDRESS.toLowerCase()\n\n// Helper class to convert routing-specific quote entities to RouterTrade entities\n// the returned RouterTrade can then be used to build the UniswapTrade entity in this package\nexport class RouterTradeAdapter {\n  // Generate a RouterTrade using fields from a classic quote response\n  static fromClassicQuote(quote: PartialClassicQuote) {\n    const { route, tokenIn, tokenOut } = quote\n\n    if (!route) throw new Error('Expected route to be present')\n    if (!route.length) throw new Error('Expected there to be at least one route')\n    if (route.some((r) => !r.length)) throw new Error('Expected all routes to have at least one pool')\n    const firstRoute = route[0]\n\n    const tokenInData = firstRoute[0].tokenIn\n    const tokenOutData = firstRoute[firstRoute.length - 1].tokenOut\n\n    if (!tokenInData || !tokenOutData) throw new Error('Expected both tokenIn and tokenOut to be present')\n    if (tokenInData.chainId !== tokenOutData.chainId)\n      throw new Error('Expected tokenIn and tokenOut to be have same chainId')\n\n    const parsedCurrencyIn = RouterTradeAdapter.toCurrency(isNativeCurrency(tokenIn), tokenInData)\n    const parsedCurrencyOut = RouterTradeAdapter.toCurrency(isNativeCurrency(tokenOut), tokenOutData)\n\n    const typedRoutes: RouteResult[] = route.map((subRoute) => {\n      const rawAmountIn = subRoute[0].amountIn\n      const rawAmountOut = subRoute[subRoute.length - 1].amountOut\n\n      if (!rawAmountIn || !rawAmountOut) {\n        throw new Error('Expected both raw amountIn and raw amountOut to be present')\n      }\n\n      const inputAmount = CurrencyAmount.fromRawAmount(parsedCurrencyIn, rawAmountIn)\n      const outputAmount = CurrencyAmount.fromRawAmount(parsedCurrencyOut, rawAmountOut)\n\n      const isOnlyV2 = RouterTradeAdapter.isVersionedRoute<V2PoolInRoute>(PoolType.V2Pool, subRoute)\n      const isOnlyV3 = RouterTradeAdapter.isVersionedRoute<V3PoolInRoute>(PoolType.V3Pool, subRoute)\n\n      return {\n        routev3: isOnlyV3\n          ? new V3Route(\n              (subRoute as V3PoolInRoute[]).map(RouterTradeAdapter.toPool),\n              parsedCurrencyIn,\n              parsedCurrencyOut\n            )\n          : null,\n        routev2: isOnlyV2\n          ? new V2Route(\n              (subRoute as V2PoolInRoute[]).map(RouterTradeAdapter.toPair),\n              parsedCurrencyIn,\n              parsedCurrencyOut\n            )\n          : null,\n        mixedRoute:\n          !isOnlyV3 && !isOnlyV2\n            ? new MixedRouteSDK(subRoute.map(RouterTradeAdapter.toPoolOrPair), parsedCurrencyIn, parsedCurrencyOut)\n            : null,\n        inputAmount,\n        outputAmount,\n      }\n    })\n\n    return new RouterTrade({\n      v2Routes: typedRoutes\n        .filter((route) => route.routev2)\n        .map((route) => ({\n          routev2: route.routev2 as V2Route<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      v3Routes: typedRoutes\n        .filter((route) => route.routev3)\n        .map((route) => ({\n          routev3: route.routev3 as V3Route<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      mixedRoutes: typedRoutes\n        .filter((route) => route.mixedRoute)\n        .map((route) => ({\n          mixedRoute: route.mixedRoute as MixedRouteSDK<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      tradeType: quote.tradeType,\n    })\n  }\n\n  private static toCurrency(isNative: boolean, token: TokenInRoute): Currency {\n    if (isNative) {\n      return Ether.onChain(token.chainId)\n    }\n    return this.toToken(token)\n  }\n\n  private static toPoolOrPair = (pool: V3PoolInRoute | V2PoolInRoute): Pool | Pair => {\n    return pool.type === PoolType.V3Pool ? RouterTradeAdapter.toPool(pool) : RouterTradeAdapter.toPair(pool)\n  }\n\n  private static toToken(token: TokenInRoute): Token {\n    const { chainId, address, decimals, symbol, buyFeeBps, sellFeeBps } = token\n    return new Token(\n      chainId,\n      address,\n      parseInt(decimals.toString()),\n      symbol,\n      /* name */ undefined,\n      false,\n      buyFeeBps ? BigNumber.from(buyFeeBps) : undefined,\n      sellFeeBps ? BigNumber.from(sellFeeBps) : undefined\n    )\n  }\n\n  private static toPool({ fee, sqrtRatioX96, liquidity, tickCurrent, tokenIn, tokenOut }: V3PoolInRoute): Pool {\n    return new Pool(\n      RouterTradeAdapter.toToken(tokenIn),\n      RouterTradeAdapter.toToken(tokenOut),\n      parseInt(fee) as FeeAmount,\n      sqrtRatioX96,\n      liquidity,\n      parseInt(tickCurrent)\n    )\n  }\n\n  private static toPair = ({ reserve0, reserve1 }: V2PoolInRoute): Pair => {\n    return new Pair(\n      CurrencyAmount.fromRawAmount(RouterTradeAdapter.toToken(reserve0.token), reserve0.quotient),\n      CurrencyAmount.fromRawAmount(RouterTradeAdapter.toToken(reserve1.token), reserve1.quotient)\n    )\n  }\n\n  private static isVersionedRoute<T extends V2PoolInRoute | V3PoolInRoute>(\n    type: PoolType,\n    route: (V3PoolInRoute | V2PoolInRoute)[]\n  ): route is T[] {\n    return route.every((pool) => pool.type === type)\n  }\n}\n"],"names":["RouterTradeType","NFTTrade","market","orders","length","invariant","Market","TokenType","CommandType","ALLOW_REVERT_FLAG","REVERTIBLE_COMMANDS","Set","SEAPORT_V1_5","SEAPORT_V1_4","NFTX","LOOKS_RARE_V2","X2Y2_721","X2Y2_1155","FOUNDATION","SUDOSWAP","NFT20","EXECUTE_SUB_PLAN","CRYPTOPUNKS","ELEMENT_MARKET","PERMIT_STRUCT","PERMIT_BATCH_STRUCT","PERMIT2_TRANSFER_FROM_STRUCT","PERMIT2_TRANSFER_FROM_BATCH_STRUCT","ABI_DEFINITION","PERMIT2_PERMIT","PERMIT2_PERMIT_BATCH","PERMIT2_TRANSFER_FROM","PERMIT2_TRANSFER_FROM_BATCH","V3_SWAP_EXACT_IN","V3_SWAP_EXACT_OUT","V2_SWAP_EXACT_IN","V2_SWAP_EXACT_OUT","WRAP_ETH","UNWRAP_WETH","SWEEP","SWEEP_ERC721","SWEEP_ERC1155","TRANSFER","PAY_PORTION","BALANCE_CHECK_ERC20","OWNER_CHECK_721","OWNER_CHECK_1155","APPROVE_ERC20","RoutePlanner","commands","inputs","addSubPlan","subplan","addCommand","type","parameters","allowRevert","command","createCommand","push","encodedInput","has","Error","concat","toString","padStart","defaultAbiCoder","encode","WETH_NOT_SUPPORTED_ON_CHAIN","CHAIN_CONFIGS","router","weth","creationBlock","UNIVERSAL_ROUTER_ADDRESS","chainId","UNIVERSAL_ROUTER_CREATION_BLOCK","WETH_ADDRESS","PERMIT2_ADDRESS","CONTRACT_BALANCE","BigNumber","from","pow","ETH_ADDRESS","E_ETH_ADDRESS","ZERO_ADDRESS","SENDER_AS_RECIPIENT","ROUTER_AS_RECIPIENT","OPENSEA_CONDUIT_SPENDER_ID","SUDOSWAP_SPENDER_ID","encodeFeeBips","fee","toHex","multiply","quotient","REFUND_ETH_PRICE_IMPACT_THRESHOLD","Percent","UniswapTrade","trade","options","flatFee","inputRequiresWrap","payerIsUser","useRouterBalance","planner","_config","maximumAmountIn","slippageTolerance","recipient","performAggregatedSlippageCheck","tradeType","TradeType","EXACT_INPUT","routes","outputIsNative","outputAmount","currency","isNative","routerMustCustody","hasFeeOption","swaps","swap","route","protocol","Protocol","V2","addV2Swap","V3","addV3Swap","MIXED","addMixedSwap","minimumAmountOut","feeBips","wrapped","address","EXACT_OUTPUT","sub","mul","div","feeAmount","amount","lt","riskOfPartialFill","safeMode","inputAmount","V2Trade","path","map","pool","V3Trade","createUncheckedTrade","encodeRouteToPath","tradeRecipient","pools","Pool","Pair","MixedRouteTrade","amountIn","amountOut","sections","partitionMixedRouteByProtocol","isLastSectionInRoute","i","outputToken","inputToken","input","section","getOutputOfPools","newRouteOriginal","MixedRouteSDK","token0","equals","token1","newRoute","MixedRoute","mixedRouteIsAllV3","every","encodeMixedRouteToPath","liquidityToken","priceImpact","greaterThan","swapOptions","SIGNATURE_LENGTH","EIP_2098_SIGNATURE_LENGTH","encodePermit","permit2","signature","ethers","utils","arrayify","joinSignature","splitSignature","encodeInputTokenOptions","approval","permit2Permit","token","details","permit2TransferFrom","mapApprovalProtocol","protocolAddress","toLowerCase","SwapRouter","swapCallParameters","trades","config","Array","isArray","nftTrades","filter","_","hasOwnProperty","currentNativeValueInRouter","transactionValue","nftInputTokens","nftTrade","tradePrice","getTotalPrice","Seaport","seaportTrade","seaportInputTokens","getInputTokens","forEach","add","uniswapTrade","inputIsNative","inputTokenPermit","UnwrapWETH","encodePlan","swapNFTCallParameters","totalPrice","swapERC20CallParameters","inputCurrency","nativeCurrencyValue","deadline","deadlineOrPreviousBlockhash","undefined","functionSignature","calldata","INTERFACE","encodeFunctionData","value","toHexString","Interface","abi","CryptopunkTrade","Cryptopunks","item","tokenId","getBuyItems","buyItems","tokenAddress","CRYPTOPUNK_ADDRESS","tokenType","Cryptopunk","total","FoundationTrade","Foundation","price","referrer","ERC721","LooksRareV2Trade","LooksRareV2","refactorAPIData","takerBids","makerOrders","makerSignatures","totalValue","merkleTrees","apiOrder","collection","collectionType","ERC721_ORDER","ERC1155","itemIds","order","taker","additionalParameters","root","merkleRoot","proof","merkleProof","NFT20Trade","tokenIds","tokenAmounts","isV3","NFTXTrade","vaultId","swapCalldata","SeaportTrade","advancedOrders","orderFulfillments","items","index","orderIndex","itemIndex","considerationFulFillments","getConsiderationFulfillments","getAdvancedOrderParams","advancedOrder","OPENSEA_CONDUIT_KEY","inputTokenProcessing","protocolApproval","getTotalOrderPrice","commandMap","offer","identifierOrCriteria","inputTokens","consideration","totalOrderPrice","calculateValue","protocolDatas","considerationFulfillments","considerationRecipients","protocolData","j","findIndex","x","recipientIndex","data","numerator","denominator","extraData","considerations","reduce","amt","startAmount","SudoswapTrade","Sudoswap","swapInfo","maxCost","ethRecipient","nftRecipient","prevVal","nftIds","X2Y2Trade","X2Y2","functionSelector","getSighash","getFunction","signedInput","slice","tokenAmount","wethAddress","permit2Data","PoolType","isNativeCurrency","RouterTradeAdapter","fromClassicQuote","quote","tokenIn","tokenOut","some","r","firstRoute","tokenInData","tokenOutData","parsedCurrencyIn","toCurrency","parsedCurrencyOut","typedRoutes","subRoute","rawAmountIn","rawAmountOut","CurrencyAmount","fromRawAmount","isOnlyV2","isVersionedRoute","V2Pool","isOnlyV3","V3Pool","routev3","V3Route","toPool","routev2","V2Route","toPair","mixedRoute","toPoolOrPair","RouterTrade","v2Routes","v3Routes","mixedRoutes","Ether","onChain","toToken","decimals","symbol","buyFeeBps","sellFeeBps","Token","parseInt","sqrtRatioX96","liquidity","tickCurrent","reserve0","reserve1"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"universal-router-sdk.esm.js","sources":["../src/entities/Command.ts","../src/entities/NFTTrade.ts","../src/utils/routerCommands.ts","../src/utils/constants.ts","../src/utils/numbers.ts","../src/entities/protocols/uniswap.ts","../src/utils/inputTokens.ts","../src/swapRouter.ts","../src/entities/protocols/cryptopunk.ts","../src/entities/protocols/foundation.ts","../src/entities/protocols/looksRareV2.ts","../src/entities/protocols/nft20.ts","../src/entities/protocols/nftx.ts","../src/entities/protocols/seaport.ts","../src/entities/protocols/sudoswap.ts","../src/entities/protocols/x2y2.ts","../src/entities/protocols/unwrapWETH.ts","../src/utils/routerTradeAdapter.ts"],"sourcesContent":["import { RoutePlanner } from '../utils/routerCommands'\n\nexport type TradeConfig = {\n  allowRevert: boolean\n}\n\nexport enum RouterTradeType {\n  UniswapTrade = 'UniswapTrade',\n  NFTTrade = 'NFTTrade',\n  UnwrapWETH = 'UnwrapWETH',\n}\n\n// interface for entities that can be encoded as a Universal Router command\nexport interface Command {\n  tradeType: RouterTradeType\n  encode(planner: RoutePlanner, config: TradeConfig): void\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { SeaportData } from './protocols/seaport'\nimport { FoundationData } from './protocols/foundation'\nimport { NFTXData } from './protocols/nftx'\nimport { NFT20Data } from './protocols/nft20'\nimport { RoutePlanner } from '../utils/routerCommands'\nimport { Command, RouterTradeType, TradeConfig } from './Command'\nimport { SudoswapData } from './protocols/sudoswap'\nimport { CryptopunkData } from './protocols/cryptopunk'\nimport { X2Y2Data } from './protocols/x2y2'\nimport { ElementData } from './protocols/element-market'\nimport { LooksRareV2Data } from './protocols/looksRareV2'\n\nexport type SupportedProtocolsData =\n  | SeaportData\n  | FoundationData\n  | NFTXData\n  | LooksRareV2Data\n  | X2Y2Data\n  | CryptopunkData\n  | NFT20Data\n  | SudoswapData\n  | ElementData\n\nexport abstract class NFTTrade<T> implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.NFTTrade\n  readonly orders: T[]\n  readonly market: Market\n\n  constructor(market: Market, orders: T[]) {\n    invariant(orders.length > 0, 'no buy Items')\n    this.market = market\n    this.orders = orders\n  }\n\n  abstract encode(planner: RoutePlanner, config: TradeConfig): void\n\n  abstract getBuyItems(): BuyItem[]\n\n  // optional parameter for the markets that accept ERC20s not just ETH\n  abstract getTotalPrice(token?: string): BigNumber\n}\n\nexport type BuyItem = {\n  tokenAddress: string\n  tokenId: BigNumberish\n  tokenType: TokenType\n  amount?: BigNumberish // for 1155\n}\n\nexport enum Market {\n  Foundation = 'foundation',\n  LooksRareV2 = 'looksrareV2',\n  NFT20 = 'nft20',\n  NFTX = 'nftx',\n  Seaport = 'seaport',\n  Sudoswap = 'Sudoswap',\n  Cryptopunks = 'cryptopunks',\n  X2Y2 = 'x2y2',\n  Element = 'element',\n}\n\nexport enum TokenType {\n  ERC721 = 'ERC721',\n  ERC1155 = 'ERC1155',\n  Cryptopunk = 'Cryptopunk',\n}\n","import { defaultAbiCoder } from 'ethers/lib/utils'\n\n/**\n * CommandTypes\n * @description Flags that modify a command's execution\n * @enum {number}\n */\nexport enum CommandType {\n  V3_SWAP_EXACT_IN = 0x00,\n  V3_SWAP_EXACT_OUT = 0x01,\n  PERMIT2_TRANSFER_FROM = 0x02,\n  PERMIT2_PERMIT_BATCH = 0x03,\n  SWEEP = 0x04,\n  TRANSFER = 0x05,\n  PAY_PORTION = 0x06,\n\n  V2_SWAP_EXACT_IN = 0x08,\n  V2_SWAP_EXACT_OUT = 0x09,\n  PERMIT2_PERMIT = 0x0a,\n  WRAP_ETH = 0x0b,\n  UNWRAP_WETH = 0x0c,\n  PERMIT2_TRANSFER_FROM_BATCH = 0x0d,\n  BALANCE_CHECK_ERC20 = 0x0e,\n\n  // NFT-related command types\n  SEAPORT_V1_5 = 0x10,\n  LOOKS_RARE_V2 = 0x11,\n  NFTX = 0x12,\n  CRYPTOPUNKS = 0x13,\n  // 0x14\n  OWNER_CHECK_721 = 0x15,\n  OWNER_CHECK_1155 = 0x16,\n  SWEEP_ERC721 = 0x17,\n\n  X2Y2_721 = 0x18,\n  SUDOSWAP = 0x19,\n  NFT20 = 0x1a,\n  X2Y2_1155 = 0x1b,\n  FOUNDATION = 0x1c,\n  SWEEP_ERC1155 = 0x1d,\n  ELEMENT_MARKET = 0x1e,\n\n  SEAPORT_V1_4 = 0x20,\n  EXECUTE_SUB_PLAN = 0x21,\n  APPROVE_ERC20 = 0x22,\n}\n\nconst ALLOW_REVERT_FLAG = 0x80\n\nconst REVERTIBLE_COMMANDS = new Set<CommandType>([\n  CommandType.SEAPORT_V1_5,\n  CommandType.SEAPORT_V1_4,\n  CommandType.NFTX,\n  CommandType.LOOKS_RARE_V2,\n  CommandType.X2Y2_721,\n  CommandType.X2Y2_1155,\n  CommandType.FOUNDATION,\n  CommandType.SUDOSWAP,\n  CommandType.NFT20,\n  CommandType.EXECUTE_SUB_PLAN,\n  CommandType.CRYPTOPUNKS,\n  CommandType.ELEMENT_MARKET,\n])\n\nconst PERMIT_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce) details,address spender,uint256 sigDeadline)'\n\nconst PERMIT_BATCH_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce)[] details,address spender,uint256 sigDeadline)'\n\nconst PERMIT2_TRANSFER_FROM_STRUCT = '(address from,address to,uint160 amount,address token)'\nconst PERMIT2_TRANSFER_FROM_BATCH_STRUCT = PERMIT2_TRANSFER_FROM_STRUCT + '[]'\n\nconst ABI_DEFINITION: { [key in CommandType]: string[] } = {\n  // Batch Reverts\n  [CommandType.EXECUTE_SUB_PLAN]: ['bytes', 'bytes[]'],\n\n  // Permit2 Actions\n  [CommandType.PERMIT2_PERMIT]: [PERMIT_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_PERMIT_BATCH]: [PERMIT_BATCH_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_TRANSFER_FROM]: ['address', 'address', 'uint160'],\n  [CommandType.PERMIT2_TRANSFER_FROM_BATCH]: [PERMIT2_TRANSFER_FROM_BATCH_STRUCT],\n\n  // Uniswap Actions\n  [CommandType.V3_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V3_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V2_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n  [CommandType.V2_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n\n  // Token Actions and Checks\n  [CommandType.WRAP_ETH]: ['address', 'uint256'],\n  [CommandType.UNWRAP_WETH]: ['address', 'uint256'],\n  [CommandType.SWEEP]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC721]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.TRANSFER]: ['address', 'address', 'uint256'],\n  [CommandType.PAY_PORTION]: ['address', 'address', 'uint256'],\n  [CommandType.BALANCE_CHECK_ERC20]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_721]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.APPROVE_ERC20]: ['address', 'uint256'],\n\n  // NFT Markets\n  [CommandType.SEAPORT_V1_5]: ['uint256', 'bytes'],\n  [CommandType.SEAPORT_V1_4]: ['uint256', 'bytes'],\n  [CommandType.NFTX]: ['uint256', 'bytes'],\n  [CommandType.LOOKS_RARE_V2]: ['uint256', 'bytes'],\n  [CommandType.X2Y2_721]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.X2Y2_1155]: ['uint256', 'bytes', 'address', 'address', 'uint256', 'uint256'],\n  [CommandType.FOUNDATION]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.SUDOSWAP]: ['uint256', 'bytes'],\n  [CommandType.NFT20]: ['uint256', 'bytes'],\n  [CommandType.CRYPTOPUNKS]: ['uint256', 'address', 'uint256'],\n  [CommandType.ELEMENT_MARKET]: ['uint256', 'bytes'],\n}\n\nexport class RoutePlanner {\n  commands: string\n  inputs: string[]\n\n  constructor() {\n    this.commands = '0x'\n    this.inputs = []\n  }\n\n  addSubPlan(subplan: RoutePlanner): void {\n    this.addCommand(CommandType.EXECUTE_SUB_PLAN, [subplan.commands, subplan.inputs], true)\n  }\n\n  addCommand(type: CommandType, parameters: any[], allowRevert = false): void {\n    let command = createCommand(type, parameters)\n    this.inputs.push(command.encodedInput)\n    if (allowRevert) {\n      if (!REVERTIBLE_COMMANDS.has(command.type)) {\n        throw new Error(`command type: ${command.type} cannot be allowed to revert`)\n      }\n      command.type = command.type | ALLOW_REVERT_FLAG\n    }\n\n    this.commands = this.commands.concat(command.type.toString(16).padStart(2, '0'))\n  }\n}\n\nexport type RouterCommand = {\n  type: CommandType\n  encodedInput: string\n}\n\nexport function createCommand(type: CommandType, parameters: any[]): RouterCommand {\n  const encodedInput = defaultAbiCoder.encode(ABI_DEFINITION[type], parameters)\n  return { type, encodedInput }\n}\n","import { BigNumber } from 'ethers'\n\ntype ChainConfig = {\n  router: string\n  creationBlock: number\n  weth: string\n}\n\nconst WETH_NOT_SUPPORTED_ON_CHAIN = '0x0000000000000000000000000000000000000000'\n\nconst CHAIN_CONFIGS: { [key: number]: ChainConfig } = {\n  // mainnet\n  [1]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    creationBlock: 17143817,\n  },\n  // goerli\n  [5]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6',\n    creationBlock: 8940568,\n  },\n  // sepolia\n  [11155111]: {\n    router: '0x1678413030D5f7719e17Ba37e77134268f9b8193',\n    weth: '0xb16F35c0Ae2912430DAc15764477E179D9B9EbEa',\n    creationBlock: 3543575,\n  },\n  // polygon\n  [137]: {\n    router: '0xec7BE89e9d109e7e3Fec59c222CF297125FEFda2',\n    weth: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    creationBlock: 52210153,\n  },\n  //polygon mumbai\n  [80001]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',\n    creationBlock: 35176052,\n  },\n  //optimism\n  [10]: {\n    router: '0xCb1355ff08Ab38bBCE60111F1bb2B784bE25D7e8',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 114702266,\n  },\n  // optimism goerli\n  [420]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 8887728,\n  },\n  // arbitrum\n  [42161]: {\n    router: '0x5E325eDA8064b456f4781070C0738d849c824258',\n    weth: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n    creationBlock: 169472836,\n  },\n  // arbitrum goerli\n  [421613]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3',\n    creationBlock: 18815277,\n  },\n  // celo\n  [42220]: {\n    router: '0x643770e279d5d0733f21d6dc03a8efbabf3255b4',\n    weth: WETH_NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 21407637,\n  },\n  // celo alfajores\n  [44787]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: WETH_NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 17566658,\n  },\n  // binance smart chain\n  [56]: {\n    router: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',\n    weth: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    creationBlock: 35160263,\n  },\n  // avalanche\n  [43114]: {\n    router: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',\n    weth: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    creationBlock: 40237257,\n  },\n  // base goerli\n  [84531]: {\n    router: '0xd0872d928672ae2ff74bdb2f5130ac12229cafaf',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 6915289,\n  },\n  // base mainnet\n  [8453]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 9107268,\n  },\n  [81457]: {\n    router: '0x643770E279d5D0733F21d6DC03A8efbABf3255B4',\n    weth: '0x4300000000000000000000000000000000000004',\n    creationBlock: 1116444,\n  },\n}\n\nexport const UNIVERSAL_ROUTER_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].router\n}\n\nexport const UNIVERSAL_ROUTER_CREATION_BLOCK = (chainId: number): number => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].creationBlock\n}\n\nexport const WETH_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n\n  if (CHAIN_CONFIGS[chainId].weth == WETH_NOT_SUPPORTED_ON_CHAIN) throw new Error(`Chain ${chainId} does not have WETH`)\n\n  return CHAIN_CONFIGS[chainId].weth\n}\n\nexport const PERMIT2_ADDRESS = '0x000000000022D473030F116dDEE9F6B43aC78BA3'\n\nexport const CONTRACT_BALANCE = BigNumber.from(2).pow(255)\nexport const ETH_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const E_ETH_ADDRESS = '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee'\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const MAX_UINT256 = BigNumber.from(2).pow(256).sub(1)\nexport const MAX_UINT160 = BigNumber.from(2).pow(160).sub(1)\n\nexport const SENDER_AS_RECIPIENT = '0x0000000000000000000000000000000000000001'\nexport const ROUTER_AS_RECIPIENT = '0x0000000000000000000000000000000000000002'\n\nexport const OPENSEA_CONDUIT_SPENDER_ID = 0\nexport const SUDOSWAP_SPENDER_ID = 1\n","import { BigNumber } from 'ethers'\nimport JSBI from 'jsbi'\nimport bn from 'bignumber.js'\nimport { Percent } from '@uniswap/sdk-core'\nimport { toHex } from '@uniswap/v3-sdk'\n\nexport function expandTo18DecimalsBN(n: number): BigNumber {\n  // use bn intermediately to allow decimals in intermediate calculations\n  return BigNumber.from(new bn(n).times(new bn(10).pow(18)).toFixed())\n}\n\nexport function expandTo18Decimals(n: number): JSBI {\n  return JSBI.BigInt(BigNumber.from(n).mul(BigNumber.from(10).pow(18)).toString())\n}\n\nexport function encodeFeeBips(fee: Percent): string {\n  return toHex(fee.multiply(10_000).quotient)\n}\n","import { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { Trade as V2Trade, Pair } from '@uniswap/v2-sdk'\nimport { Trade as V3Trade, Pool, encodeRouteToPath } from '@uniswap/v3-sdk'\nimport {\n  Trade as RouterTrade,\n  MixedRouteTrade,\n  Protocol,\n  IRoute,\n  RouteV2,\n  RouteV3,\n  MixedRouteSDK,\n  MixedRoute,\n  SwapOptions as RouterSwapOptions,\n  getOutputOfPools,\n  encodeMixedRouteToPath,\n  partitionMixedRouteByProtocol,\n} from '@uniswap/router-sdk'\nimport { Permit2Permit } from '../../utils/inputTokens'\nimport { Currency, TradeType, CurrencyAmount, Percent } from '@uniswap/sdk-core'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { SENDER_AS_RECIPIENT, ROUTER_AS_RECIPIENT, CONTRACT_BALANCE, ETH_ADDRESS } from '../../utils/constants'\nimport { encodeFeeBips } from '../../utils/numbers'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type FlatFeeOptions = {\n  amount: BigNumberish\n  recipient: string\n}\n\n// the existing router permit object doesn't include enough data for permit2\n// so we extend swap options with the permit2 permit\n// when safe mode is enabled, the SDK will add an extra ETH sweep for security\n// when useRouterBalance is enabled the SDK will use the balance in the router for the swap\nexport type SwapOptions = Omit<RouterSwapOptions, 'inputTokenPermit'> & {\n  useRouterBalance?: boolean\n  inputTokenPermit?: Permit2Permit\n  flatFee?: FlatFeeOptions\n  safeMode?: boolean\n}\n\nconst REFUND_ETH_PRICE_IMPACT_THRESHOLD = new Percent(50, 100)\n\ninterface Swap<TInput extends Currency, TOutput extends Currency> {\n  route: IRoute<TInput, TOutput, Pair | Pool>\n  inputAmount: CurrencyAmount<TInput>\n  outputAmount: CurrencyAmount<TOutput>\n}\n\n// Wrapper for uniswap router-sdk trade entity to encode swaps for Universal Router\n// also translates trade objects from previous (v2, v3) SDKs\nexport class UniswapTrade implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UniswapTrade\n  readonly payerIsUser: boolean\n\n  constructor(public trade: RouterTrade<Currency, Currency, TradeType>, public options: SwapOptions) {\n    if (!!options.fee && !!options.flatFee) throw new Error('Only one fee option permitted')\n\n    if (this.inputRequiresWrap) this.payerIsUser = false\n    else if (this.options.useRouterBalance) this.payerIsUser = false\n    else this.payerIsUser = true\n  }\n\n  get inputRequiresWrap(): boolean {\n    return this.trade.inputAmount.currency.isNative\n  }\n\n  encode(planner: RoutePlanner, _config: TradeConfig): void {\n    // If the input currency is the native currency, we need to wrap it with the router as the recipient\n    if (this.inputRequiresWrap) {\n      // TODO: optimize if only one v2 pool we can directly send this to the pool\n      planner.addCommand(CommandType.WRAP_ETH, [\n        ROUTER_AS_RECIPIENT,\n        this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString(),\n      ])\n    }\n    // The overall recipient at the end of the trade, SENDER_AS_RECIPIENT uses the msg.sender\n    this.options.recipient = this.options.recipient ?? SENDER_AS_RECIPIENT\n\n    // flag for whether we want to perform slippage check on aggregate output of multiple routes\n    //   1. when there are >2 exact input trades. this is only a heuristic,\n    //      as it's still more gas-expensive even in this case, but has benefits\n    //      in that the reversion probability is lower\n    const performAggregatedSlippageCheck =\n      this.trade.tradeType === TradeType.EXACT_INPUT && this.trade.routes.length > 2\n    const outputIsNative = this.trade.outputAmount.currency.isNative\n    const routerMustCustody = performAggregatedSlippageCheck || outputIsNative || hasFeeOption(this.options)\n\n    for (const swap of this.trade.swaps) {\n      switch (swap.route.protocol) {\n        case Protocol.V2:\n          addV2Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        case Protocol.V3:\n          addV3Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        case Protocol.MIXED:\n          addMixedSwap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        default:\n          throw new Error('UNSUPPORTED_TRADE_PROTOCOL')\n      }\n    }\n\n    let minimumAmountOut: BigNumber = BigNumber.from(\n      this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString()\n    )\n\n    // The router custodies for 3 reasons: to unwrap, to take a fee, and/or to do a slippage check\n    if (routerMustCustody) {\n      // If there is a fee, that percentage is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.fee) {\n        const feeBips = encodeFeeBips(this.options.fee.fee)\n        planner.addCommand(CommandType.PAY_PORTION, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.fee.recipient,\n          feeBips,\n        ])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(minimumAmountOut.mul(feeBips).div(10000))\n        }\n      }\n\n      // If there is a flat fee, that absolute amount is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.flatFee) {\n        const feeAmount = this.options.flatFee.amount\n        if (minimumAmountOut.lt(feeAmount)) throw new Error('Flat fee amount greater than minimumAmountOut')\n\n        planner.addCommand(CommandType.TRANSFER, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.flatFee.recipient,\n          feeAmount,\n        ])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(feeAmount)\n        }\n      }\n\n      // The remaining tokens that need to be sent to the user after the fee is taken will be caught\n      // by this if-else clause.\n      if (outputIsNative) {\n        planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, minimumAmountOut])\n      } else {\n        planner.addCommand(CommandType.SWEEP, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.recipient,\n          minimumAmountOut,\n        ])\n      }\n    }\n\n    if (this.inputRequiresWrap && (this.trade.tradeType === TradeType.EXACT_OUTPUT || riskOfPartialFill(this.trade))) {\n      // for exactOutput swaps that take native currency as input\n      // we need to send back the change to the user\n      planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, 0])\n    }\n\n    if (this.options.safeMode) planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, this.options.recipient, 0])\n  }\n}\n\n// encode a uniswap v2 swap\nfunction addV2Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = new V2Trade(\n    route as RouteV2<TInput, TOutput>,\n    tradeType == TradeType.EXACT_INPUT ? inputAmount : outputAmount,\n    tradeType\n  )\n\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n      // if native, we have to unwrap so keep in the router for now\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a uniswap v3 swap\nfunction addV3Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = V3Trade.createUncheckedTrade({\n    route: route as RouteV3<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const path = encodeRouteToPath(route as RouteV3<TInput, TOutput>, trade.tradeType === TradeType.EXACT_OUTPUT)\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a mixed route swap, i.e. including both v2 and v3 pools\nfunction addMixedSwap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  swap: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const { route, inputAmount, outputAmount } = swap\n  const tradeRecipient = routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient\n\n  // single hop, so it can be reduced to plain v2 or v3 swap logic\n  if (route.pools.length === 1) {\n    if (route.pools[0] instanceof Pool) {\n      return addV3Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else if (route.pools[0] instanceof Pair) {\n      return addV2Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else {\n      throw new Error('Invalid route type')\n    }\n  }\n\n  const trade = MixedRouteTrade.createUncheckedTrade({\n    route: route as MixedRoute<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const amountIn = trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient.toString()\n  const amountOut = trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient.toString()\n\n  // logic from\n  // https://github.com/Uniswap/router-sdk/blob/d8eed164e6c79519983844ca8b6a3fc24ebcb8f8/src/swapRouter.ts#L276\n  const sections = partitionMixedRouteByProtocol(route as MixedRoute<TInput, TOutput>)\n  const isLastSectionInRoute = (i: number) => {\n    return i === sections.length - 1\n  }\n\n  let outputToken\n  let inputToken = route.input.wrapped\n\n  for (let i = 0; i < sections.length; i++) {\n    const section = sections[i]\n    /// Now, we get output of this section\n    outputToken = getOutputOfPools(section, inputToken)\n\n    const newRouteOriginal = new MixedRouteSDK(\n      [...section],\n      section[0].token0.equals(inputToken) ? section[0].token0 : section[0].token1,\n      outputToken\n    )\n    const newRoute = new MixedRoute(newRouteOriginal)\n\n    /// Previous output is now input\n    inputToken = outputToken\n\n    const mixedRouteIsAllV3 = (route: MixedRouteSDK<Currency, Currency>) => {\n      return route.pools.every((pool) => pool instanceof Pool)\n    }\n\n    if (mixedRouteIsAllV3(newRoute)) {\n      const path: string = encodeMixedRouteToPath(newRoute)\n\n      planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n        // if not last section: send tokens directly to the first v2 pair of the next section\n        // note: because of the partitioning function we can be sure that the next section is v2\n        isLastSectionInRoute(i) ? tradeRecipient : (sections[i + 1][0] as Pair).liquidityToken.address,\n        i == 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOut\n        path, // path\n        payerIsUser && i === 0, // payerIsUser\n      ])\n    } else {\n      planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n        isLastSectionInRoute(i) ? tradeRecipient : ROUTER_AS_RECIPIENT, // recipient\n        i === 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOutMin\n        newRoute.path.map((pool) => pool.address), // path\n        payerIsUser && i === 0,\n      ])\n    }\n  }\n}\n\n// if price impact is very high, there's a chance of hitting max/min prices resulting in a partial fill of the swap\nfunction riskOfPartialFill(trade: RouterTrade<Currency, Currency, TradeType>): boolean {\n  return trade.priceImpact.greaterThan(REFUND_ETH_PRICE_IMPACT_THRESHOLD)\n}\n\nfunction hasFeeOption(swapOptions: SwapOptions): boolean {\n  return !!swapOptions.fee || !!swapOptions.flatFee\n}\n","import invariant from 'tiny-invariant'\nimport { ethers } from 'ethers'\nimport { PermitSingle } from '@uniswap/permit2-sdk'\nimport { CommandType, RoutePlanner } from './routerCommands'\nimport { OPENSEA_CONDUIT_SPENDER_ID, ROUTER_AS_RECIPIENT, SUDOSWAP_SPENDER_ID } from './constants'\n\nexport interface Permit2Permit extends PermitSingle {\n  signature: string\n}\n\nexport type ApproveProtocol = {\n  token: string\n  protocol: string\n}\n\nexport type Permit2TransferFrom = {\n  token: string\n  amount: string\n  recipient?: string\n}\n\nexport type InputTokenOptions = {\n  approval?: ApproveProtocol\n  permit2Permit?: Permit2Permit\n  permit2TransferFrom?: Permit2TransferFrom\n}\n\nconst SIGNATURE_LENGTH = 65\nconst EIP_2098_SIGNATURE_LENGTH = 64\n\nexport function encodePermit(planner: RoutePlanner, permit2: Permit2Permit): void {\n  let signature = permit2.signature\n\n  const length = ethers.utils.arrayify(permit2.signature).length\n  // signature data provided for EIP-1271 may have length different from ECDSA signature\n  if (length === SIGNATURE_LENGTH || length === EIP_2098_SIGNATURE_LENGTH) {\n    // sanitizes signature to cover edge cases of malformed EIP-2098 sigs and v used as recovery id\n    signature = ethers.utils.joinSignature(ethers.utils.splitSignature(permit2.signature))\n  }\n\n  planner.addCommand(CommandType.PERMIT2_PERMIT, [permit2, signature])\n}\n\n// Handles the encoding of commands needed to gather input tokens for a trade\n// Approval: The router approving another address to take tokens.\n//   note: Only seaport and sudoswap support this action. Approvals are left open.\n// Permit: A Permit2 signature-based Permit to allow the router to access a user's tokens\n// Transfer: A Permit2 TransferFrom of tokens from a user to either the router or another address\nexport function encodeInputTokenOptions(planner: RoutePlanner, options: InputTokenOptions) {\n  // first ensure that all tokens provided for encoding are the same\n  if (!!options.approval && !!options.permit2Permit)\n    invariant(options.approval.token === options.permit2Permit.details.token, `inconsistent token`)\n  if (!!options.approval && !!options.permit2TransferFrom)\n    invariant(options.approval.token === options.permit2TransferFrom.token, `inconsistent token`)\n  if (!!options.permit2TransferFrom && !!options.permit2Permit)\n    invariant(options.permit2TransferFrom.token === options.permit2Permit.details.token, `inconsistent token`)\n\n  // if an options.approval is required, add it\n  if (!!options.approval) {\n    planner.addCommand(CommandType.APPROVE_ERC20, [\n      options.approval.token,\n      mapApprovalProtocol(options.approval.protocol),\n    ])\n  }\n\n  // if this order has a options.permit2Permit, encode it\n  if (!!options.permit2Permit) {\n    encodePermit(planner, options.permit2Permit)\n  }\n\n  if (!!options.permit2TransferFrom) {\n    planner.addCommand(CommandType.PERMIT2_TRANSFER_FROM, [\n      options.permit2TransferFrom.token,\n      options.permit2TransferFrom.recipient ? options.permit2TransferFrom.recipient : ROUTER_AS_RECIPIENT,\n      options.permit2TransferFrom.amount,\n    ])\n  }\n}\n\nfunction mapApprovalProtocol(protocolAddress: string): number {\n  switch (protocolAddress.toLowerCase()) {\n    case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc': // Seaport v1.5\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x2b2e8cda09bba9660dca5cb6233787738ad68329': // Sudoswap\n      return SUDOSWAP_SPENDER_ID\n    default:\n      throw new Error('unsupported protocol address')\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { abi } from '@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { MethodParameters } from '@uniswap/v3-sdk'\nimport { Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, TradeType } from '@uniswap/sdk-core'\nimport { Command, RouterTradeType } from './entities/Command'\nimport { Market, NFTTrade, SupportedProtocolsData } from './entities/NFTTrade'\nimport { UniswapTrade, SwapOptions } from './entities/protocols/uniswap'\nimport { UnwrapWETH } from './entities/protocols/unwrapWETH'\nimport { CommandType, RoutePlanner } from './utils/routerCommands'\nimport { encodePermit } from './utils/inputTokens'\nimport { ROUTER_AS_RECIPIENT, SENDER_AS_RECIPIENT, ETH_ADDRESS } from './utils/constants'\nimport { SeaportTrade } from './entities'\n\nexport type SwapRouterConfig = {\n  sender?: string // address\n  deadline?: BigNumberish\n}\n\ntype SupportedNFTTrade = NFTTrade<SupportedProtocolsData>\n\nexport abstract class SwapRouter {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  public static swapCallParameters(trades: Command[] | Command, config: SwapRouterConfig = {}): MethodParameters {\n    if (!Array.isArray(trades)) trades = [trades]\n\n    const nftTrades = trades.filter((trade, _, []) => trade.hasOwnProperty('market')) as SupportedNFTTrade[]\n    const allowRevert = nftTrades.length == 1 && nftTrades[0].orders.length == 1 ? false : true\n    const planner = new RoutePlanner()\n\n    // track value flow to require the right amount of native value\n    let currentNativeValueInRouter = BigNumber.from(0)\n    let transactionValue = BigNumber.from(0)\n\n    // tracks the input tokens (and ETH) used to buy NFTs to allow us to sweep\n    let nftInputTokens = new Set<string>()\n\n    for (const trade of trades) {\n      /**\n       * is NFTTrade\n       */\n      if (trade.tradeType == RouterTradeType.NFTTrade) {\n        const nftTrade = trade as SupportedNFTTrade\n        nftTrade.encode(planner, { allowRevert })\n        const tradePrice = nftTrade.getTotalPrice()\n\n        if (nftTrade.market == Market.Seaport) {\n          const seaportTrade = nftTrade as SeaportTrade\n          const seaportInputTokens = seaportTrade.getInputTokens()\n          seaportInputTokens.forEach((inputToken) => {\n            nftInputTokens.add(inputToken)\n          })\n        } else {\n          nftInputTokens.add(ETH_ADDRESS)\n        }\n\n        // send enough native value to contract for NFT purchase\n        if (currentNativeValueInRouter.lt(tradePrice)) {\n          transactionValue = transactionValue.add(tradePrice.sub(currentNativeValueInRouter))\n          currentNativeValueInRouter = BigNumber.from(0)\n        } else {\n          currentNativeValueInRouter = currentNativeValueInRouter.sub(tradePrice)\n        }\n        /**\n         * is UniswapTrade\n         */\n      } else if (trade.tradeType == RouterTradeType.UniswapTrade) {\n        const uniswapTrade = trade as UniswapTrade\n        const inputIsNative = uniswapTrade.trade.inputAmount.currency.isNative\n        const outputIsNative = uniswapTrade.trade.outputAmount.currency.isNative\n        const swapOptions = uniswapTrade.options\n\n        invariant(!(inputIsNative && !!swapOptions.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n        if (!!swapOptions.inputTokenPermit) {\n          encodePermit(planner, swapOptions.inputTokenPermit)\n        }\n\n        if (inputIsNative) {\n          transactionValue = transactionValue.add(\n            BigNumber.from(uniswapTrade.trade.maximumAmountIn(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        // track amount of native currency in the router\n        if (outputIsNative && swapOptions.recipient == ROUTER_AS_RECIPIENT) {\n          currentNativeValueInRouter = currentNativeValueInRouter.add(\n            BigNumber.from(uniswapTrade.trade.minimumAmountOut(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        uniswapTrade.encode(planner, { allowRevert: false })\n        /**\n         * is UnwrapWETH\n         */\n      } else if (trade.tradeType == RouterTradeType.UnwrapWETH) {\n        const UnwrapWETH = trade as UnwrapWETH\n        trade.encode(planner, { allowRevert: false })\n        currentNativeValueInRouter = currentNativeValueInRouter.add(UnwrapWETH.amount)\n        /**\n         * else\n         */\n      } else {\n        throw 'trade must be of instance: UniswapTrade or NFTTrade'\n      }\n    }\n\n    // TODO: matches current logic for now, but should eventually only sweep for multiple NFT trades\n    // or NFT trades with potential slippage (i.e. sudo).\n    // Note: NFTXV2 sends excess ETH to the caller (router), not the specified recipient\n    nftInputTokens.forEach((inputToken) => {\n      planner.addCommand(CommandType.SWEEP, [inputToken, SENDER_AS_RECIPIENT, 0])\n    })\n    return SwapRouter.encodePlan(planner, transactionValue, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * This version does not work correctly for Seaport ERC20->NFT purchases\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given swap.\n   * @param trades to produce call parameters for\n   */\n  public static swapNFTCallParameters(trades: SupportedNFTTrade[], config: SwapRouterConfig = {}): MethodParameters {\n    let planner = new RoutePlanner()\n    let totalPrice = BigNumber.from(0)\n\n    const allowRevert = trades.length == 1 && trades[0].orders.length == 1 ? false : true\n\n    for (const trade of trades) {\n      trade.encode(planner, { allowRevert })\n      totalPrice = totalPrice.add(trade.getTotalPrice())\n    }\n\n    planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, SENDER_AS_RECIPIENT, 0])\n    return SwapRouter.encodePlan(planner, totalPrice, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trades to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapERC20CallParameters(\n    trades: RouterTrade<Currency, Currency, TradeType>,\n    options: SwapOptions\n  ): MethodParameters {\n    // TODO: use permit if signature included in swapOptions\n    const planner = new RoutePlanner()\n\n    const trade: UniswapTrade = new UniswapTrade(trades, options)\n\n    const inputCurrency = trade.trade.inputAmount.currency\n    invariant(!(inputCurrency.isNative && !!options.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n    if (options.inputTokenPermit) {\n      encodePermit(planner, options.inputTokenPermit)\n    }\n\n    const nativeCurrencyValue = inputCurrency.isNative\n      ? BigNumber.from(trade.trade.maximumAmountIn(options.slippageTolerance).quotient.toString())\n      : BigNumber.from(0)\n\n    trade.encode(planner, { allowRevert: false })\n    return SwapRouter.encodePlan(planner, nativeCurrencyValue, {\n      deadline: options.deadlineOrPreviousBlockhash ? BigNumber.from(options.deadlineOrPreviousBlockhash) : undefined,\n    })\n  }\n\n  /**\n   * Encodes a planned route into a method name and parameters for the Router contract.\n   * @param planner the planned route\n   * @param nativeCurrencyValue the native currency value of the planned route\n   * @param config the router config\n   */\n  private static encodePlan(\n    planner: RoutePlanner,\n    nativeCurrencyValue: BigNumber,\n    config: SwapRouterConfig = {}\n  ): MethodParameters {\n    const { commands, inputs } = planner\n    const functionSignature = !!config.deadline ? 'execute(bytes,bytes[],uint256)' : 'execute(bytes,bytes[])'\n    const parameters = !!config.deadline ? [commands, inputs, config.deadline] : [commands, inputs]\n    const calldata = SwapRouter.INTERFACE.encodeFunctionData(functionSignature, parameters)\n    return { calldata, value: nativeCurrencyValue.toHexString() }\n  }\n}\n","import { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type CryptopunkData = {\n  tokenId: BigNumberish\n  recipient: string\n  value: BigNumberish\n}\n\nexport class CryptopunkTrade extends NFTTrade<CryptopunkData> {\n  public static CRYPTOPUNK_ADDRESS: string = '0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb'\n\n  constructor(orders: CryptopunkData[]) {\n    super(Market.Cryptopunks, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      planner.addCommand(CommandType.CRYPTOPUNKS, [item.tokenId, item.recipient, item.value], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: CryptopunkTrade.CRYPTOPUNK_ADDRESS,\n        tokenId: item.tokenId,\n        tokenType: TokenType.Cryptopunk,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/Foundation.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type FoundationData = {\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n  referrer: string // address\n}\n\nexport class FoundationTrade extends NFTTrade<FoundationData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: FoundationData[]) {\n    super(Market.Foundation, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const calldata = FoundationTrade.INTERFACE.encodeFunctionData('buyV2', [\n        item.tokenAddress,\n        item.tokenId,\n        item.price,\n        item.referrer,\n      ])\n      planner.addCommand(\n        CommandType.FOUNDATION,\n        [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: TokenType.ERC721,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/LooksRareV2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber } from 'ethers'\nimport { ZERO_ADDRESS } from '../../utils/constants'\n\nexport type MakerOrder = {\n  quoteType: number\n  globalNonce: string\n  subsetNonce: string\n  orderNonce: string\n  strategyId: number\n  collectionType: number\n  collection: string\n  currency: string\n  signer: string\n  startTime: number\n  endTime: number\n  price: string\n  itemIds: string[]\n  amounts: string[]\n  additionalParameters: string\n}\n\nexport type TakerOrder = {\n  recipient: string\n  additionalParameters: string\n}\n\nexport type MerkleProof = {\n  value: string\n  position: number\n}\n\nexport type MerkleTree = {\n  root: string\n  proof: MerkleProof[]\n}\n\nexport type LRV2APIOrder = MakerOrder & {\n  id: string\n  hash: string\n  signature: string\n  createdAt: string\n  merkleRoot?: string\n  merkleProof?: MerkleProof[]\n  status: string\n}\n\nexport type LooksRareV2Data = {\n  apiOrder: LRV2APIOrder\n  taker: string\n}\n\nexport class LooksRareV2Trade extends NFTTrade<LooksRareV2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n  private static ERC721_ORDER = 0\n\n  constructor(orders: LooksRareV2Data[]) {\n    super(Market.LooksRareV2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    const { takerBids, makerOrders, makerSignatures, totalValue, merkleTrees } = this.refactorAPIData(this.orders)\n\n    let calldata\n    if (this.orders.length == 1) {\n      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeTakerBid', [\n        takerBids[0],\n        makerOrders[0],\n        makerSignatures[0],\n        merkleTrees[0],\n        ZERO_ADDRESS, // affiliate\n      ])\n    } else {\n      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeMultipleTakerBids', [\n        takerBids,\n        makerOrders,\n        makerSignatures,\n        merkleTrees,\n        ZERO_ADDRESS, // affiliate\n        false, // isAtomic (we deal with this in allowRevert)\n      ])\n    }\n\n    planner.addCommand(CommandType.LOOKS_RARE_V2, [totalValue, calldata], config.allowRevert)\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      const tokenAddress = item.apiOrder.collection\n      const tokenType =\n        item.apiOrder.collectionType == LooksRareV2Trade.ERC721_ORDER ? TokenType.ERC721 : TokenType.ERC1155\n      for (const tokenId of item.apiOrder.itemIds)\n        buyItems.push({\n          tokenAddress,\n          tokenId,\n          tokenType,\n        })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.apiOrder.price)\n    }\n    return total\n  }\n\n  private refactorAPIData(orders: LooksRareV2Data[]): {\n    takerBids: TakerOrder[]\n    makerOrders: MakerOrder[]\n    makerSignatures: string[]\n    totalValue: BigNumber\n    merkleTrees: MerkleTree[]\n  } {\n    let takerBids: TakerOrder[] = []\n    let makerOrders: MakerOrder[] = []\n    let makerSignatures: string[] = []\n    let totalValue: BigNumber = BigNumber.from(0)\n    let merkleTrees: MerkleTree[] = []\n\n    orders.forEach((order) => {\n      makerOrders.push({ ...order.apiOrder })\n\n      makerSignatures.push(order.apiOrder.signature)\n\n      takerBids.push({\n        recipient: order.taker,\n        additionalParameters: '0x',\n      })\n\n      totalValue = totalValue.add(BigNumber.from(order.apiOrder.price))\n\n      merkleTrees.push({\n        root: order.apiOrder.merkleRoot ?? '0x0000000000000000000000000000000000000000000000000000000000000000',\n        proof: order.apiOrder.merkleProof ?? [],\n      })\n    })\n\n    return { takerBids, makerOrders, makerSignatures, totalValue, merkleTrees }\n  }\n}\n","import abi from '../../../abis/NFT20.json'\nimport { Interface } from '@ethersproject/abi'\nimport { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFT20Data = {\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  tokenAmounts: BigNumberish[]\n  recipient: string\n  fee: BigNumberish\n  isV3: boolean\n  value: BigNumberish\n}\n\nexport class NFT20Trade extends NFTTrade<NFT20Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFT20Data[]) {\n    super(Market.NFT20, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFT20Trade.INTERFACE.encodeFunctionData('ethForNft', [\n        order.tokenAddress,\n        order.tokenIds,\n        order.tokenAmounts,\n        order.recipient,\n        order.fee,\n        order.isV3,\n      ])\n      planner.addCommand(CommandType.NFT20, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const pool of this.orders) {\n      for (const tokenId of pool.tokenIds) {\n        buyItems.push({\n          tokenAddress: pool.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/NFTXZap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFTXData = {\n  recipient: string\n  vaultId: BigNumberish\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  value: BigNumber\n  swapCalldata: string\n}\n\nexport class NFTXTrade extends NFTTrade<NFTXData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFTXData[]) {\n    super(Market.NFTX, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFTXTrade.INTERFACE.encodeFunctionData('buyAndRedeem', [\n        order.vaultId,\n        order.tokenIds.length,\n        order.tokenIds,\n        order.swapCalldata,\n        order.recipient,\n      ])\n\n      planner.addCommand(CommandType.NFTX, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const tokenId of order.tokenIds) {\n        buyItems.push({\n          tokenAddress: order.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import { BigNumber, BigNumberish } from 'ethers'\nimport { Interface } from '@ethersproject/abi'\nimport abi from '../../../abis/Seaport.json'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { ETH_ADDRESS } from '../../utils/constants'\n\nexport type SeaportData = {\n  items: Order[]\n  recipient: string // address\n  protocolAddress: string\n  inputTokenProcessing?: InputTokenProcessing[]\n}\n\nexport type InputTokenProcessing = {\n  token: string\n  permit2Permit?: Permit2Permit\n  protocolApproval: boolean\n  permit2TransferFrom: boolean\n}\n\nexport type FulfillmentComponent = {\n  orderIndex: BigNumberish\n  itemIndex: BigNumberish\n}\n\nexport type OfferItem = {\n  itemType: BigNumberish // enum\n  token: string // address\n  identifierOrCriteria: BigNumberish\n  startAmount: BigNumberish\n  endAmount: BigNumberish\n}\n\nexport type ConsiderationItem = OfferItem & {\n  recipient: string\n}\n\nexport type Order = {\n  parameters: OrderParameters\n  signature: string\n}\n\ntype OrderParameters = {\n  offerer: string // address,\n  offer: OfferItem[]\n  consideration: ConsiderationItem[]\n  orderType: BigNumberish // enum\n  startTime: BigNumberish\n  endTime: BigNumberish\n  zoneHash: string // bytes32\n  zone: string // address\n  salt: BigNumberish\n  conduitKey: string // bytes32,\n  totalOriginalConsiderationItems: BigNumberish\n}\n\nexport type AdvancedOrder = Order & {\n  numerator: BigNumber // uint120\n  denominator: BigNumber // uint120\n  extraData: string // bytes\n}\n\nexport class SeaportTrade extends NFTTrade<SeaportData> {\n  public static INTERFACE: Interface = new Interface(abi)\n  public static OPENSEA_CONDUIT_KEY: string = '0x0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000'\n\n  constructor(orders: SeaportData[]) {\n    super(Market.Seaport, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      let advancedOrders: AdvancedOrder[] = []\n      let orderFulfillments: FulfillmentComponent[][] = order.items.map((_, index) => [\n        { orderIndex: index, itemIndex: 0 },\n      ])\n      let considerationFulFillments: FulfillmentComponent[][] = this.getConsiderationFulfillments(order.items)\n\n      for (const item of order.items) {\n        const { advancedOrder } = this.getAdvancedOrderParams(item)\n        advancedOrders.push(advancedOrder)\n      }\n\n      let calldata: string\n      if (advancedOrders.length == 1) {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAdvancedOrder', [\n          advancedOrders[0],\n          [],\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n        ])\n      } else {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAvailableAdvancedOrders', [\n          advancedOrders,\n          [],\n          orderFulfillments,\n          considerationFulFillments,\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n          100, // TODO: look into making this a better number\n        ])\n      }\n\n      if (!!order.inputTokenProcessing) {\n        for (const inputToken of order.inputTokenProcessing)\n          encodeInputTokenOptions(planner, {\n            approval: inputToken.protocolApproval\n              ? { token: inputToken.token, protocol: order.protocolAddress }\n              : undefined,\n            permit2Permit: inputToken.permit2Permit,\n            permit2TransferFrom: inputToken.permit2TransferFrom\n              ? { token: inputToken.token, amount: this.getTotalOrderPrice(order, inputToken.token).toString() }\n              : undefined,\n          })\n      }\n\n      planner.addCommand(\n        this.commandMap(order.protocolAddress),\n        [this.getTotalOrderPrice(order, ETH_ADDRESS).toString(), calldata],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const offer of item.parameters.offer) {\n          buyItems.push({\n            tokenAddress: offer.token,\n            tokenId: offer.identifierOrCriteria,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getInputTokens(): Set<string> {\n    let inputTokens = new Set<string>()\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const consideration of item.parameters.consideration) {\n          const token = consideration.token.toLowerCase()\n          inputTokens.add(token)\n        }\n      }\n    }\n    return inputTokens\n  }\n\n  getTotalOrderPrice(order: SeaportData, token: string = ETH_ADDRESS): BigNumber {\n    let totalOrderPrice = BigNumber.from(0)\n    for (const item of order.items) {\n      totalOrderPrice = totalOrderPrice.add(this.calculateValue(item.parameters.consideration, token))\n    }\n    return totalOrderPrice\n  }\n\n  getTotalPrice(token: string = ETH_ADDRESS): BigNumber {\n    let totalPrice = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        totalPrice = totalPrice.add(this.calculateValue(item.parameters.consideration, token))\n      }\n    }\n    return totalPrice\n  }\n\n  private commandMap(protocolAddress: string): CommandType {\n    switch (protocolAddress.toLowerCase()) {\n      case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc': // Seaport v1.5\n        return CommandType.SEAPORT_V1_5\n      case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n        return CommandType.SEAPORT_V1_4\n      default:\n        throw new Error('unsupported Seaport address')\n    }\n  }\n\n  private getConsiderationFulfillments(protocolDatas: Order[]): FulfillmentComponent[][] {\n    let considerationFulfillments: FulfillmentComponent[][] = []\n    const considerationRecipients: string[] = []\n\n    for (const i in protocolDatas) {\n      const protocolData = protocolDatas[i]\n\n      for (const j in protocolData.parameters.consideration) {\n        const item = protocolData.parameters.consideration[j]\n\n        if (considerationRecipients.findIndex((x) => x === item.recipient) === -1) {\n          considerationRecipients.push(item.recipient)\n        }\n\n        const recipientIndex = considerationRecipients.findIndex((x) => x === item.recipient)\n\n        if (!considerationFulfillments[recipientIndex]) {\n          considerationFulfillments.push([\n            {\n              orderIndex: i,\n              itemIndex: j,\n            },\n          ])\n        } else {\n          considerationFulfillments[recipientIndex].push({\n            orderIndex: i,\n            itemIndex: j,\n          })\n        }\n      }\n    }\n    return considerationFulfillments\n  }\n\n  private getAdvancedOrderParams(data: Order): { advancedOrder: AdvancedOrder } {\n    const advancedOrder = {\n      parameters: data.parameters,\n      numerator: BigNumber.from('1'),\n      denominator: BigNumber.from('1'),\n      signature: data.signature,\n      extraData: '0x00',\n    }\n    return { advancedOrder }\n  }\n\n  private calculateValue(considerations: ConsiderationItem[], token: string): BigNumber {\n    return considerations.reduce(\n      (amt: BigNumber, consideration: ConsiderationItem) =>\n        consideration.token.toLowerCase() == token.toLowerCase() ? amt.add(consideration.startAmount) : amt,\n      BigNumber.from(0)\n    )\n  }\n}\n","import abi from '../../../abis/Sudoswap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype PairSwap = {\n  swapInfo: {\n    pair: string // address\n    nftIds: BigNumberish[]\n  }\n  tokenAddress: string // address\n  maxCost: BigNumberish\n}\n\nexport type SudoswapData = {\n  swaps: PairSwap[]\n  nftRecipient: string\n  ethRecipient: string\n  deadline: BigNumberish\n}\n\nexport class SudoswapTrade extends NFTTrade<SudoswapData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: SudoswapData[]) {\n    super(Market.Sudoswap, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = SudoswapTrade.INTERFACE.encodeFunctionData('robustSwapETHForSpecificNFTs', [\n        order.swaps.map((swap) => {\n          return { swapInfo: swap.swapInfo, maxCost: swap.maxCost }\n        }),\n        order.ethRecipient,\n        order.nftRecipient,\n        order.deadline,\n      ])\n      const value = order.swaps.reduce((prevVal, swap) => {\n        return prevVal.add(swap.maxCost)\n      }, BigNumber.from(0))\n      planner.addCommand(CommandType.SUDOSWAP, [value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        for (const tokenId of swap.swapInfo.nftIds) {\n          buyItems.push({\n            tokenAddress: swap.tokenAddress,\n            tokenId,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        total = total.add(swap.maxCost)\n      }\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/X2Y2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype X2Y2PartialData = {\n  signedInput: string\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n}\n\nexport type X2Y2_721_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC721\n}\n\nexport type X2Y2_1155_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC1155\n  tokenAmount: BigNumberish\n}\n\nexport type X2Y2Data = X2Y2_721_Data | X2Y2_1155_Data\n\nexport class X2Y2Trade extends NFTTrade<X2Y2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: X2Y2Data[]) {\n    super(Market.X2Y2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const functionSelector = X2Y2Trade.INTERFACE.getSighash(X2Y2Trade.INTERFACE.getFunction('run'))\n      const calldata = functionSelector + item.signedInput.slice(2)\n\n      if (item.tokenType == TokenType.ERC721) {\n        planner.addCommand(\n          CommandType.X2Y2_721,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n          config.allowRevert\n        )\n      } else if (item.tokenType == TokenType.ERC1155) {\n        planner.addCommand(\n          CommandType.X2Y2_1155,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId, item.tokenAmount],\n          config.allowRevert\n        )\n      }\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: item.tokenType,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumberish } from 'ethers'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { ROUTER_AS_RECIPIENT, WETH_ADDRESS } from '../../utils/constants'\n\nexport class UnwrapWETH implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UnwrapWETH\n  readonly permit2Data: Permit2Permit\n  readonly wethAddress: string\n  readonly amount: BigNumberish\n\n  constructor(amount: BigNumberish, chainId: number, permit2?: Permit2Permit) {\n    this.wethAddress = WETH_ADDRESS(chainId)\n    this.amount = amount\n\n    if (!!permit2) {\n      invariant(\n        permit2.details.token.toLowerCase() === this.wethAddress.toLowerCase(),\n        `must be permitting WETH address: ${this.wethAddress}`\n      )\n      invariant(permit2.details.amount >= amount, `Did not permit enough WETH for unwrapWETH transaction`)\n      this.permit2Data = permit2\n    }\n  }\n\n  encode(planner: RoutePlanner, _: TradeConfig): void {\n    encodeInputTokenOptions(planner, {\n      permit2Permit: this.permit2Data,\n      permit2TransferFrom: {\n        token: this.wethAddress,\n        amount: this.amount.toString(),\n      },\n    })\n    planner.addCommand(CommandType.UNWRAP_WETH, [ROUTER_AS_RECIPIENT, this.amount])\n  }\n}\n","import { MixedRouteSDK, Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount, Ether, Token, TradeType } from '@uniswap/sdk-core'\nimport { Pair, Route as V2Route } from '@uniswap/v2-sdk'\nimport { Pool, Route as V3Route, FeeAmount } from '@uniswap/v3-sdk'\nimport { BigNumber } from 'ethers'\nimport { ETH_ADDRESS, E_ETH_ADDRESS } from './constants'\n\nexport type TokenInRoute = {\n  address: string\n  chainId: number\n  symbol: string\n  decimals: string\n  name?: string\n  buyFeeBps?: string\n  sellFeeBps?: string\n}\n\nexport enum PoolType {\n  V2Pool = 'v2-pool',\n  V3Pool = 'v3-pool',\n}\n\nexport type V2Reserve = {\n  token: TokenInRoute\n  quotient: string\n}\n\nexport type V2PoolInRoute = {\n  type: PoolType.V2Pool\n  address?: string\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  reserve0: V2Reserve\n  reserve1: V2Reserve\n  amountIn?: string\n  amountOut?: string\n}\n\nexport type V3PoolInRoute = {\n  type: PoolType.V3Pool\n  address?: string\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  sqrtRatioX96: string\n  liquidity: string\n  tickCurrent: string\n  fee: string\n  amountIn?: string\n  amountOut?: string\n}\n\nexport type PartialClassicQuote = {\n  // We need tokenIn/Out to support native currency\n  tokenIn: string\n  tokenOut: string\n  tradeType: TradeType\n  route: Array<(V3PoolInRoute | V2PoolInRoute)[]>\n}\n\ninterface RouteResult {\n  routev3: V3Route<Currency, Currency> | null\n  routev2: V2Route<Currency, Currency> | null\n  mixedRoute: MixedRouteSDK<Currency, Currency> | null\n  inputAmount: CurrencyAmount<Currency>\n  outputAmount: CurrencyAmount<Currency>\n}\n\nexport const isNativeCurrency = (address: string) =>\n  address.toLowerCase() === ETH_ADDRESS.toLowerCase() || address.toLowerCase() === E_ETH_ADDRESS.toLowerCase()\n\n// Helper class to convert routing-specific quote entities to RouterTrade entities\n// the returned RouterTrade can then be used to build the UniswapTrade entity in this package\nexport class RouterTradeAdapter {\n  // Generate a RouterTrade using fields from a classic quote response\n  static fromClassicQuote(quote: PartialClassicQuote) {\n    const { route, tokenIn, tokenOut } = quote\n\n    if (!route) throw new Error('Expected route to be present')\n    if (!route.length) throw new Error('Expected there to be at least one route')\n    if (route.some((r) => !r.length)) throw new Error('Expected all routes to have at least one pool')\n    const firstRoute = route[0]\n\n    const tokenInData = firstRoute[0].tokenIn\n    const tokenOutData = firstRoute[firstRoute.length - 1].tokenOut\n\n    if (!tokenInData || !tokenOutData) throw new Error('Expected both tokenIn and tokenOut to be present')\n    if (tokenInData.chainId !== tokenOutData.chainId)\n      throw new Error('Expected tokenIn and tokenOut to be have same chainId')\n\n    const parsedCurrencyIn = RouterTradeAdapter.toCurrency(isNativeCurrency(tokenIn), tokenInData)\n    const parsedCurrencyOut = RouterTradeAdapter.toCurrency(isNativeCurrency(tokenOut), tokenOutData)\n\n    const typedRoutes: RouteResult[] = route.map((subRoute) => {\n      const rawAmountIn = subRoute[0].amountIn\n      const rawAmountOut = subRoute[subRoute.length - 1].amountOut\n\n      if (!rawAmountIn || !rawAmountOut) {\n        throw new Error('Expected both raw amountIn and raw amountOut to be present')\n      }\n\n      const inputAmount = CurrencyAmount.fromRawAmount(parsedCurrencyIn, rawAmountIn)\n      const outputAmount = CurrencyAmount.fromRawAmount(parsedCurrencyOut, rawAmountOut)\n\n      const isOnlyV2 = RouterTradeAdapter.isVersionedRoute<V2PoolInRoute>(PoolType.V2Pool, subRoute)\n      const isOnlyV3 = RouterTradeAdapter.isVersionedRoute<V3PoolInRoute>(PoolType.V3Pool, subRoute)\n\n      return {\n        routev3: isOnlyV3\n          ? new V3Route(\n              (subRoute as V3PoolInRoute[]).map(RouterTradeAdapter.toPool),\n              parsedCurrencyIn,\n              parsedCurrencyOut\n            )\n          : null,\n        routev2: isOnlyV2\n          ? new V2Route(\n              (subRoute as V2PoolInRoute[]).map(RouterTradeAdapter.toPair),\n              parsedCurrencyIn,\n              parsedCurrencyOut\n            )\n          : null,\n        mixedRoute:\n          !isOnlyV3 && !isOnlyV2\n            ? new MixedRouteSDK(subRoute.map(RouterTradeAdapter.toPoolOrPair), parsedCurrencyIn, parsedCurrencyOut)\n            : null,\n        inputAmount,\n        outputAmount,\n      }\n    })\n\n    return new RouterTrade({\n      v2Routes: typedRoutes\n        .filter((route) => route.routev2)\n        .map((route) => ({\n          routev2: route.routev2 as V2Route<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      v3Routes: typedRoutes\n        .filter((route) => route.routev3)\n        .map((route) => ({\n          routev3: route.routev3 as V3Route<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      mixedRoutes: typedRoutes\n        .filter((route) => route.mixedRoute)\n        .map((route) => ({\n          mixedRoute: route.mixedRoute as MixedRouteSDK<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      tradeType: quote.tradeType,\n    })\n  }\n\n  private static toCurrency(isNative: boolean, token: TokenInRoute): Currency {\n    if (isNative) {\n      return Ether.onChain(token.chainId)\n    }\n    return this.toToken(token)\n  }\n\n  private static toPoolOrPair = (pool: V3PoolInRoute | V2PoolInRoute): Pool | Pair => {\n    return pool.type === PoolType.V3Pool ? RouterTradeAdapter.toPool(pool) : RouterTradeAdapter.toPair(pool)\n  }\n\n  private static toToken(token: TokenInRoute): Token {\n    const { chainId, address, decimals, symbol, buyFeeBps, sellFeeBps } = token\n    return new Token(\n      chainId,\n      address,\n      parseInt(decimals.toString()),\n      symbol,\n      /* name */ undefined,\n      false,\n      buyFeeBps ? BigNumber.from(buyFeeBps) : undefined,\n      sellFeeBps ? BigNumber.from(sellFeeBps) : undefined\n    )\n  }\n\n  private static toPool({ fee, sqrtRatioX96, liquidity, tickCurrent, tokenIn, tokenOut }: V3PoolInRoute): Pool {\n    return new Pool(\n      RouterTradeAdapter.toToken(tokenIn),\n      RouterTradeAdapter.toToken(tokenOut),\n      parseInt(fee) as FeeAmount,\n      sqrtRatioX96,\n      liquidity,\n      parseInt(tickCurrent)\n    )\n  }\n\n  private static toPair = ({ reserve0, reserve1 }: V2PoolInRoute): Pair => {\n    return new Pair(\n      CurrencyAmount.fromRawAmount(RouterTradeAdapter.toToken(reserve0.token), reserve0.quotient),\n      CurrencyAmount.fromRawAmount(RouterTradeAdapter.toToken(reserve1.token), reserve1.quotient)\n    )\n  }\n\n  private static isVersionedRoute<T extends V2PoolInRoute | V3PoolInRoute>(\n    type: PoolType,\n    route: (V3PoolInRoute | V2PoolInRoute)[]\n  ): route is T[] {\n    return route.every((pool) => pool.type === type)\n  }\n}\n"],"names":["RouterTradeType","NFTTrade","market","orders","length","invariant","Market","TokenType","CommandType","ALLOW_REVERT_FLAG","REVERTIBLE_COMMANDS","Set","SEAPORT_V1_5","SEAPORT_V1_4","NFTX","LOOKS_RARE_V2","X2Y2_721","X2Y2_1155","FOUNDATION","SUDOSWAP","NFT20","EXECUTE_SUB_PLAN","CRYPTOPUNKS","ELEMENT_MARKET","PERMIT_STRUCT","PERMIT_BATCH_STRUCT","PERMIT2_TRANSFER_FROM_STRUCT","PERMIT2_TRANSFER_FROM_BATCH_STRUCT","ABI_DEFINITION","PERMIT2_PERMIT","PERMIT2_PERMIT_BATCH","PERMIT2_TRANSFER_FROM","PERMIT2_TRANSFER_FROM_BATCH","V3_SWAP_EXACT_IN","V3_SWAP_EXACT_OUT","V2_SWAP_EXACT_IN","V2_SWAP_EXACT_OUT","WRAP_ETH","UNWRAP_WETH","SWEEP","SWEEP_ERC721","SWEEP_ERC1155","TRANSFER","PAY_PORTION","BALANCE_CHECK_ERC20","OWNER_CHECK_721","OWNER_CHECK_1155","APPROVE_ERC20","RoutePlanner","commands","inputs","addSubPlan","subplan","addCommand","type","parameters","allowRevert","command","createCommand","push","encodedInput","has","Error","concat","toString","padStart","defaultAbiCoder","encode","WETH_NOT_SUPPORTED_ON_CHAIN","CHAIN_CONFIGS","router","weth","creationBlock","UNIVERSAL_ROUTER_ADDRESS","chainId","UNIVERSAL_ROUTER_CREATION_BLOCK","WETH_ADDRESS","PERMIT2_ADDRESS","CONTRACT_BALANCE","BigNumber","from","pow","ETH_ADDRESS","E_ETH_ADDRESS","ZERO_ADDRESS","SENDER_AS_RECIPIENT","ROUTER_AS_RECIPIENT","OPENSEA_CONDUIT_SPENDER_ID","SUDOSWAP_SPENDER_ID","encodeFeeBips","fee","toHex","multiply","quotient","REFUND_ETH_PRICE_IMPACT_THRESHOLD","Percent","UniswapTrade","trade","options","flatFee","inputRequiresWrap","payerIsUser","useRouterBalance","planner","_config","maximumAmountIn","slippageTolerance","recipient","performAggregatedSlippageCheck","tradeType","TradeType","EXACT_INPUT","routes","outputIsNative","outputAmount","currency","isNative","routerMustCustody","hasFeeOption","swaps","swap","route","protocol","Protocol","V2","addV2Swap","V3","addV3Swap","MIXED","addMixedSwap","minimumAmountOut","feeBips","wrapped","address","EXACT_OUTPUT","sub","mul","div","feeAmount","amount","lt","riskOfPartialFill","safeMode","inputAmount","V2Trade","path","map","pool","V3Trade","createUncheckedTrade","encodeRouteToPath","tradeRecipient","pools","Pool","Pair","MixedRouteTrade","amountIn","amountOut","sections","partitionMixedRouteByProtocol","isLastSectionInRoute","i","outputToken","inputToken","input","section","getOutputOfPools","newRouteOriginal","MixedRouteSDK","token0","equals","token1","newRoute","MixedRoute","mixedRouteIsAllV3","every","encodeMixedRouteToPath","liquidityToken","priceImpact","greaterThan","swapOptions","SIGNATURE_LENGTH","EIP_2098_SIGNATURE_LENGTH","encodePermit","permit2","signature","ethers","utils","arrayify","joinSignature","splitSignature","encodeInputTokenOptions","approval","permit2Permit","token","details","permit2TransferFrom","mapApprovalProtocol","protocolAddress","toLowerCase","SwapRouter","swapCallParameters","trades","config","Array","isArray","nftTrades","filter","_","hasOwnProperty","currentNativeValueInRouter","transactionValue","nftInputTokens","nftTrade","tradePrice","getTotalPrice","Seaport","seaportTrade","seaportInputTokens","getInputTokens","forEach","add","uniswapTrade","inputIsNative","inputTokenPermit","UnwrapWETH","encodePlan","swapNFTCallParameters","totalPrice","swapERC20CallParameters","inputCurrency","nativeCurrencyValue","deadline","deadlineOrPreviousBlockhash","undefined","functionSignature","calldata","INTERFACE","encodeFunctionData","value","toHexString","Interface","abi","CryptopunkTrade","Cryptopunks","item","tokenId","getBuyItems","buyItems","tokenAddress","CRYPTOPUNK_ADDRESS","tokenType","Cryptopunk","total","FoundationTrade","Foundation","price","referrer","ERC721","LooksRareV2Trade","LooksRareV2","refactorAPIData","takerBids","makerOrders","makerSignatures","totalValue","merkleTrees","apiOrder","collection","collectionType","ERC721_ORDER","ERC1155","itemIds","order","taker","additionalParameters","root","merkleRoot","proof","merkleProof","NFT20Trade","tokenIds","tokenAmounts","isV3","NFTXTrade","vaultId","swapCalldata","SeaportTrade","advancedOrders","orderFulfillments","items","index","orderIndex","itemIndex","considerationFulFillments","getConsiderationFulfillments","getAdvancedOrderParams","advancedOrder","OPENSEA_CONDUIT_KEY","inputTokenProcessing","protocolApproval","getTotalOrderPrice","commandMap","offer","identifierOrCriteria","inputTokens","consideration","totalOrderPrice","calculateValue","protocolDatas","considerationFulfillments","considerationRecipients","protocolData","j","findIndex","x","recipientIndex","data","numerator","denominator","extraData","considerations","reduce","amt","startAmount","SudoswapTrade","Sudoswap","swapInfo","maxCost","ethRecipient","nftRecipient","prevVal","nftIds","X2Y2Trade","X2Y2","functionSelector","getSighash","getFunction","signedInput","slice","tokenAmount","wethAddress","permit2Data","PoolType","isNativeCurrency","RouterTradeAdapter","fromClassicQuote","quote","tokenIn","tokenOut","some","r","firstRoute","tokenInData","tokenOutData","parsedCurrencyIn","toCurrency","parsedCurrencyOut","typedRoutes","subRoute","rawAmountIn","rawAmountOut","CurrencyAmount","fromRawAmount","isOnlyV2","isVersionedRoute","V2Pool","isOnlyV3","V3Pool","routev3","V3Route","toPool","routev2","V2Route","toPair","mixedRoute","toPoolOrPair","RouterTrade","v2Routes","v3Routes","mixedRoutes","Ether","onChain","toToken","decimals","symbol","buyFeeBps","sellFeeBps","Token","parseInt","sqrtRatioX96","liquidity","tickCurrent","reserve0","reserve1"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAMYA;AAAZ,WAAYA,eAAe;EACzBA,gDAA6B;EAC7BA,wCAAqB;EACrBA,4CAAyB;AAC3B,CAAC,EAJWA,eAAe,KAAfA,eAAe;;ICmBLC,QAAQ,GAK5B,kBAAYC,MAAc,EAAEC,MAAW;EAJ9B,cAAS,GAAoBH,eAAe,CAACC,QAAQ;EAK5D,EAAUE,MAAM,CAACC,MAAM,GAAG,CAAC,4CAA3BC,SAAS,QAAoB,cAAc,IAA3CA,SAAS;EACT,IAAI,CAACH,MAAM,GAAGA,MAAM;EACpB,IAAI,CAACC,MAAM,GAAGA,MAAM;AACtB,CAAC;AAiBH,IAAYG,MAUX;AAVD,WAAYA,MAAM;EAChBA,mCAAyB;EACzBA,qCAA2B;EAC3BA,yBAAe;EACfA,uBAAa;EACbA,6BAAmB;EACnBA,+BAAqB;EACrBA,qCAA2B;EAC3BA,uBAAa;EACbA,6BAAmB;AACrB,CAAC,EAVWA,MAAM,KAANA,MAAM;AAYlB,IAAYC,SAIX;AAJD,WAAYA,SAAS;EACnBA,8BAAiB;EACjBA,gCAAmB;EACnBA,sCAAyB;AAC3B,CAAC,EAJWA,SAAS,KAATA,SAAS;;;AC/DrB,AAEA;;;;;AAKA,IAAYC,WAsCX;AAtCD,WAAYA,WAAW;EACrBA,qEAAuB;EACvBA,uEAAwB;EACxBA,+EAA4B;EAC5BA,6EAA2B;EAC3BA,+CAAY;EACZA,qDAAe;EACfA,2DAAkB;EAElBA,qEAAuB;EACvBA,uEAAwB;EACxBA,kEAAqB;EACrBA,sDAAe;EACfA,4DAAkB;EAClBA,4FAAkC;EAClCA,4EAA0B;;EAG1BA,8DAAmB;EACnBA,gEAAoB;EACpBA,8CAAW;EACXA,4DAAkB;;EAElBA,oEAAsB;EACtBA,sEAAuB;EACvBA,8DAAmB;EAEnBA,sDAAe;EACfA,sDAAe;EACfA,gDAAY;EACZA,wDAAgB;EAChBA,0DAAiB;EACjBA,gEAAoB;EACpBA,kEAAqB;EAErBA,8DAAmB;EACnBA,sEAAuB;EACvBA,gEAAoB;AACtB,CAAC,EAtCWA,WAAW,KAAXA,WAAW;AAwCvB,IAAMC,iBAAiB,GAAG,IAAI;AAE9B,IAAMC,mBAAmB,gBAAG,IAAIC,GAAG,CAAc,CAC/CH,WAAW,CAACI,YAAY,EACxBJ,WAAW,CAACK,YAAY,EACxBL,WAAW,CAACM,IAAI,EAChBN,WAAW,CAACO,aAAa,EACzBP,WAAW,CAACQ,QAAQ,EACpBR,WAAW,CAACS,SAAS,EACrBT,WAAW,CAACU,UAAU,EACtBV,WAAW,CAACW,QAAQ,EACpBX,WAAW,CAACY,KAAK,EACjBZ,WAAW,CAACa,gBAAgB,EAC5Bb,WAAW,CAACc,WAAW,EACvBd,WAAW,CAACe,cAAc,CAC3B,CAAC;AAEF,IAAMC,aAAa,GACjB,6GAA6G;AAE/G,IAAMC,mBAAmB,GACvB,+GAA+G;AAEjH,IAAMC,4BAA4B,GAAG,wDAAwD;AAC7F,IAAMC,kCAAkC,GAAGD,4BAA4B,GAAG,IAAI;AAE9E,IAAME,cAAc,0CAEjBpB,WAAW,CAACa,gBAAgB,IAAG,CAAC,OAAO,EAAE,SAAS,CAAC,kBAGnDb,WAAW,CAACqB,cAAc,IAAG,CAACL,aAAa,EAAE,OAAO,CAAC,kBACrDhB,WAAW,CAACsB,oBAAoB,IAAG,CAACL,mBAAmB,EAAE,OAAO,CAAC,kBACjEjB,WAAW,CAACuB,qBAAqB,IAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,kBACrEvB,WAAW,CAACwB,2BAA2B,IAAG,CAACL,kCAAkC,CAAC,kBAG9EnB,WAAW,CAACyB,gBAAgB,IAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,OAAO,EAAE,MAAM,CAAC,kBACjFzB,WAAW,CAAC0B,iBAAiB,IAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,OAAO,EAAE,MAAM,CAAC,kBAClF1B,WAAW,CAAC2B,gBAAgB,IAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,WAAW,EAAE,MAAM,CAAC,kBACrF3B,WAAW,CAAC4B,iBAAiB,IAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,WAAW,EAAE,MAAM,CAAC,kBAGtF5B,WAAW,CAAC6B,QAAQ,IAAG,CAAC,SAAS,EAAE,SAAS,CAAC,kBAC7C7B,WAAW,CAAC8B,WAAW,IAAG,CAAC,SAAS,EAAE,SAAS,CAAC,kBAChD9B,WAAW,CAAC+B,KAAK,IAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,kBACrD/B,WAAW,CAACgC,YAAY,IAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,kBAC5DhC,WAAW,CAACiC,aAAa,IAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,kBACxEjC,WAAW,CAACkC,QAAQ,IAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,kBACxDlC,WAAW,CAACmC,WAAW,IAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,kBAC3DnC,WAAW,CAACoC,mBAAmB,IAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,kBACnEpC,WAAW,CAACqC,eAAe,IAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,kBAC/DrC,WAAW,CAACsC,gBAAgB,IAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,kBAC3EtC,WAAW,CAACuC,aAAa,IAAG,CAAC,SAAS,EAAE,SAAS,CAAC,kBAGlDvC,WAAW,CAACI,YAAY,IAAG,CAAC,SAAS,EAAE,OAAO,CAAC,kBAC/CJ,WAAW,CAACK,YAAY,IAAG,CAAC,SAAS,EAAE,OAAO,CAAC,kBAC/CL,WAAW,CAACM,IAAI,IAAG,CAAC,SAAS,EAAE,OAAO,CAAC,kBACvCN,WAAW,CAACO,aAAa,IAAG,CAAC,SAAS,EAAE,OAAO,CAAC,kBAChDP,WAAW,CAACQ,QAAQ,IAAG,CAAC,SAAS,EAAE,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,kBAC5ER,WAAW,CAACS,SAAS,IAAG,CAAC,SAAS,EAAE,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,kBACxFT,WAAW,CAACU,UAAU,IAAG,CAAC,SAAS,EAAE,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,kBAC9EV,WAAW,CAACW,QAAQ,IAAG,CAAC,SAAS,EAAE,OAAO,CAAC,kBAC3CX,WAAW,CAACY,KAAK,IAAG,CAAC,SAAS,EAAE,OAAO,CAAC,kBACxCZ,WAAW,CAACc,WAAW,IAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,kBAC3Dd,WAAW,CAACe,cAAc,IAAG,CAAC,SAAS,EAAE,OAAO,CAAC,kBACnD;AAED,IAAayB,YAAY;EAIvB;IACE,IAAI,CAACC,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACC,MAAM,GAAG,EAAE;;EACjB;EAAA,OAEDC,UAAU,GAAV,oBAAWC,OAAqB;IAC9B,IAAI,CAACC,UAAU,CAAC7C,WAAW,CAACa,gBAAgB,EAAE,CAAC+B,OAAO,CAACH,QAAQ,EAAEG,OAAO,CAACF,MAAM,CAAC,EAAE,IAAI,CAAC;GACxF;EAAA,OAEDG,UAAU,GAAV,oBAAWC,IAAiB,EAAEC,UAAiB,EAAEC,WAAW;QAAXA,WAAW;MAAXA,WAAW,GAAG,KAAK;;IAClE,IAAIC,OAAO,GAAGC,aAAa,CAACJ,IAAI,EAAEC,UAAU,CAAC;IAC7C,IAAI,CAACL,MAAM,CAACS,IAAI,CAACF,OAAO,CAACG,YAAY,CAAC;IACtC,IAAIJ,WAAW,EAAE;MACf,IAAI,CAAC9C,mBAAmB,CAACmD,GAAG,CAACJ,OAAO,CAACH,IAAI,CAAC,EAAE;QAC1C,MAAM,IAAIQ,KAAK,oBAAkBL,OAAO,CAACH,IAAI,kCAA+B;;MAE9EG,OAAO,CAACH,IAAI,GAAGG,OAAO,CAACH,IAAI,GAAG7C,iBAAiB;;IAGjD,IAAI,CAACwC,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACc,MAAM,CAACN,OAAO,CAACH,IAAI,CAACU,QAAQ,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;GACjF;EAAA;AAAA;AAQH,SAAgBP,aAAa,CAACJ,IAAiB,EAAEC,UAAiB;EAChE,IAAMK,YAAY,GAAGM,eAAe,CAACC,MAAM,CAACvC,cAAc,CAAC0B,IAAI,CAAC,EAAEC,UAAU,CAAC;EAC7E,OAAO;IAAED,IAAI,EAAJA,IAAI;IAAEM,YAAY,EAAZA;GAAc;AAC/B;;;ACvJA,AAQA,IAAMQ,2BAA2B,GAAG,4CAA4C;AAEhF,IAAMC,aAAa,wCAEhB,CAAC,IAAG;EACHC,MAAM,EAAE,4CAA4C;EACpDC,IAAI,EAAE,4CAA4C;EAClDC,aAAa,EAAE;CAChB,iBAEA,CAAC,IAAG;EACHF,MAAM,EAAE,4CAA4C;EACpDC,IAAI,EAAE,4CAA4C;EAClDC,aAAa,EAAE;CAChB,iBAEA,QAAQ,IAAG;EACVF,MAAM,EAAE,4CAA4C;EACpDC,IAAI,EAAE,4CAA4C;EAClDC,aAAa,EAAE;CAChB,iBAEA,GAAG,IAAG;EACLF,MAAM,EAAE,4CAA4C;EACpDC,IAAI,EAAE,4CAA4C;EAClDC,aAAa,EAAE;CAChB,iBAEA,KAAK,IAAG;EACPF,MAAM,EAAE,4CAA4C;EACpDC,IAAI,EAAE,4CAA4C;EAClDC,aAAa,EAAE;CAChB,iBAEA,EAAE,IAAG;EACJF,MAAM,EAAE,4CAA4C;EACpDC,IAAI,EAAE,4CAA4C;EAClDC,aAAa,EAAE;CAChB,iBAEA,GAAG,IAAG;EACLF,MAAM,EAAE,4CAA4C;EACpDC,IAAI,EAAE,4CAA4C;EAClDC,aAAa,EAAE;CAChB,iBAEA,KAAK,IAAG;EACPF,MAAM,EAAE,4CAA4C;EACpDC,IAAI,EAAE,4CAA4C;EAClDC,aAAa,EAAE;CAChB,iBAEA,MAAM,IAAG;EACRF,MAAM,EAAE,4CAA4C;EACpDC,IAAI,EAAE,4CAA4C;EAClDC,aAAa,EAAE;CAChB,iBAEA,KAAK,IAAG;EACPF,MAAM,EAAE,4CAA4C;EACpDC,IAAI,EAAEH,2BAA2B;EACjCI,aAAa,EAAE;CAChB,iBAEA,KAAK,IAAG;EACPF,MAAM,EAAE,4CAA4C;EACpDC,IAAI,EAAEH,2BAA2B;EACjCI,aAAa,EAAE;CAChB,iBAEA,EAAE,IAAG;EACJF,MAAM,EAAE,4CAA4C;EACpDC,IAAI,EAAE,4CAA4C;EAClDC,aAAa,EAAE;CAChB,iBAEA,KAAK,IAAG;EACPF,MAAM,EAAE,4CAA4C;EACpDC,IAAI,EAAE,4CAA4C;EAClDC,aAAa,EAAE;CAChB,iBAEA,KAAK,IAAG;EACPF,MAAM,EAAE,4CAA4C;EACpDC,IAAI,EAAE,4CAA4C;EAClDC,aAAa,EAAE;CAChB,iBAEA,IAAI,IAAG;EACNF,MAAM,EAAE,4CAA4C;EACpDC,IAAI,EAAE,4CAA4C;EAClDC,aAAa,EAAE;CAChB,iBACA,KAAK,IAAG;EACPF,MAAM,EAAE,4CAA4C;EACpDC,IAAI,EAAE,4CAA4C;EAClDC,aAAa,EAAE;CAChB,iBACF;AAED,IAAaC,wBAAwB,GAAG,SAA3BA,wBAAwB,CAAIC,OAAe;EACtD,IAAI,EAAEA,OAAO,IAAIL,aAAa,CAAC,EAAE,MAAM,IAAIP,KAAK,6CAA2CY,OAAO,CAAG;EACrG,OAAOL,aAAa,CAACK,OAAO,CAAC,CAACJ,MAAM;AACtC,CAAC;AAED,IAAaK,+BAA+B,GAAG,SAAlCA,+BAA+B,CAAID,OAAe;EAC7D,IAAI,EAAEA,OAAO,IAAIL,aAAa,CAAC,EAAE,MAAM,IAAIP,KAAK,6CAA2CY,OAAO,CAAG;EACrG,OAAOL,aAAa,CAACK,OAAO,CAAC,CAACF,aAAa;AAC7C,CAAC;AAED,IAAaI,YAAY,GAAG,SAAfA,YAAY,CAAIF,OAAe;EAC1C,IAAI,EAAEA,OAAO,IAAIL,aAAa,CAAC,EAAE,MAAM,IAAIP,KAAK,6CAA2CY,OAAO,CAAG;EAErG,IAAIL,aAAa,CAACK,OAAO,CAAC,CAACH,IAAI,IAAIH,2BAA2B,EAAE,MAAM,IAAIN,KAAK,YAAUY,OAAO,yBAAsB;EAEtH,OAAOL,aAAa,CAACK,OAAO,CAAC,CAACH,IAAI;AACpC,CAAC;AAED,IAAaM,eAAe,GAAG,4CAA4C;AAE3E,AAAO,IAAMC,gBAAgB,gBAAGC,SAAS,CAACC,IAAI,CAAC,CAAC,CAAC,CAACC,GAAG,CAAC,GAAG,CAAC;AAC1D,AAAO,IAAMC,WAAW,GAAG,4CAA4C;AACvE,AAAO,IAAMC,aAAa,GAAG,4CAA4C;AACzE,AAAO,IAAMC,YAAY,GAAG,4CAA4C;AACxE,AAGO,IAAMC,mBAAmB,GAAG,4CAA4C;AAC/E,IAAaC,mBAAmB,GAAG,4CAA4C;AAE/E,AAAO,IAAMC,0BAA0B,GAAG,CAAC;AAC3C,AAAO,IAAMC,mBAAmB,GAAG,CAAC;;SC5HpBC,aAAa,CAACC,GAAY;EACxC,OAAOC,KAAK,CAACD,GAAG,CAACE,QAAQ,CAAC,KAAM,CAAC,CAACC,QAAQ,CAAC;AAC7C;;ACuBA,IAAMC,iCAAiC,gBAAG,IAAIC,OAAO,CAAC,EAAE,EAAE,GAAG,CAAC;AAQ9D;AACA;AACA,IAAaC,YAAY;EAIvB,sBAAmBC,KAAiD,EAASC,OAAoB;IAA9E,UAAK,GAALD,KAAK;IAAqD,YAAO,GAAPC,OAAO;IAH3E,cAAS,GAAoBlG,eAAe,CAACgG,YAAY;IAIhE,IAAI,CAAC,CAACE,OAAO,CAACR,GAAG,IAAI,CAAC,CAACQ,OAAO,CAACC,OAAO,EAAE,MAAM,IAAIrC,KAAK,CAAC,+BAA+B,CAAC;IAExF,IAAI,IAAI,CAACsC,iBAAiB,EAAE,IAAI,CAACC,WAAW,GAAG,KAAK,CAAA,KAC/C,IAAI,IAAI,CAACH,OAAO,CAACI,gBAAgB,EAAE,IAAI,CAACD,WAAW,GAAG,KAAK,CAAA,KAC3D,IAAI,CAACA,WAAW,GAAG,IAAI;;EAC7B;EAAA,OAMDlC,MAAM,GAAN,gBAAOoC,OAAqB,EAAEC,OAAoB;;;IAEhD,IAAI,IAAI,CAACJ,iBAAiB,EAAE;;MAE1BG,OAAO,CAAClD,UAAU,CAAC7C,WAAW,CAAC6B,QAAQ,EAAE,CACvCiD,mBAAmB,EACnB,IAAI,CAACW,KAAK,CAACQ,eAAe,CAAC,IAAI,CAACP,OAAO,CAACQ,iBAAiB,CAAC,CAACb,QAAQ,CAAC7B,QAAQ,EAAE,CAC/E,CAAC;;;IAGJ,IAAI,CAACkC,OAAO,CAACS,SAAS,4BAAG,IAAI,CAACT,OAAO,CAACS,SAAS,oCAAItB,mBAAmB;;;;;IAMtE,IAAMuB,8BAA8B,GAClC,IAAI,CAACX,KAAK,CAACY,SAAS,KAAKC,SAAS,CAACC,WAAW,IAAI,IAAI,CAACd,KAAK,CAACe,MAAM,CAAC5G,MAAM,GAAG,CAAC;IAChF,IAAM6G,cAAc,GAAG,IAAI,CAAChB,KAAK,CAACiB,YAAY,CAACC,QAAQ,CAACC,QAAQ;IAChE,IAAMC,iBAAiB,GAAGT,8BAA8B,IAAIK,cAAc,IAAIK,YAAY,CAAC,IAAI,CAACpB,OAAO,CAAC;IAExG,qDAAmB,IAAI,CAACD,KAAK,CAACsB,KAAK,wCAAE;MAAA,IAA1BC,IAAI;MACb,QAAQA,IAAI,CAACC,KAAK,CAACC,QAAQ;QACzB,KAAKC,QAAQ,CAACC,EAAE;UACdC,SAAS,CAACtB,OAAO,EAAEiB,IAAI,EAAE,IAAI,CAACvB,KAAK,CAACY,SAAS,EAAE,IAAI,CAACX,OAAO,EAAE,IAAI,CAACG,WAAW,EAAEgB,iBAAiB,CAAC;UACjG;QACF,KAAKM,QAAQ,CAACG,EAAE;UACdC,SAAS,CAACxB,OAAO,EAAEiB,IAAI,EAAE,IAAI,CAACvB,KAAK,CAACY,SAAS,EAAE,IAAI,CAACX,OAAO,EAAE,IAAI,CAACG,WAAW,EAAEgB,iBAAiB,CAAC;UACjG;QACF,KAAKM,QAAQ,CAACK,KAAK;UACjBC,YAAY,CAAC1B,OAAO,EAAEiB,IAAI,EAAE,IAAI,CAACvB,KAAK,CAACY,SAAS,EAAE,IAAI,CAACX,OAAO,EAAE,IAAI,CAACG,WAAW,EAAEgB,iBAAiB,CAAC;UACpG;QACF;UACE,MAAM,IAAIvD,KAAK,CAAC,4BAA4B,CAAC;;;IAInD,IAAIoE,gBAAgB,GAAcnD,SAAS,CAACC,IAAI,CAC9C,IAAI,CAACiB,KAAK,CAACiC,gBAAgB,CAAC,IAAI,CAAChC,OAAO,CAACQ,iBAAiB,CAAC,CAACb,QAAQ,CAAC7B,QAAQ,EAAE,CAChF;;IAGD,IAAIqD,iBAAiB,EAAE;;;MAGrB,IAAI,CAAC,CAAC,IAAI,CAACnB,OAAO,CAACR,GAAG,EAAE;QACtB,IAAMyC,OAAO,GAAG1C,aAAa,CAAC,IAAI,CAACS,OAAO,CAACR,GAAG,CAACA,GAAG,CAAC;QACnDa,OAAO,CAAClD,UAAU,CAAC7C,WAAW,CAACmC,WAAW,EAAE,CAC1C,IAAI,CAACsD,KAAK,CAACiB,YAAY,CAACC,QAAQ,CAACiB,OAAO,CAACC,OAAO,EAChD,IAAI,CAACnC,OAAO,CAACR,GAAG,CAACiB,SAAS,EAC1BwB,OAAO,CACR,CAAC;;;QAIF,IAAI,IAAI,CAAClC,KAAK,CAACY,SAAS,KAAKC,SAAS,CAACwB,YAAY,EAAE;UACnDJ,gBAAgB,GAAGA,gBAAgB,CAACK,GAAG,CAACL,gBAAgB,CAACM,GAAG,CAACL,OAAO,CAAC,CAACM,GAAG,CAAC,KAAK,CAAC,CAAC;;;;;MAMrF,IAAI,CAAC,CAAC,IAAI,CAACvC,OAAO,CAACC,OAAO,EAAE;QAC1B,IAAMuC,SAAS,GAAG,IAAI,CAACxC,OAAO,CAACC,OAAO,CAACwC,MAAM;QAC7C,IAAIT,gBAAgB,CAACU,EAAE,CAACF,SAAS,CAAC,EAAE,MAAM,IAAI5E,KAAK,CAAC,+CAA+C,CAAC;QAEpGyC,OAAO,CAAClD,UAAU,CAAC7C,WAAW,CAACkC,QAAQ,EAAE,CACvC,IAAI,CAACuD,KAAK,CAACiB,YAAY,CAACC,QAAQ,CAACiB,OAAO,CAACC,OAAO,EAChD,IAAI,CAACnC,OAAO,CAACC,OAAO,CAACQ,SAAS,EAC9B+B,SAAS,CACV,CAAC;;;QAIF,IAAI,IAAI,CAACzC,KAAK,CAACY,SAAS,KAAKC,SAAS,CAACwB,YAAY,EAAE;UACnDJ,gBAAgB,GAAGA,gBAAgB,CAACK,GAAG,CAACG,SAAS,CAAC;;;;;MAMtD,IAAIzB,cAAc,EAAE;QAClBV,OAAO,CAAClD,UAAU,CAAC7C,WAAW,CAAC8B,WAAW,EAAE,CAAC,IAAI,CAAC4D,OAAO,CAACS,SAAS,EAAEuB,gBAAgB,CAAC,CAAC;OACxF,MAAM;QACL3B,OAAO,CAAClD,UAAU,CAAC7C,WAAW,CAAC+B,KAAK,EAAE,CACpC,IAAI,CAAC0D,KAAK,CAACiB,YAAY,CAACC,QAAQ,CAACiB,OAAO,CAACC,OAAO,EAChD,IAAI,CAACnC,OAAO,CAACS,SAAS,EACtBuB,gBAAgB,CACjB,CAAC;;;IAIN,IAAI,IAAI,CAAC9B,iBAAiB,KAAK,IAAI,CAACH,KAAK,CAACY,SAAS,KAAKC,SAAS,CAACwB,YAAY,IAAIO,iBAAiB,CAAC,IAAI,CAAC5C,KAAK,CAAC,CAAC,EAAE;;;MAGhHM,OAAO,CAAClD,UAAU,CAAC7C,WAAW,CAAC8B,WAAW,EAAE,CAAC,IAAI,CAAC4D,OAAO,CAACS,SAAS,EAAE,CAAC,CAAC,CAAC;;IAG1E,IAAI,IAAI,CAACT,OAAO,CAAC4C,QAAQ,EAAEvC,OAAO,CAAClD,UAAU,CAAC7C,WAAW,CAAC+B,KAAK,EAAE,CAAC2C,WAAW,EAAE,IAAI,CAACgB,OAAO,CAACS,SAAS,EAAE,CAAC,CAAC,CAAC;GAC3G;EAAA;IAAA;IAAA,KAvGD;MACE,OAAO,IAAI,CAACV,KAAK,CAAC8C,WAAW,CAAC5B,QAAQ,CAACC,QAAQ;;;EAChD;AAAA;AAwGH;AACA,SAASS,SAAS,CAChBtB,OAAqB,QAErBM,SAAoB,EACpBX,OAAoB,EACpBG,WAAoB,EACpBgB,iBAA0B;MAJxBI,KAAK,QAALA,KAAK;IAAEsB,WAAW,QAAXA,WAAW;IAAE7B,YAAY,QAAZA,YAAY;EAMlC,IAAMjB,KAAK,GAAG,IAAI+C,KAAO,CACvBvB,KAAiC,EACjCZ,SAAS,IAAIC,SAAS,CAACC,WAAW,GAAGgC,WAAW,GAAG7B,YAAY,EAC/DL,SAAS,CACV;EAED,IAAIA,SAAS,IAAIC,SAAS,CAACC,WAAW,EAAE;IACtCR,OAAO,CAAClD,UAAU,CAAC7C,WAAW,CAAC2B,gBAAgB,EAAE;;IAE/CkF,iBAAiB,GAAG/B,mBAAmB,GAAGY,OAAO,CAACS,SAAS,EAC3DV,KAAK,CAACQ,eAAe,CAACP,OAAO,CAACQ,iBAAiB,CAAC,CAACb,QAAQ,CAAC7B,QAAQ,EAAE,EACpEiC,KAAK,CAACiC,gBAAgB,CAAChC,OAAO,CAACQ,iBAAiB,CAAC,CAACb,QAAQ,CAAC7B,QAAQ,EAAE,EACrEyD,KAAK,CAACwB,IAAI,CAACC,GAAG,CAAC,UAACC,IAAI;MAAA,OAAKA,IAAI,CAACd,OAAO;MAAC,EACtChC,WAAW,CACZ,CAAC;GACH,MAAM,IAAIQ,SAAS,IAAIC,SAAS,CAACwB,YAAY,EAAE;IAC9C/B,OAAO,CAAClD,UAAU,CAAC7C,WAAW,CAAC4B,iBAAiB,EAAE,CAChDiF,iBAAiB,GAAG/B,mBAAmB,GAAGY,OAAO,CAACS,SAAS,EAC3DV,KAAK,CAACiC,gBAAgB,CAAChC,OAAO,CAACQ,iBAAiB,CAAC,CAACb,QAAQ,CAAC7B,QAAQ,EAAE,EACrEiC,KAAK,CAACQ,eAAe,CAACP,OAAO,CAACQ,iBAAiB,CAAC,CAACb,QAAQ,CAAC7B,QAAQ,EAAE,EACpEyD,KAAK,CAACwB,IAAI,CAACC,GAAG,CAAC,UAACC,IAAI;MAAA,OAAKA,IAAI,CAACd,OAAO;MAAC,EACtChC,WAAW,CACZ,CAAC;;AAEN;AAEA;AACA,SAAS0B,SAAS,CAChBxB,OAAqB,SAErBM,SAAoB,EACpBX,OAAoB,EACpBG,WAAoB,EACpBgB,iBAA0B;MAJxBI,KAAK,SAALA,KAAK;IAAEsB,WAAW,SAAXA,WAAW;IAAE7B,YAAY,SAAZA,YAAY;EAMlC,IAAMjB,KAAK,GAAGmD,OAAO,CAACC,oBAAoB,CAAC;IACzC5B,KAAK,EAAEA,KAAiC;IACxCsB,WAAW,EAAXA,WAAW;IACX7B,YAAY,EAAZA,YAAY;IACZL,SAAS,EAATA;GACD,CAAC;EAEF,IAAMoC,IAAI,GAAGK,iBAAiB,CAAC7B,KAAiC,EAAExB,KAAK,CAACY,SAAS,KAAKC,SAAS,CAACwB,YAAY,CAAC;EAC7G,IAAIzB,SAAS,IAAIC,SAAS,CAACC,WAAW,EAAE;IACtCR,OAAO,CAAClD,UAAU,CAAC7C,WAAW,CAACyB,gBAAgB,EAAE,CAC/CoF,iBAAiB,GAAG/B,mBAAmB,GAAGY,OAAO,CAACS,SAAS,EAC3DV,KAAK,CAACQ,eAAe,CAACP,OAAO,CAACQ,iBAAiB,CAAC,CAACb,QAAQ,CAAC7B,QAAQ,EAAE,EACpEiC,KAAK,CAACiC,gBAAgB,CAAChC,OAAO,CAACQ,iBAAiB,CAAC,CAACb,QAAQ,CAAC7B,QAAQ,EAAE,EACrEiF,IAAI,EACJ5C,WAAW,CACZ,CAAC;GACH,MAAM,IAAIQ,SAAS,IAAIC,SAAS,CAACwB,YAAY,EAAE;IAC9C/B,OAAO,CAAClD,UAAU,CAAC7C,WAAW,CAAC0B,iBAAiB,EAAE,CAChDmF,iBAAiB,GAAG/B,mBAAmB,GAAGY,OAAO,CAACS,SAAS,EAC3DV,KAAK,CAACiC,gBAAgB,CAAChC,OAAO,CAACQ,iBAAiB,CAAC,CAACb,QAAQ,CAAC7B,QAAQ,EAAE,EACrEiC,KAAK,CAACQ,eAAe,CAACP,OAAO,CAACQ,iBAAiB,CAAC,CAACb,QAAQ,CAAC7B,QAAQ,EAAE,EACpEiF,IAAI,EACJ5C,WAAW,CACZ,CAAC;;AAEN;AAEA;AACA,SAAS4B,YAAY,CACnB1B,OAAqB,EACrBiB,IAA2B,EAC3BX,SAAoB,EACpBX,OAAoB,EACpBG,WAAoB,EACpBgB,iBAA0B;EAE1B,IAAQI,KAAK,GAAgCD,IAAI,CAAzCC,KAAK;IAAEsB,WAAW,GAAmBvB,IAAI,CAAlCuB,WAAW;IAAE7B,YAAY,GAAKM,IAAI,CAArBN,YAAY;EACxC,IAAMqC,cAAc,GAAGlC,iBAAiB,GAAG/B,mBAAmB,GAAGY,OAAO,CAACS,SAAS;;EAGlF,IAAIc,KAAK,CAAC+B,KAAK,CAACpJ,MAAM,KAAK,CAAC,EAAE;IAC5B,IAAIqH,KAAK,CAAC+B,KAAK,CAAC,CAAC,CAAC,YAAYC,IAAI,EAAE;MAClC,OAAO1B,SAAS,CAACxB,OAAO,EAAEiB,IAAI,EAAEX,SAAS,EAAEX,OAAO,EAAEG,WAAW,EAAEgB,iBAAiB,CAAC;KACpF,MAAM,IAAII,KAAK,CAAC+B,KAAK,CAAC,CAAC,CAAC,YAAYE,IAAI,EAAE;MACzC,OAAO7B,SAAS,CAACtB,OAAO,EAAEiB,IAAI,EAAEX,SAAS,EAAEX,OAAO,EAAEG,WAAW,EAAEgB,iBAAiB,CAAC;KACpF,MAAM;MACL,MAAM,IAAIvD,KAAK,CAAC,oBAAoB,CAAC;;;EAIzC,IAAMmC,KAAK,GAAG0D,eAAe,CAACN,oBAAoB,CAAC;IACjD5B,KAAK,EAAEA,KAAoC;IAC3CsB,WAAW,EAAXA,WAAW;IACX7B,YAAY,EAAZA,YAAY;IACZL,SAAS,EAATA;GACD,CAAC;EAEF,IAAM+C,QAAQ,GAAG3D,KAAK,CAACQ,eAAe,CAACP,OAAO,CAACQ,iBAAiB,EAAEqC,WAAW,CAAC,CAAClD,QAAQ,CAAC7B,QAAQ,EAAE;EAClG,IAAM6F,SAAS,GAAG5D,KAAK,CAACiC,gBAAgB,CAAChC,OAAO,CAACQ,iBAAiB,EAAEQ,YAAY,CAAC,CAACrB,QAAQ,CAAC7B,QAAQ,EAAE;;;EAIrG,IAAM8F,QAAQ,GAAGC,6BAA6B,CAACtC,KAAoC,CAAC;EACpF,IAAMuC,oBAAoB,GAAG,SAAvBA,oBAAoB,CAAIC,CAAS;IACrC,OAAOA,CAAC,KAAKH,QAAQ,CAAC1J,MAAM,GAAG,CAAC;GACjC;EAED,IAAI8J,WAAW;EACf,IAAIC,UAAU,GAAG1C,KAAK,CAAC2C,KAAK,CAAChC,OAAO;EAEpC,KAAK,IAAI6B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,QAAQ,CAAC1J,MAAM,EAAE6J,CAAC,EAAE,EAAE;IACxC,IAAMI,OAAO,GAAGP,QAAQ,CAACG,CAAC,CAAC;;IAE3BC,WAAW,GAAGI,gBAAgB,CAACD,OAAO,EAAEF,UAAU,CAAC;IAEnD,IAAMI,gBAAgB,GAAG,IAAIC,aAAa,WACpCH,OAAO,GACXA,OAAO,CAAC,CAAC,CAAC,CAACI,MAAM,CAACC,MAAM,CAACP,UAAU,CAAC,GAAGE,OAAO,CAAC,CAAC,CAAC,CAACI,MAAM,GAAGJ,OAAO,CAAC,CAAC,CAAC,CAACM,MAAM,EAC5ET,WAAW,CACZ;IACD,IAAMU,QAAQ,GAAG,IAAIC,UAAU,CAACN,gBAAgB,CAAC;;IAGjDJ,UAAU,GAAGD,WAAW;IAExB,IAAMY,iBAAiB,GAAG,SAApBA,iBAAiB,CAAIrD,KAAwC;MACjE,OAAOA,KAAK,CAAC+B,KAAK,CAACuB,KAAK,CAAC,UAAC5B,IAAI;QAAA,OAAKA,IAAI,YAAYM,IAAI;QAAC;KACzD;IAED,IAAIqB,iBAAiB,CAACF,QAAQ,CAAC,EAAE;MAC/B,IAAM3B,IAAI,GAAW+B,sBAAsB,CAACJ,QAAQ,CAAC;MAErDrE,OAAO,CAAClD,UAAU,CAAC7C,WAAW,CAACyB,gBAAgB,EAAE;;;MAG/C+H,oBAAoB,CAACC,CAAC,CAAC,GAAGV,cAAc,GAAIO,QAAQ,CAACG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAU,CAACgB,cAAc,CAAC5C,OAAO,EAC9F4B,CAAC,IAAI,CAAC,GAAGL,QAAQ,GAAG9E,gBAAgB,EACpC,CAACkF,oBAAoB,CAACC,CAAC,CAAC,GAAG,CAAC,GAAGJ,SAAS,EACxCZ,IAAI,EACJ5C,WAAW,IAAI4D,CAAC,KAAK,CAAC,CACvB,CAAC;KACH,MAAM;MACL1D,OAAO,CAAClD,UAAU,CAAC7C,WAAW,CAAC2B,gBAAgB,EAAE,CAC/C6H,oBAAoB,CAACC,CAAC,CAAC,GAAGV,cAAc,GAAGjE,mBAAmB,EAC9D2E,CAAC,KAAK,CAAC,GAAGL,QAAQ,GAAG9E,gBAAgB,EACrC,CAACkF,oBAAoB,CAACC,CAAC,CAAC,GAAG,CAAC,GAAGJ,SAAS,EACxCe,QAAQ,CAAC3B,IAAI,CAACC,GAAG,CAAC,UAACC,IAAI;QAAA,OAAKA,IAAI,CAACd,OAAO;QAAC,EACzChC,WAAW,IAAI4D,CAAC,KAAK,CAAC,CACvB,CAAC;;;AAGR;AAEA;AACA,SAASpB,iBAAiB,CAAC5C,KAAiD;EAC1E,OAAOA,KAAK,CAACiF,WAAW,CAACC,WAAW,CAACrF,iCAAiC,CAAC;AACzE;AAEA,SAASwB,YAAY,CAAC8D,WAAwB;EAC5C,OAAO,CAAC,CAACA,WAAW,CAAC1F,GAAG,IAAI,CAAC,CAAC0F,WAAW,CAACjF,OAAO;AACnD;;ACjTA,IAAMkF,gBAAgB,GAAG,EAAE;AAC3B,IAAMC,yBAAyB,GAAG,EAAE;AAEpC,SAAgBC,YAAY,CAAChF,OAAqB,EAAEiF,OAAsB;EACxE,IAAIC,SAAS,GAAGD,OAAO,CAACC,SAAS;EAEjC,IAAMrL,MAAM,GAAGsL,MAAM,CAACC,KAAK,CAACC,QAAQ,CAACJ,OAAO,CAACC,SAAS,CAAC,CAACrL,MAAM;;EAE9D,IAAIA,MAAM,KAAKiL,gBAAgB,IAAIjL,MAAM,KAAKkL,yBAAyB,EAAE;;IAEvEG,SAAS,GAAGC,MAAM,CAACC,KAAK,CAACE,aAAa,CAACH,MAAM,CAACC,KAAK,CAACG,cAAc,CAACN,OAAO,CAACC,SAAS,CAAC,CAAC;;EAGxFlF,OAAO,CAAClD,UAAU,CAAC7C,WAAW,CAACqB,cAAc,EAAE,CAAC2J,OAAO,EAAEC,SAAS,CAAC,CAAC;AACtE;AAEA;AACA;AACA;AACA;AACA;AACA,SAAgBM,uBAAuB,CAACxF,OAAqB,EAAEL,OAA0B;;EAEvF,IAAI,CAAC,CAACA,OAAO,CAAC8F,QAAQ,IAAI,CAAC,CAAC9F,OAAO,CAAC+F,aAAa,EAC/C,EAAU/F,OAAO,CAAC8F,QAAQ,CAACE,KAAK,KAAKhG,OAAO,CAAC+F,aAAa,CAACE,OAAO,CAACD,KAAK,4CAAxE7L,SAAS,gCAATA,SAAS;EACX,IAAI,CAAC,CAAC6F,OAAO,CAAC8F,QAAQ,IAAI,CAAC,CAAC9F,OAAO,CAACkG,mBAAmB,EACrD,EAAUlG,OAAO,CAAC8F,QAAQ,CAACE,KAAK,KAAKhG,OAAO,CAACkG,mBAAmB,CAACF,KAAK,4CAAtE7L,SAAS,gCAATA,SAAS;EACX,IAAI,CAAC,CAAC6F,OAAO,CAACkG,mBAAmB,IAAI,CAAC,CAAClG,OAAO,CAAC+F,aAAa,EAC1D,EAAU/F,OAAO,CAACkG,mBAAmB,CAACF,KAAK,KAAKhG,OAAO,CAAC+F,aAAa,CAACE,OAAO,CAACD,KAAK,4CAAnF7L,SAAS,gCAATA,SAAS;;EAGX,IAAI,CAAC,CAAC6F,OAAO,CAAC8F,QAAQ,EAAE;IACtBzF,OAAO,CAAClD,UAAU,CAAC7C,WAAW,CAACuC,aAAa,EAAE,CAC5CmD,OAAO,CAAC8F,QAAQ,CAACE,KAAK,EACtBG,mBAAmB,CAACnG,OAAO,CAAC8F,QAAQ,CAACtE,QAAQ,CAAC,CAC/C,CAAC;;;EAIJ,IAAI,CAAC,CAACxB,OAAO,CAAC+F,aAAa,EAAE;IAC3BV,YAAY,CAAChF,OAAO,EAAEL,OAAO,CAAC+F,aAAa,CAAC;;EAG9C,IAAI,CAAC,CAAC/F,OAAO,CAACkG,mBAAmB,EAAE;IACjC7F,OAAO,CAAClD,UAAU,CAAC7C,WAAW,CAACuB,qBAAqB,EAAE,CACpDmE,OAAO,CAACkG,mBAAmB,CAACF,KAAK,EACjChG,OAAO,CAACkG,mBAAmB,CAACzF,SAAS,GAAGT,OAAO,CAACkG,mBAAmB,CAACzF,SAAS,GAAGrB,mBAAmB,EACnGY,OAAO,CAACkG,mBAAmB,CAACzD,MAAM,CACnC,CAAC;;AAEN;AAEA,SAAS0D,mBAAmB,CAACC,eAAuB;EAClD,QAAQA,eAAe,CAACC,WAAW,EAAE;IACnC,KAAK,4CAA4C;;MAC/C,OAAOhH,0BAA0B;IACnC,KAAK,4CAA4C;;MAC/C,OAAOA,0BAA0B;IACnC,KAAK,4CAA4C;;MAC/C,OAAOC,mBAAmB;IAC5B;MACE,MAAM,IAAI1B,KAAK,CAAC,8BAA8B,CAAC;;AAErD;;ICnEsB0I,UAAU;EAAA;EAAA,WAGhBC,kBAAkB,GAAzB,4BAA0BC,MAA2B,EAAEC;QAAAA;MAAAA,SAA2B,EAAE;;IACzF,IAAI,CAACC,KAAK,CAACC,OAAO,CAACH,MAAM,CAAC,EAAEA,MAAM,GAAG,CAACA,MAAM,CAAC;IAE7C,IAAMI,SAAS,GAAGJ,MAAM,CAACK,MAAM,CAAC,UAAC9G,KAAK,EAAE+G,CAAC;MAAA,OAAS/G,KAAK,CAACgH,cAAc,CAAC,QAAQ,CAAC;MAAwB;IACxG,IAAMzJ,WAAW,GAAGsJ,SAAS,CAAC1M,MAAM,IAAI,CAAC,IAAI0M,SAAS,CAAC,CAAC,CAAC,CAAC3M,MAAM,CAACC,MAAM,IAAI,CAAC,GAAG,KAAK,GAAG,IAAI;IAC3F,IAAMmG,OAAO,GAAG,IAAIvD,YAAY,EAAE;;IAGlC,IAAIkK,0BAA0B,GAAGnI,SAAS,CAACC,IAAI,CAAC,CAAC,CAAC;IAClD,IAAImI,gBAAgB,GAAGpI,SAAS,CAACC,IAAI,CAAC,CAAC,CAAC;;IAGxC,IAAIoI,cAAc,GAAG,IAAIzM,GAAG,EAAU;IAEtC,qDAAoB+L,MAAM,wCAAE;MAAA,IAAjBzG,KAAK;;;;MAId,IAAIA,KAAK,CAACY,SAAS,IAAI7G,eAAe,CAACC,QAAQ,EAAE;QAC/C,IAAMoN,QAAQ,GAAGpH,KAA0B;QAC3CoH,QAAQ,CAAClJ,MAAM,CAACoC,OAAO,EAAE;UAAE/C,WAAW,EAAXA;SAAa,CAAC;QACzC,IAAM8J,UAAU,GAAGD,QAAQ,CAACE,aAAa,EAAE;QAE3C,IAAIF,QAAQ,CAACnN,MAAM,IAAII,MAAM,CAACkN,OAAO,EAAE;UACrC,IAAMC,YAAY,GAAGJ,QAAwB;UAC7C,IAAMK,kBAAkB,GAAGD,YAAY,CAACE,cAAc,EAAE;UACxDD,kBAAkB,CAACE,OAAO,CAAC,UAACzD,UAAU;YACpCiD,cAAc,CAACS,GAAG,CAAC1D,UAAU,CAAC;WAC/B,CAAC;SACH,MAAM;UACLiD,cAAc,CAACS,GAAG,CAAC3I,WAAW,CAAC;;;QAIjC,IAAIgI,0BAA0B,CAACtE,EAAE,CAAC0E,UAAU,CAAC,EAAE;UAC7CH,gBAAgB,GAAGA,gBAAgB,CAACU,GAAG,CAACP,UAAU,CAAC/E,GAAG,CAAC2E,0BAA0B,CAAC,CAAC;UACnFA,0BAA0B,GAAGnI,SAAS,CAACC,IAAI,CAAC,CAAC,CAAC;SAC/C,MAAM;UACLkI,0BAA0B,GAAGA,0BAA0B,CAAC3E,GAAG,CAAC+E,UAAU,CAAC;;;;;OAK1E,MAAM,IAAIrH,KAAK,CAACY,SAAS,IAAI7G,eAAe,CAACgG,YAAY,EAAE;QAC1D,IAAM8H,YAAY,GAAG7H,KAAqB;QAC1C,IAAM8H,aAAa,GAAGD,YAAY,CAAC7H,KAAK,CAAC8C,WAAW,CAAC5B,QAAQ,CAACC,QAAQ;QACtE,IAAMH,cAAc,GAAG6G,YAAY,CAAC7H,KAAK,CAACiB,YAAY,CAACC,QAAQ,CAACC,QAAQ;QACxE,IAAMgE,WAAW,GAAG0C,YAAY,CAAC5H,OAAO;QAExC,CAAU,EAAE6H,aAAa,IAAI,CAAC,CAAC3C,WAAW,CAAC4C,gBAAgB,CAAC,2CAA5D3N,SAAS,QAAqD,qBAAqB,IAAnFA,SAAS;QAET,IAAI,CAAC,CAAC+K,WAAW,CAAC4C,gBAAgB,EAAE;UAClCzC,YAAY,CAAChF,OAAO,EAAE6E,WAAW,CAAC4C,gBAAgB,CAAC;;QAGrD,IAAID,aAAa,EAAE;UACjBZ,gBAAgB,GAAGA,gBAAgB,CAACU,GAAG,CACrC9I,SAAS,CAACC,IAAI,CAAC8I,YAAY,CAAC7H,KAAK,CAACQ,eAAe,CAAC2E,WAAW,CAAC1E,iBAAiB,CAAC,CAACb,QAAQ,CAAC7B,QAAQ,EAAE,CAAC,CACtG;;;QAGH,IAAIiD,cAAc,IAAImE,WAAW,CAACzE,SAAS,IAAIrB,mBAAmB,EAAE;UAClE4H,0BAA0B,GAAGA,0BAA0B,CAACW,GAAG,CACzD9I,SAAS,CAACC,IAAI,CAAC8I,YAAY,CAAC7H,KAAK,CAACiC,gBAAgB,CAACkD,WAAW,CAAC1E,iBAAiB,CAAC,CAACb,QAAQ,CAAC7B,QAAQ,EAAE,CAAC,CACvG;;QAEH8J,YAAY,CAAC3J,MAAM,CAACoC,OAAO,EAAE;UAAE/C,WAAW,EAAE;SAAO,CAAC;;;;OAIrD,MAAM,IAAIyC,KAAK,CAACY,SAAS,IAAI7G,eAAe,CAACiO,UAAU,EAAE;QACxD,IAAMA,UAAU,GAAGhI,KAAmB;QACtCA,KAAK,CAAC9B,MAAM,CAACoC,OAAO,EAAE;UAAE/C,WAAW,EAAE;SAAO,CAAC;QAC7C0J,0BAA0B,GAAGA,0BAA0B,CAACW,GAAG,CAACI,UAAU,CAACtF,MAAM,CAAC;;;;OAI/E,MAAM;QACL,MAAM,qDAAqD;;;;;;IAO/DyE,cAAc,CAACQ,OAAO,CAAC,UAACzD,UAAU;MAChC5D,OAAO,CAAClD,UAAU,CAAC7C,WAAW,CAAC+B,KAAK,EAAE,CAAC4H,UAAU,EAAE9E,mBAAmB,EAAE,CAAC,CAAC,CAAC;KAC5E,CAAC;IACF,OAAOmH,UAAU,CAAC0B,UAAU,CAAC3H,OAAO,EAAE4G,gBAAgB,EAAER,MAAM,CAAC;;;;;;;;EAGjE,WAMcwB,qBAAqB,GAA5B,+BAA6BzB,MAA2B,EAAEC;QAAAA;MAAAA,SAA2B,EAAE;;IAC5F,IAAIpG,OAAO,GAAG,IAAIvD,YAAY,EAAE;IAChC,IAAIoL,UAAU,GAAGrJ,SAAS,CAACC,IAAI,CAAC,CAAC,CAAC;IAElC,IAAMxB,WAAW,GAAGkJ,MAAM,CAACtM,MAAM,IAAI,CAAC,IAAIsM,MAAM,CAAC,CAAC,CAAC,CAACvM,MAAM,CAACC,MAAM,IAAI,CAAC,GAAG,KAAK,GAAG,IAAI;IAErF,sDAAoBsM,MAAM,2CAAE;MAAA,IAAjBzG,KAAK;MACdA,KAAK,CAAC9B,MAAM,CAACoC,OAAO,EAAE;QAAE/C,WAAW,EAAXA;OAAa,CAAC;MACtC4K,UAAU,GAAGA,UAAU,CAACP,GAAG,CAAC5H,KAAK,CAACsH,aAAa,EAAE,CAAC;;IAGpDhH,OAAO,CAAClD,UAAU,CAAC7C,WAAW,CAAC+B,KAAK,EAAE,CAAC2C,WAAW,EAAEG,mBAAmB,EAAE,CAAC,CAAC,CAAC;IAC5E,OAAOmH,UAAU,CAAC0B,UAAU,CAAC3H,OAAO,EAAE6H,UAAU,EAAEzB,MAAM,CAAC;;;;;;;;EAG3D,WAMc0B,uBAAuB,GAA9B,iCACL3B,MAAkD,EAClDxG,OAAoB;;IAGpB,IAAMK,OAAO,GAAG,IAAIvD,YAAY,EAAE;IAElC,IAAMiD,KAAK,GAAiB,IAAID,YAAY,CAAC0G,MAAM,EAAExG,OAAO,CAAC;IAE7D,IAAMoI,aAAa,GAAGrI,KAAK,CAACA,KAAK,CAAC8C,WAAW,CAAC5B,QAAQ;IACtD,CAAU,EAAEmH,aAAa,CAAClH,QAAQ,IAAI,CAAC,CAAClB,OAAO,CAAC8H,gBAAgB,CAAC,2CAAjE3N,SAAS,QAA0D,qBAAqB,IAAxFA,SAAS;IAET,IAAI6F,OAAO,CAAC8H,gBAAgB,EAAE;MAC5BzC,YAAY,CAAChF,OAAO,EAAEL,OAAO,CAAC8H,gBAAgB,CAAC;;IAGjD,IAAMO,mBAAmB,GAAGD,aAAa,CAAClH,QAAQ,GAC9CrC,SAAS,CAACC,IAAI,CAACiB,KAAK,CAACA,KAAK,CAACQ,eAAe,CAACP,OAAO,CAACQ,iBAAiB,CAAC,CAACb,QAAQ,CAAC7B,QAAQ,EAAE,CAAC,GAC1Fe,SAAS,CAACC,IAAI,CAAC,CAAC,CAAC;IAErBiB,KAAK,CAAC9B,MAAM,CAACoC,OAAO,EAAE;MAAE/C,WAAW,EAAE;KAAO,CAAC;IAC7C,OAAOgJ,UAAU,CAAC0B,UAAU,CAAC3H,OAAO,EAAEgI,mBAAmB,EAAE;MACzDC,QAAQ,EAAEtI,OAAO,CAACuI,2BAA2B,GAAG1J,SAAS,CAACC,IAAI,CAACkB,OAAO,CAACuI,2BAA2B,CAAC,GAAGC;KACvG,CAAC;;;;;;;;EAGJ,WAMeR,UAAU,GAAjB,oBACN3H,OAAqB,EACrBgI,mBAA8B,EAC9B5B;QAAAA;MAAAA,SAA2B,EAAE;;IAE7B,IAAQ1J,QAAQ,GAAasD,OAAO,CAA5BtD,QAAQ;MAAEC,MAAM,GAAKqD,OAAO,CAAlBrD,MAAM;IACxB,IAAMyL,iBAAiB,GAAG,CAAC,CAAChC,MAAM,CAAC6B,QAAQ,GAAG,gCAAgC,GAAG,wBAAwB;IACzG,IAAMjL,UAAU,GAAG,CAAC,CAACoJ,MAAM,CAAC6B,QAAQ,GAAG,CAACvL,QAAQ,EAAEC,MAAM,EAAEyJ,MAAM,CAAC6B,QAAQ,CAAC,GAAG,CAACvL,QAAQ,EAAEC,MAAM,CAAC;IAC/F,IAAM0L,QAAQ,GAAGpC,UAAU,CAACqC,SAAS,CAACC,kBAAkB,CAACH,iBAAiB,EAAEpL,UAAU,CAAC;IACvF,OAAO;MAAEqL,QAAQ,EAARA,QAAQ;MAAEG,KAAK,EAAER,mBAAmB,CAACS,WAAW;KAAI;GAC9D;EAAA;AAAA;AAlKaxC,oBAAS,gBAAc,IAAIyC,SAAS,CAACC,KAAG,CAAC;;ICb5CC,eAAgB;EAAA;EAG3B,yBAAYhP,MAAwB;WAClC,qBAAMG,MAAM,CAAC8O,WAAW,EAAEjP,MAAM,CAAC;;EAClC;EAAA,OAEDgE,MAAM,GAAN,gBAAOoC,OAAqB,EAAEoG,MAAmB;IAC/C,qDAAmB,IAAI,CAACxM,MAAM,wCAAE;MAAA,IAArBkP,IAAI;MACb9I,OAAO,CAAClD,UAAU,CAAC7C,WAAW,CAACc,WAAW,EAAE,CAAC+N,IAAI,CAACC,OAAO,EAAED,IAAI,CAAC1I,SAAS,EAAE0I,IAAI,CAACN,KAAK,CAAC,EAAEpC,MAAM,CAACnJ,WAAW,CAAC;;GAE9G;EAAA,OAED+L,WAAW,GAAX;IACE,IAAIC,QAAQ,GAAc,EAAE;IAC5B,sDAAmB,IAAI,CAACrP,MAAM,2CAAE;MAAA,IAArBkP,IAAI;MACbG,QAAQ,CAAC7L,IAAI,CAAC;QACZ8L,YAAY,EAAEN,eAAe,CAACO,kBAAkB;QAChDJ,OAAO,EAAED,IAAI,CAACC,OAAO;QACrBK,SAAS,EAAEpP,SAAS,CAACqP;OACtB,CAAC;;IAEJ,OAAOJ,QAAQ;GAChB;EAAA,OAEDjC,aAAa,GAAb;IACE,IAAIsC,KAAK,GAAG9K,SAAS,CAACC,IAAI,CAAC,CAAC,CAAC;IAC7B,sDAAmB,IAAI,CAAC7E,MAAM,2CAAE;MAAA,IAArBkP,IAAI;MACbQ,KAAK,GAAGA,KAAK,CAAChC,GAAG,CAACwB,IAAI,CAACN,KAAK,CAAC;;IAE/B,OAAOc,KAAK;GACb;EAAA;AAAA,EA/BkC5P,QAAwB;AAC7CkP,kCAAkeAAgB;EAAA;EAG3B,yBAAY3P,MAAwB;WAClC,qBAAMG,MAAM,CAACyP,UAAU,EAAE5P,MAAM,CAAC;;EACjC;EAAA,OAEDgE,MAAM,GAAN,gBAAOoC,OAAqB,EAAEoG,MAAmB;IAC/C,qDAAmB,IAAI,CAACxM,MAAM,wCAAE;MAAA,IAArBkP,IAAI;MACb,IAAMT,QAAQ,GAAGkB,eAAe,CAACjB,SAAS,CAACC,kBAAkB,CAAC,OAAO,EAAE,CACrEO,IAAI,CAACI,YAAY,EACjBJ,IAAI,CAACC,OAAO,EACZD,IAAI,CAACW,KAAK,EACVX,IAAI,CAACY,QAAQ,CACd,CAAC;MACF1J,OAAO,CAAClD,UAAU,CAChB7C,WAAW,CAACU,UAAU,EACtB,CAACmO,IAAI,CAACW,KAAK,EAAEpB,QAAQ,EAAES,IAAI,CAAC1I,SAAS,EAAE0I,IAAI,CAACI,YAAY,EAAEJ,IAAI,CAACC,OAAO,CAAC,EACvE3C,MAAM,CAACnJ,WAAW,CACnB;;GAEJ;EAAA,OAED+L,WAAW,GAAX;IACE,IAAIC,QAAQ,GAAc,EAAE;IAC5B,sDAAmB,IAAI,CAACrP,MAAM,2CAAE;MAAA,IAArBkP,IAAI;MACbG,QAAQ,CAAC7L,IAAI,CAAC;QACZ8L,YAAY,EAAEJ,IAAI,CAACI,YAAY;QAC/BH,OAAO,EAAED,IAAI,CAACC,OAAO;QACrBK,SAAS,EAAEpP,SAAS,CAAC2P;OACtB,CAAC;;IAEJ,OAAOV,QAAQ;GAChB;EAAA,OAEDjC,aAAa,GAAb;IACE,IAAIsC,KAAK,GAAG9K,SAAS,CAACC,IAAI,CAAC,CAAC,CAAC;IAC7B,sDAAmB,IAAI,CAAC7E,MAAM,2CAAE;MAAA,IAArBkP,IAAI;MACbQ,KAAK,GAAGA,KAAK,CAAChC,GAAG,CAACwB,IAAI,CAACW,KAAK,CAAC;;IAE/B,OAAOH,KAAK;GACb;EAAA;AAAA,EAzCkC5P,QAAwB;AAC7C6P,yBAAS,gBAAc,IAAIbwC5CiB,gBAAiB;EAAA;EAI5B,0BAAYhQ,MAAyB;WACnC,qBAAMG,MAAM,CAAC8P,WAAW,EAAEjQ,MAAM,CAAC;;EAClC;EAAA,OAEDgE,MAAM,GAAN,gBAAOoC,OAAqB,EAAEoG,MAAmB;IAC/C,4BAA6E,IAAI,CAAC0D,eAAe,CAAC,IAAI,CAAClQ,MAAM,CAAC;MAAtGmQ,SAAS,yBAATA,SAAS;MAAEC,WAAW,yBAAXA,WAAW;MAAEC,eAAe,yBAAfA,eAAe;MAAEC,UAAU,yBAAVA,UAAU;MAAEC,WAAW,yBAAXA,WAAW;IAExE,IAAI9B,QAAQ;IACZ,IAAI,IAAI,CAACzO,MAAM,CAACC,MAAM,IAAI,CAAC,EAAE;MAC3BwO,QAAQ,GAAGuB,gBAAgB,CAACtB,SAAS,CAACC,kBAAkB,CAAC,iBAAiB,EAAE,CAC1EwB,SAAS,CAAC,CAAC,CAAC,EACZC,WAAW,CAAC,CAAC,CAAC,EACdC,eAAe,CAAC,CAAC,CAAC,EAClBE,WAAW,CAAC,CAAC,CAAC,EACdtL,YAAY,CACb,CAAC;KACH,MAAM;MACLwJ,QAAQ,GAAGuB,gBAAgB,CAACtB,SAAS,CAACC,kBAAkB,CAAC,0BAA0B,EAAE,CACnFwB,SAAS,EACTC,WAAW,EACXC,eAAe,EACfE,WAAW,EACXtL,YAAY,EACZ,KAAK,CACN,CAAC;;IAGJmB,OAAO,CAAClD,UAAU,CAAC7C,WAAW,CAACO,aAAa,EAAE,CAAC0P,UAAU,EAAE7B,QAAQ,CAAC,EAAEjC,MAAM,CAACnJ,WAAW,CAAC;GAC1F;EAAA,OAED+L,WAAW,GAAX;IACE,IAAIC,QAAQ,GAAc,EAAE;IAC5B,qDAAmB,IAAI,CAACrP,MAAM,wCAAE;MAAA,IAArBkP,IAAI;MACb,IAAMI,YAAY,GAAGJ,IAAI,CAACsB,QAAQ,CAACC,UAAU;MAC7C,IAAMjB,SAAS,GACbN,IAAI,CAACsB,QAAQ,CAACE,cAAc,IAAIV,gBAAgB,CAACW,YAAY,GAAGvQ,SAAS,CAAC2P,MAAM,GAAG3P,SAAS,CAACwQ,OAAO;MACtG,sDAAsB1B,IAAI,CAACsB,QAAQ,CAACK,OAAO,2CACzC;QAAA,IADS1B,OAAO;QAChBE,QAAQ,CAAC7L,IAAI,CAAC;UACZ8L,YAAY,EAAZA,YAAY;UACZH,OAAO,EAAPA,OAAO;UACPK,SAAS,EAATA;SACD,CAAC;;;IAEN,OAAOH,QAAQ;GAChB;EAAA,OAEDjC,aAAa,GAAb;IACE,IAAIsC,KAAK,GAAG9K,SAAS,CAACC,IAAI,CAAC,CAAC,CAAC;IAC7B,sDAAmB,IAAI,CAAC7E,MAAM,2CAAE;MAAA,IAArBkP,IAAI;MACbQ,KAAK,GAAGA,KAAK,CAAChC,GAAG,CAACwB,IAAI,CAACsB,QAAQ,CAACX,KAAK,CAAC;;IAExC,OAAOH,KAAK;GACb;EAAA,OAEOQ,eAAe,GAAf,yBAAgBlQ,MAAyB;IAO/C,IAAImQ,SAAS,GAAiB,EAAE;IAChC,IAAIC,WAAW,GAAiB,EAAE;IAClC,IAAIC,eAAe,GAAa,EAAE;IAClC,IAAIC,UAAU,GAAc1L,SAAS,CAACC,IAAI,CAAC,CAAC,CAAC;IAC7C,IAAI0L,WAAW,GAAiB,EAAE;IAElCvQ,MAAM,CAACyN,OAAO,CAAC,UAACqD,KAAK;;MACnBV,WAAW,CAAC5M,IAAI,cAAMsN,KAAK,CAACN,QAAQ,EAAG;MAEvCH,eAAe,CAAC7M,IAAI,CAACsN,KAAK,CAACN,QAAQ,CAAClF,SAAS,CAAC;MAE9C6E,SAAS,CAAC3M,IAAI,CAAC;QACbgD,SAAS,EAAEsK,KAAK,CAACC,KAAK;QACtBC,oBAAoB,EAAE;OACvB,CAAC;MAEFV,UAAU,GAAGA,UAAU,CAAC5C,GAAG,CAAC9I,SAAS,CAACC,IAAI,CAACiM,KAAK,CAACN,QAAQ,CAACX,KAAK,CAAC,CAAC;MAEjEU,WAAW,CAAC/M,IAAI,CAAC;QACfyN,IAAI,2BAAEH,KAAK,CAACN,QAAQ,CAACU,UAAU,oCAAI,oEAAoE;QACvGC,KAAK,4BAAEL,KAAK,CAACN,QAAQ,CAACY,WAAW,qCAAI;OACtC,CAAC;KACH,CAAC;IAEF,OAAO;MAAEjB,SAAS,EAATA,SAAS;MAAEC,WAAW,EAAXA,WAAW;MAAEC,eAAe,EAAfA,eAAe;MAAEC,UAAU,EAAVA,UAAU;MAAEC,WAAW,EAAXA;KAAa;GAC5E;EAAA;AAAA,EA1FmCzQ,QAAyB;AAC/CkQ,0BAAS,gBAAc,IAAIlB,SAAS,CAACC,KAAG,CAAC;AACxCiB,6BAAY,GAAG,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ICzCpBqB,UAAW;EAAA;EAGtB,oBAAYrR,MAAmB;WAC7B,qBAAMG,MAAM,CAACc,KAAK,EAAEjB,MAAM,CAAC;;EAC5B;EAAA,OAEDgE,MAAM,GAAN,gBAAOoC,OAAqB,EAAEoG,MAAmB;IAC/C,qDAAoB,IAAI,CAACxM,MAAM,wCAAE;MAAA,IAAtB8Q,KAAK;MACd,IAAMrC,QAAQ,GAAG4C,UAAU,CAAC3C,SAAS,CAACC,kBAAkB,CAAC,WAAW,EAAE,CACpEmC,KAAK,CAACxB,YAAY,EAClBwB,KAAK,CAACQ,QAAQ,EACdR,KAAK,CAACS,YAAY,EAClBT,KAAK,CAACtK,SAAS,EACfsK,KAAK,CAACvL,GAAG,EACTuL,KAAK,CAACU,IAAI,CACX,CAAC;MACFpL,OAAO,CAAClD,UAAU,CAAC7C,WAAW,CAACY,KAAK,EAAE,CAAC6P,KAAK,CAAClC,KAAK,EAAEH,QAAQ,CAAC,EAAEjC,MAAM,CAACnJ,WAAW,CAAC;;GAErF;EAAA,OAED+L,WAAW,GAAX;IACE,IAAIC,QAAQ,GAAc,EAAE;IAC5B,sDAAmB,IAAI,CAACrP,MAAM,2CAAE;MAAA,IAArBgJ,IAAI;MACb,sDAAsBA,IAAI,CAACsI,QAAQ,2CAAE;QAAA,IAA1BnC,OAAO;QAChBE,QAAQ,CAAC7L,IAAI,CAAC;UACZ8L,YAAY,EAAEtG,IAAI,CAACsG,YAAY;UAC/BH,OAAO,EAAEA,OAAO;UAChBK,SAAS,EAAEpP,SAAS,CAAC2P;SACtB,CAAC;;;IAIN,OAAOV,QAAQ;GAChB;EAAA,OAEDjC,aAAa,GAAb;IACE,IAAIsC,KAAK,GAAG9K,SAAS,CAACC,IAAI,CAAC,CAAC,CAAC;IAC7B,sDAAmB,IAAI,CAAC7E,MAAM,2CAAE;MAAA,IAArBkP,IAAI;MACbQ,KAAK,GAAGA,KAAK,CAAChC,GAAG,CAACwB,IAAI,CAACN,KAAK,CAAC;;IAE/B,OAAOc,KAAK;GACb;EAAA;AAAA,EA1C6B5P,QAAmB;AACnCuR,oBAAS,gBAAc,IAAIvrB,mBAAYzR,MAAkB;WAC5B,qBAAMG,MAAM,CAACQ,IAAI,EAAEX,MAAM,CAAC;;EAC3B;EAAA,OAEDgE,MAAM,GAAN,gBAAOoC,OAAqB,EAAEoG,MAAmB;IAC/C,qDAAoB,IAAI,CAACxM,MAAM,wCAAE;MAAA,IAAtB8Q,KAAK;MACd,IAAMrC,QAAQ,GAAGgD,SAAS,CAAC/C,SAAS,CAACC,kBAAkB,CAAC,cAAc,EAAE,CACtEmC,KAAK,CAACY,OAAO,EACbZ,KAAK,CAACQ,QAAQ,CAACrR,MAAM,EACrB6Q,KAAK,CAACQ,QAAQ,EACdR,KAAK,CAACa,YAAY,EAClBb,KAAK,CAACtK,SAAS,CAChB,CAAC;MAEFJ,OAAO,CAAClD,UAAU,CAAC7C,WAAW,CAACM,IAAI,EAAE,CAACmQ,KAAK,CAAClC,KAAK,EAAEH,QAAQ,CAAC,EAAEjC,MAAM,CAACnJ,WAAW,CAAC;;GAEpF;EAAA,OAED+L,WAAW,GAAX;IACE,IAAIC,QAAQ,GAAc,EAAE;IAC5B,sDAAoB,IAAI,CAACrP,MAAM,2CAAE;MAAA,IAAtB8Q,KAAK;MACd,sDAAsBA,KAAK,CAACQ,QAAQ,2CAAE;QAAA,IAA3BnC,OAAO;QAChBE,QAAQ,CAAC7L,IAAI,CAAC;UACZ8L,YAAY,EAAEwB,KAAK,CAACxB,YAAY;UAChCH,OAAO,EAAEA,OAAO;UAChBK,SAAS,EAAEpP,SAAS,CAAC2P;SACtB,CAAC;;;IAGN,OAAOV,QAAQ;GAChB;EAAA,OAEDjC,aAAa,GAAb;IACE,IAAIsC,KAAK,GAAG9K,SAAS,CAACC,IAAI,CAAC,CAAC,CAAC;IAC7B,sDAAmB,IAAI,CAAC7E,MAAM,2CAAE;MAAA,IAArBkP,IAAI;MACbQ,KAAK,GAAGA,KAAK,CAAChC,GAAG,CAACwB,IAAI,CAACN,KAAK,CAAC;;IAE/B,OAAOc,KAAK;GACb;EAAA;AAAA,EAzC4B5P,QAAkB;AACjC2R,mBAAS,gBAAcgD5C6C,YAAa;EAAA;EAIxB,sBAAY5R,MAAqB;WAC/B,qBAAMG,MAAM,CAACkN,OAAO,EAAErN,MAAM,CAAC;;EAC9B;EAAA,OAEDgE,MAAM,GAAN,gBAAOoC,OAAqB,EAAEoG,MAAmB;IAC/C,qDAAoB,IAAI,CAACxM,MAAM,wCAAE;MAAA,IAAtB8Q,KAAK;MACd,IAAIe,cAAc,GAAoB,EAAE;MACxC,IAAIC,iBAAiB,GAA6BhB,KAAK,CAACiB,KAAK,CAAChJ,GAAG,CAAC,UAAC8D,CAAC,EAAEmF,KAAK;QAAA,OAAK,CAC9E;UAAEC,UAAU,EAAED,KAAK;UAAEE,SAAS,EAAE;SAAG,CACpC;QAAC;MACF,IAAIC,yBAAyB,GAA6B,IAAI,CAACC,4BAA4B,CAACtB,KAAK,CAACiB,KAAK,CAAC;MAExG,sDAAmBjB,KAAK,CAACiB,KAAK,2CAAE;QAAA,IAArB7C,IAAI;QACb,4BAA0B,IAAI,CAACmD,sBAAsB,CAACnD,IAAI,CAAC;UAAnDoD,aAAa,yBAAbA,aAAa;QACrBT,cAAc,CAACrO,IAAI,CAAC8O,aAAa,CAAC;;MAGpC,IAAI7D,QAAgB;MACpB,IAAIoD,cAAc,CAAC5R,MAAM,IAAI,CAAC,EAAE;QAC9BwO,QAAQ,GAAGmD,YAAY,CAAClD,SAAS,CAACC,kBAAkB,CAAC,sBAAsB,EAAE,CAC3EkD,cAAc,CAAC,CAAC,CAAC,EACjB,EAAE,EACFD,YAAY,CAACW,mBAAmB,EAChCzB,KAAK,CAACtK,SAAS,CAChB,CAAC;OACH,MAAM;QACLiI,QAAQ,GAAGmD,YAAY,CAAClD,SAAS,CAACC,kBAAkB,CAAC,gCAAgC,EAAE,CACrFkD,cAAc,EACd,EAAE,EACFC,iBAAiB,EACjBK,yBAAyB,EACzBP,YAAY,CAACW,mBAAmB,EAChCzB,KAAK,CAACtK,SAAS,EACf,GAAG,CACJ,CAAC;;MAGJ,IAAI,CAAC,CAACsK,KAAK,CAAC0B,oBAAoB,EAAE;QAChC,sDAAyB1B,KAAK,CAAC0B,oBAAoB,2CACjD;UAAA,IADSxI,UAAU;UACnB4B,uBAAuB,CAACxF,OAAO,EAAE;YAC/ByF,QAAQ,EAAE7B,UAAU,CAACyI,gBAAgB,GACjC;cAAE1G,KAAK,EAAE/B,UAAU,CAAC+B,KAAK;cAAExE,QAAQ,EAAEuJ,KAAK,CAAC3E;aAAiB,GAC5DoC,SAAS;YACbzC,aAAa,EAAE9B,UAAU,CAAC8B,aAAa;YACvCG,mBAAmB,EAAEjC,UAAU,CAACiC,mBAAmB,GAC/C;cAAEF,KAAK,EAAE/B,UAAU,CAAC+B,KAAK;cAAEvD,MAAM,EAAE,IAAI,CAACkK,kBAAkB,CAAC5B,KAAK,EAAE9G,UAAU,CAAC+B,KAAK,CAAC,CAAClI,QAAQ;aAAI,GAChG0K;WACL,CAAC;;;MAGNnI,OAAO,CAAClD,UAAU,CAChB,IAAI,CAACyP,UAAU,CAAC7B,KAAK,CAAC3E,eAAe,CAAC,EACtC,CAAC,IAAI,CAACuG,kBAAkB,CAAC5B,KAAK,EAAE/L,WAAW,CAAC,CAAClB,QAAQ,EAAE,EAAE4K,QAAQ,CAAC,EAClEjC,MAAM,CAACnJ,WAAW,CACnB;;GAEJ;EAAA,OAED+L,WAAW,GAAX;IACE,IAAIC,QAAQ,GAAc,EAAE;IAC5B,sDAAoB,IAAI,CAACrP,MAAM,2CAAE;MAAA,IAAtB8Q,KAAK;MACd,sDAAmBA,KAAK,CAACiB,KAAK,2CAAE;QAAA,IAArB7C,IAAI;QACb,sDAAoBA,IAAI,CAAC9L,UAAU,CAACwP,KAAK,2CAAE;UAAA,IAAhCA,KAAK;UACdvD,QAAQ,CAAC7L,IAAI,CAAC;YACZ8L,YAAY,EAAEsD,KAAK,CAAC7G,KAAK;YACzBoD,OAAO,EAAEyD,KAAK,CAACC,oBAAoB;YACnCrD,SAAS,EAAEpP,SAAS,CAAC2P;WACtB,CAAC;;;;IAIR,OAAOV,QAAQ;GAChB;EAAA,OAED7B,cAAc,GAAd;IACE,IAAIsF,WAAW,GAAG,IAAItS,GAAG,EAAU;IACnC,sDAAoB,IAAI,CAACR,MAAM,2CAAE;MAAA,IAAtB8Q,KAAK;MACd,sDAAmBA,KAAK,CAACiB,KAAK,2CAAE;QAAA,IAArB7C,IAAI;QACb,sDAA4BA,IAAI,CAAC9L,UAAU,CAAC2P,aAAa,2CAAE;UAAA,IAAhDA,aAAa;UACtB,IAAMhH,KAAK,GAAGgH,aAAa,CAAChH,KAAK,CAACK,WAAW,EAAE;UAC/C0G,WAAW,CAACpF,GAAG,CAAC3B,KAAK,CAAC;;;;IAI5B,OAAO+G,WAAW;GACnB;EAAA,OAEDJ,kBAAkB,GAAlB,4BAAmB5B,KAAkB,EAAE/E;QAAAA;MAAAA,QAAgBhH,WAAW;;IAChE,IAAIiO,eAAe,GAAGpO,SAAS,CAACC,IAAI,CAAC,CAAC,CAAC;IACvC,uDAAmBiM,KAAK,CAACiB,KAAK,8CAAE;MAAA,IAArB7C,IAAI;MACb8D,eAAe,GAAGA,eAAe,CAACtF,GAAG,CAAC,IAAI,CAACuF,cAAc,CAAC/D,IAAI,CAAC9L,UAAU,CAAC2P,aAAa,EAAEhH,KAAK,CAAC,CAAC;;IAElG,OAAOiH,eAAe;GACvB;EAAA,OAED5F,aAAa,GAAb,uBAAcrB;QAAAA;MAAAA,QAAgBhH,WAAW;;IACvC,IAAIkJ,UAAU,GAAGrJ,SAAS,CAACC,IAAI,CAAC,CAAC,CAAC;IAClC,uDAAoB,IAAI,CAAC7E,MAAM,8CAAE;MAAA,IAAtB8Q,KAAK;MACd,uDAAmBA,KAAK,CAACiB,KAAK,8CAAE;QAAA,IAArB7C,IAAI;QACbjB,UAAU,GAAGA,UAAU,CAACP,GAAG,CAAC,IAAI,CAACuF,cAAc,CAAC/D,IAAI,CAAC9L,UAAU,CAAC2P,aAAa,EAAEhH,KAAK,CAAC,CAAC;;;IAG1F,OAAOkC,UAAU;GAClB;EAAA,OAEO0E,UAAU,GAAV,oBAAWxG,eAAuB;IACxC,QAAQA,eAAe,CAACC,WAAW,EAAE;MACnC,KAAK,4CAA4C;;QAC/C,OAAO/L,WAAW,CAACI,YAAY;MACjC,KAAK,4CAA4C;;QAC/C,OAAOJ,WAAW,CAACK,YAAY;MACjC;QACE,MAAM,IAAIiD,KAAK,CAAC,6BAA6B,CAAC;;GAEnD;EAAA,OAEOyO,4BAA4B,GAA5B,sCAA6Bc,aAAsB;IACzD,IAAIC,yBAAyB,GAA6B,EAAE;IAC5D,IAAMC,uBAAuB,GAAa,EAAE;IAE5C,KAAK,IAAMtJ,CAAC,IAAIoJ,aAAa,EAAE;MAC7B,IAAMG,YAAY,GAAGH,aAAa,CAACpJ,CAAC,CAAC;MAAA,2BAE1BwJ,CAAC;QACV,IAAMpE,IAAI,GAAGmE,YAAY,CAACjQ,UAAU,CAAC2P,aAAa,CAACO,CAAC,CAAC;QAErD,IAAIF,uBAAuB,CAACG,SAAS,CAAC,UAACC,CAAC;UAAA,OAAKA,CAAC,KAAKtE,IAAI,CAAC1I,SAAS;UAAC,KAAK,CAAC,CAAC,EAAE;UACzE4M,uBAAuB,CAAC5P,IAAI,CAAC0L,IAAI,CAAC1I,SAAS,CAAC;;QAG9C,IAAMiN,cAAc,GAAGL,uBAAuB,CAACG,SAAS,CAAC,UAACC,CAAC;UAAA,OAAKA,CAAC,KAAKtE,IAAI,CAAC1I,SAAS;UAAC;QAErF,IAAI,CAAC2M,yBAAyB,CAACM,cAAc,CAAC,EAAE;UAC9CN,yBAAyB,CAAC3P,IAAI,CAAC,CAC7B;YACEyO,UAAU,EAAEnI,CAAC;YACboI,SAAS,EAAEoB;WACZ,CACF,CAAC;SACH,MAAM;UACLH,yBAAyB,CAACM,cAAc,CAAC,CAACjQ,IAAI,CAAC;YAC7CyO,UAAU,EAAEnI,CAAC;YACboI,SAAS,EAAEoB;WACZ,CAAC;;;MApBN,KAAK,IAAMA,CAAC,IAAID,YAAY,CAACjQ,UAAU,CAAC2P,aAAa,EAAE;QAAA,MAA5CO,CAAC;;;IAwBd,OAAOH,yBAAyB;GACjC;EAAA,OAEOd,sBAAsB,GAAtB,gCAAuBqB,IAAW;IACxC,IAAMpB,aAAa,GAAG;MACpBlP,UAAU,EAAEsQ,IAAI,CAACtQ,UAAU;MAC3BuQ,SAAS,EAAE/O,SAAS,CAACC,IAAI,CAAC,GAAG,CAAC;MAC9B+O,WAAW,EAAEhP,SAAS,CAACC,IAAI,CAAC,GAAG,CAAC;MAChCyG,SAAS,EAAEoI,IAAI,CAACpI,SAAS;MACzBuI,SAAS,EAAE;KACZ;IACD,OAAO;MAAEvB,aAAa,EAAbA;KAAe;GACzB;EAAA,OAEOW,cAAc,GAAd,wBAAea,cAAmC,EAAE/H,KAAa;IACvE,OAAO+H,cAAc,CAACC,MAAM,CAC1B,UAACC,GAAc,EAAEjB,aAAgC;MAAA,OAC/CA,aAAa,CAAChH,KAAK,CAACK,WAAW,EAAE,IAAIL,KAAK,CAACK,WAAW,EAAE,GAAG4H,GAAG,CAACtG,GAAG,CAACqF,aAAa,CAACkB,WAAW,CAAC,GAAGD,GAAG;OACrGpP,SAAS,CAACC,IAAI,CAAC,CAAC,CAAC,CAClB;GACF;EAAA;AAAA,EA3K+B/E,QAAqB;AACvC8R,sBAAS,gBAAc,IAAI9C,SAAS,CAACC,KAAG,CAAC;AACzC6C,gCAAmB,GAAW,oEAAorGsC,aAAc;EAAA;EAGzB,uBAAYlU,MAAsB;WAChC,qBAAMG,MAAM,CAACgU,QAAQ,EAAEnU,MAAM,CAAC;;EAC/B;EAAA,OAEDgE,MAAM,GAAN,gBAAOoC,OAAqB,EAAEoG,MAAmB;IAC/C,qDAAoB,IAAI,CAACxM,MAAM,wCAAE;MAAA,IAAtB8Q,KAAK;MACd,IAAMrC,QAAQ,GAAGyF,aAAa,CAACxF,SAAS,CAACC,kBAAkB,CAAC,8BAA8B,EAAE,CAC1FmC,KAAK,CAAC1J,KAAK,CAAC2B,GAAG,CAAC,UAAC1B,IAAI;QACnB,OAAO;UAAE+M,QAAQ,EAAE/M,IAAI,CAAC+M,QAAQ;UAAEC,OAAO,EAAEhN,IAAI,CAACgN;SAAS;OAC1D,CAAC,EACFvD,KAAK,CAACwD,YAAY,EAClBxD,KAAK,CAACyD,YAAY,EAClBzD,KAAK,CAACzC,QAAQ,CACf,CAAC;MACF,IAAMO,KAAK,GAAGkC,KAAK,CAAC1J,KAAK,CAAC2M,MAAM,CAAC,UAACS,OAAO,EAAEnN,IAAI;QAC7C,OAAOmN,OAAO,CAAC9G,GAAG,CAACrG,IAAI,CAACgN,OAAO,CAAC;OACjC,EAAEzP,SAAS,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;MACrBuB,OAAO,CAAClD,UAAU,CAAC7C,WAAW,CAACW,QAAQ,EAAE,CAAC4N,KAAK,EAAEH,QAAQ,CAAC,EAAEjC,MAAM,CAACnJ,WAAW,CAAC;;GAElF;EAAA,OAED+L,WAAW,GAAX;IACE,IAAIC,QAAQ,GAAc,EAAE;IAC5B,sDAAoB,IAAI,CAACrP,MAAM,2CAAE;MAAA,IAAtB8Q,KAAK;MACd,sDAAmBA,KAAK,CAAC1J,KAAK,2CAAE;QAAA,IAArBC,IAAI;QACb,sDAAsBA,IAAI,CAAC+M,QAAQ,CAACK,MAAM,2CAAE;UAAA,IAAjCtF,OAAO;UAChBE,QAAQ,CAAC7L,IAAI,CAAC;YACZ8L,YAAY,EAAEjI,IAAI,CAACiI,YAAY;YAC/BH,OAAO,EAAPA,OAAO;YACPK,SAAS,EAAEpP,SAAS,CAAC2P;WACtB,CAAC;;;;IAIR,OAAOV,QAAQ;GAChB;EAAA,OAEDjC,aAAa,GAAb;IACE,IAAIsC,KAAK,GAAG9K,SAAS,CAACC,IAAI,CAAC,CAAC,CAAC;IAC7B,sDAAoB,IAAI,CAAC7E,MAAM,2CAAE;MAAA,IAAtB8Q,KAAK;MACd,sDAAmBA,KAAK,CAAC1J,KAAK,2CAAE;QAAA,IAArBC,IAAI;QACbqI,KAAK,GAAGA,KAAK,CAAChC,GAAG,CAACrG,IAAI,CAACgN,OAAO,CAAC;;;IAGnC,OAAO3E,KAAK;GACb;EAAA;AAAA,EAhDgC5P,QAAsB;AACzCoU,uBAAS,gBAAc,IAAIprB,mBAAY1U,MAAkB;WAC5B,qBAAMG,MAAM,CAACwU,IAAI,EAAE3U,MAAM,CAAC;;EAC3B;EAAA,OAEDgE,MAAM,GAAN,gBAAOoC,OAAqB,EAAEoG,MAAmB;IAC/C,qDAAmB,IAAI,CAACxM,MAAM,wCAAE;MAAA,IAArBkP,IAAI;MACb,IAAM0F,gBAAgB,GAAGF,SAAS,CAAChG,SAAS,CAACmG,UAAU,CAACH,SAAS,CAAChG,SAAS,CAACoG,WAAW,CAAC,KAAK,CAAC,CAAC;MAC/F,IAAMrG,QAAQ,GAAGmG,gBAAgB,GAAG1F,IAAI,CAAC6F,WAAW,CAACC,KAAK,CAAC,CAAC,CAAC;MAE7D,IAAI9F,IAAI,CAACM,SAAS,IAAIpP,SAAS,CAAC2P,MAAM,EAAE;QACtC3J,OAAO,CAAClD,UAAU,CAChB7C,WAAW,CAACQ,QAAQ,EACpB,CAACqO,IAAI,CAACW,KAAK,EAAEpB,QAAQ,EAAES,IAAI,CAAC1I,SAAS,EAAE0I,IAAI,CAACI,YAAY,EAAEJ,IAAI,CAACC,OAAO,CAAC,EACvE3C,MAAM,CAACnJ,WAAW,CACnB;OACF,MAAM,IAAI6L,IAAI,CAACM,SAAS,IAAIpP,SAAS,CAACwQ,OAAO,EAAE;QAC9CxK,OAAO,CAAClD,UAAU,CAChB7C,WAAW,CAACS,SAAS,EACrB,CAACoO,IAAI,CAACW,KAAK,EAAEpB,QAAQ,EAAES,IAAI,CAAC1I,SAAS,EAAE0I,IAAI,CAACI,YAAY,EAAEJ,IAAI,CAACC,OAAO,EAAED,IAAI,CAAC+F,WAAW,CAAC,EACzFzI,MAAM,CAACnJ,WAAW,CACnB;;;GAGN;EAAA,OAED+L,WAAW,GAAX;IACE,IAAIC,QAAQ,GAAc,EAAE;IAC5B,sDAAmB,IAAI,CAACrP,MAAM,2CAAE;MAAA,IAArBkP,IAAI;MACbG,QAAQ,CAAC7L,IAAI,CAAC;QACZ8L,YAAY,EAAEJ,IAAI,CAACI,YAAY;QAC/BH,OAAO,EAAED,IAAI,CAACC,OAAO;QACrBK,SAAS,EAAEN,IAAI,CAACM;OACjB,CAAC;;IAEJ,OAAOH,QAAQ;GAChB;EAAA,OAEDjC,aAAa,GAAb;IACE,IAAIsC,KAAK,GAAG9K,SAAS,CAACC,IAAI,CAAC,CAAC,CAAC;IAC7B,sDAAmB,IAAI,CAAC7E,MAAM,2CAAE;MAAA,IAArBkP,IAAI;MACbQ,KAAK,GAAGA,KAAK,CAAChC,GAAG,CAACwB,IAAI,CAACW,KAAK,CAAC;;IAE/B,OAAOH,KAAK;GACb;EAAA;AAAA,EA9C4B5P,QAAkB;AACjC4U,mBAAS,gBAAc,IAAI5F,SAAS,CAACC,KAAG,CAAC;;ICpB5CjB,UAAU;EAMrB,oBAAYtF,MAAoB,EAAEjE,OAAe,EAAE8G,OAAuB;IALjE,cAAS,GAAoBxL,eAAe,CAACiO,UAAU;IAM9D,IAAI,CAACoH,WAAW,GAAGzQ,YAAY,CAACF,OAAO,CAAC;IACxC,IAAI,CAACiE,MAAM,GAAGA,MAAM;IAEpB,IAAI,CAAC,CAAC6C,OAAO,EAAE;MACb,EACEA,OAAO,CAACW,OAAO,CAACD,KAAK,CAACK,WAAW,EAAE,KAAK,IAAI,CAAC8I,WAAW,CAAC9I,WAAW,EAAE,4CADxElM,SAAS,8CAE6B,IAAI,CAACgV,WAAW,IAFtDhV,SAAS;MAIT,EAAUmL,OAAO,CAACW,OAAO,CAACxD,MAAM,IAAIA,MAAM,4CAA1CtI,SAAS,mEAATA,SAAS;MACT,IAAI,CAACiV,WAAW,GAAG9J,OAAO;;;EAE7B;EAAA,OAEDrH,MAAM,GAAN,gBAAOoC,OAAqB,EAAEyG,CAAc;IAC1CjB,uBAAuB,CAACxF,OAAO,EAAE;MAC/B0F,aAAa,EAAE,IAAI,CAACqJ,WAAW;MAC/BlJ,mBAAmB,EAAE;QACnBF,KAAK,EAAE,IAAI,CAACmJ,WAAW;QACvB1M,MAAM,EAAE,IAAI,CAACA,MAAM,CAAC3E,QAAQ;;KAE/B,CAAC;IACFuC,OAAO,CAAClD,UAAU,CAAC7C,WAAW,CAAC8B,WAAW,EAAE,CAACgD,mBAAmB,EAAE,IAAI,CAACqD,MAAM,CAAC,CAAC;GAChF;EAAA;AAAA;;ICnBS4M,QAGX;AAHD,WAAYA,QAAQ;EAClBA,8BAAkB;EAClBA,8BAAkB;AACpB,CAAC,EAHWA,QAAQ,KAARA,QAAQ;AAkDpB,IAAaC,gBAAgB,GAAG,SAAnBA,gBAAgB,CAAInN,OAAe;EAAA,OAC9CA,OAAO,CAACkE,WAAW,EAAE,KAAKrH,WAAW,CAACqH,WAAW,EAAE,IAAIlE,OAAO,CAACkE,WAAW,EAAE,KAAKpH,aAAa,CAACoH,WAAW,EAAE;AAAA;AAE9G;AACA;AACA,IAAakJ,kBAAkB;EAAA;;EAC7B,mBACOC,gBAAgB,GAAvB,0BAAwBC,KAA0B;IAChD,IAAQlO,KAAK,GAAwBkO,KAAK,CAAlClO,KAAK;MAAEmO,OAAO,GAAeD,KAAK,CAA3BC,OAAO;MAAEC,QAAQ,GAAKF,KAAK,CAAlBE,QAAQ;IAEhC,IAAI,CAACpO,KAAK,EAAE,MAAM,IAAI3D,KAAK,CAAC,8BAA8B,CAAC;IAC3D,IAAI,CAAC2D,KAAK,CAACrH,MAAM,EAAE,MAAM,IAAI0D,KAAK,CAAC,yCAAyC,CAAC;IAC7E,IAAI2D,KAAK,CAACqO,IAAI,CAAC,UAACC,CAAC;MAAA,OAAK,CAACA,CAAC,CAAC3V,MAAM;MAAC,EAAE,MAAM,IAAI0D,KAAK,CAAC,+CAA+C,CAAC;IAClG,IAAMkS,UAAU,GAAGvO,KAAK,CAAC,CAAC,CAAC;IAE3B,IAAMwO,WAAW,GAAGD,UAAU,CAAC,CAAC,CAAC,CAACJ,OAAO;IACzC,IAAMM,YAAY,GAAGF,UAAU,CAACA,UAAU,CAAC5V,MAAM,GAAG,CAAC,CAAC,CAACyV,QAAQ;IAE/D,IAAI,CAACI,WAAW,IAAI,CAACC,YAAY,EAAE,MAAM,IAAIpS,KAAK,CAAC,kDAAkD,CAAC;IACtG,IAAImS,WAAW,CAACvR,OAAO,KAAKwR,YAAY,CAACxR,OAAO,EAC9C,MAAM,IAAIZ,KAAK,CAAC,uDAAuD,CAAC;IAE1E,IAAMqS,gBAAgB,GAAGV,kBAAkB,CAACW,UAAU,CAACZ,gBAAgB,CAACI,OAAO,CAAC,EAAEK,WAAW,CAAC;IAC9F,IAAMI,iBAAiB,GAAGZ,kBAAkB,CAACW,UAAU,CAACZ,gBAAgB,CAACK,QAAQ,CAAC,EAAEK,YAAY,CAAC;IAEjG,IAAMI,WAAW,GAAkB7O,KAAK,CAACyB,GAAG,CAAC,UAACqN,QAAQ;MACpD,IAAMC,WAAW,GAAGD,QAAQ,CAAC,CAAC,CAAC,CAAC3M,QAAQ;MACxC,IAAM6M,YAAY,GAAGF,QAAQ,CAACA,QAAQ,CAACnW,MAAM,GAAG,CAAC,CAAC,CAACyJ,SAAS;MAE5D,IAAI,CAAC2M,WAAW,IAAI,CAACC,YAAY,EAAE;QACjC,MAAM,IAAI3S,KAAK,CAAC,4DAA4D,CAAC;;MAG/E,IAAMiF,WAAW,GAAG2N,cAAc,CAACC,aAAa,CAACR,gBAAgB,EAAEK,WAAW,CAAC;MAC/E,IAAMtP,YAAY,GAAGwP,cAAc,CAACC,aAAa,CAACN,iBAAiB,EAAEI,YAAY,CAAC;MAElF,IAAMG,QAAQ,GAAGnB,kBAAkB,CAACoB,gBAAgB,CAAgBtB,QAAQ,CAACuB,MAAM,EAAEP,QAAQ,CAAC;MAC9F,IAAMQ,QAAQ,GAAGtB,kBAAkB,CAACoB,gBAAgB,CAAgBtB,QAAQ,CAACyB,MAAM,EAAET,QAAQ,CAAC;MAE9F,OAAO;QACLU,OAAO,EAAEF,QAAQ,GACb,IAAIG,KAAO,CACRX,QAA4B,CAACrN,GAAG,CAACuM,kBAAkB,CAAC0B,MAAM,CAAC,EAC5DhB,gBAAgB,EAChBE,iBAAiB,CAClB,GACD,IAAI;QACRe,OAAO,EAAER,QAAQ,GACb,IAAIS,OAAO,CACRd,QAA4B,CAACrN,GAAG,CAACuM,kBAAkB,CAAC6B,MAAM,CAAC,EAC5DnB,gBAAgB,EAChBE,iBAAiB,CAClB,GACD,IAAI;QACRkB,UAAU,EACR,CAACR,QAAQ,IAAI,CAACH,QAAQ,GAClB,IAAIpM,aAAa,CAAC+L,QAAQ,CAACrN,GAAG,CAACuM,kBAAkB,CAAC+B,YAAY,CAAC,EAAErB,gBAAgB,EAAEE,iBAAiB,CAAC,GACrG,IAAI;QACVtN,WAAW,EAAXA,WAAW;QACX7B,YAAY,EAAZA;OACD;KACF,CAAC;IAEF,OAAO,IAAIuQ,OAAW,CAAC;MACrBC,QAAQ,EAAEpB,WAAW,CAClBvJ,MAAM,CAAC,UAACtF,KAAK;QAAA,OAAKA,KAAK,CAAC2P,OAAO;QAAC,CAChClO,GAAG,CAAC,UAACzB,KAAK;QAAA,OAAM;UACf2P,OAAO,EAAE3P,KAAK,CAAC2P,OAAsC;UACrDrO,WAAW,EAAEtB,KAAK,CAACsB,WAAW;UAC9B7B,YAAY,EAAEO,KAAK,CAACP;SACrB;OAAC,CAAC;MACLyQ,QAAQ,EAAErB,WAAW,CAClBvJ,MAAM,CAAC,UAACtF,KAAK;QAAA,OAAKA,KAAK,CAACwP,OAAO;QAAC,CAChC/N,GAAG,CAAC,UAACzB,KAAK;QAAA,OAAM;UACfwP,OAAO,EAAExP,KAAK,CAACwP,OAAsC;UACrDlO,WAAW,EAAEtB,KAAK,CAACsB,WAAW;UAC9B7B,YAAY,EAAEO,KAAK,CAACP;SACrB;OAAC,CAAC;MACL0Q,WAAW,EAAEtB,WAAW,CACrBvJ,MAAM,CAAC,UAACtF,KAAK;QAAA,OAAKA,KAAK,CAAC8P,UAAU;QAAC,CACnCrO,GAAG,CAAC,UAACzB,KAAK;QAAA,OAAM;UACf8P,UAAU,EAAE9P,KAAK,CAAC8P,UAA+C;UACjExO,WAAW,EAAEtB,KAAK,CAACsB,WAAW;UAC9B7B,YAAY,EAAEO,KAAK,CAACP;SACrB;OAAC,CAAC;MACLL,SAAS,EAAE8O,KAAK,CAAC9O;KAClB,CAAC;GACH;EAAA,mBAEcuP,UAAU,GAAjB,oBAAkBhP,QAAiB,EAAE8E,KAAmB;IAC9D,IAAI9E,QAAQ,EAAE;MACZ,OAAOyQ,KAAK,CAACC,OAAO,CAAC5L,KAAK,CAACxH,OAAO,CAAC;;IAErC,OAAO,IAAI,CAACqT,OAAO,CAAC7L,KAAK,CAAC;GAC3B;EAAA,mBAMc6L,OAAO,GAAd,iBAAe7L,KAAmB;IACxC,IAAQxH,OAAO,GAAuDwH,KAAK,CAAnExH,OAAO;MAAE2D,OAAO,GAA8C6D,KAAK,CAA1D7D,OAAO;MAAE2P,QAAQ,GAAoC9L,KAAK,CAAjD8L,QAAQ;MAAEC,MAAM,GAA4B/L,KAAK,CAAvC+L,MAAM;MAAEC,SAAS,GAAiBhM,KAAK,CAA/BgM,SAAS;MAAEC,UAAU,GAAKjM,KAAK,CAApBiM,UAAU;IACjE,OAAO,IAAIC,KAAK,CACd1T,OAAO,EACP2D,OAAO,EACPgQ,QAAQ,CAACL,QAAQ,CAAChU,QAAQ,EAAE,CAAC,EAC7BiU,MAAM,YACKvJ,SAAS,EACpB,KAAK,EACLwJ,SAAS,GAAGnT,SAAS,CAACC,IAAI,CAACkT,SAAS,CAAC,GAAGxJ,SAAS,EACjDyJ,UAAU,GAAGpT,SAAS,CAACC,IAAI,CAACmT,UAAU,CAAC,GAAGzJ,SAAS,CACpD;GACF;EAAA,mBAEcyI,MAAM,GAAb;QAAgBzR,GAAG,QAAHA,GAAG;MAAE4S,YAAY,QAAZA,YAAY;MAAEC,SAAS,QAATA,SAAS;MAAEC,WAAW,QAAXA,WAAW;MAAE5C,OAAO,QAAPA,OAAO;MAAEC,QAAQ,QAARA,QAAQ;IAClF,OAAO,IAAIpM,IAAI,CACbgM,kBAAkB,CAACsC,OAAO,CAACnC,OAAO,CAAC,EACnCH,kBAAkB,CAACsC,OAAO,CAAClC,QAAQ,CAAC,EACpCwC,QAAQ,CAAC3S,GAAG,CAAc,EAC1B4S,YAAY,EACZC,SAAS,EACTF,QAAQ,CAACG,WAAW,CAAC,CACtB;GACF;EAAA,mBASc3B,gBAAgB,GAAvB,0BACNvT,IAAc,EACdmE,KAAwC;IAExC,OAAOA,KAAK,CAACsD,KAAK,CAAC,UAAC5B,IAAI;MAAA,OAAKA,IAAI,CAAC7F,IAAI,KAAKA,IAAI;MAAC;GACjD;EAAA;AAAA;AAzCcmS,+BAAY,GAAG,UAACtM,IAAmC;EAChE,OAAOA,IAAI,CAAC7F,IAAI,KAAKiS,QAAQ,CAACyB,MAAM,GAAGvB,kBAAkB,CAAC0B,MAAM,CAAChO,IAAI,CAAC,GAAGsM,kBAAkB,CAAC6B,MAAM,CAACnO,IAAI,CAAC;AAC1G,CAAC;AA2BcsM,yBAAM,GAAG;MAAGgD,QAAQ,SAARA,QAAQ;IAAEC,QAAQ,SAARA,QAAQ;EAC3C,OAAO,IAAIhP,IAAI,CACbgN,cAAc,CAACC,aAAa,CAAClB,kBAAkB,CAACsC,OAAO,CAACU,QAAQ,CAACvM,KAAK,CAAC,EAAEuM,QAAQ,CAAC5S,QAAQ,CAAC,EAC3F6Q,cAAc,CAACC,aAAa,CAAClB,kBAAkB,CAACsC,OAAO,CAACW,QAAQ,CAACxM,KAAK,CAAC,EAAEwM,QAAQ,CAAC7S,QAAQ,CAAC,CAC5F;AACH,CAAC;;;;"}
\ No newline at end of file
